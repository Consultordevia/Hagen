#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50047_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50047){}   
		type("System.IO.Path"; System_IO_Path50047) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50047 "Pedido HAGEN PDF"
{
	Caption = 'Pedido HAGEN PDF';
	RDLCLayout = './Layouts/PedidoHAGENPDF.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Header";"Sales Header")
		{
			DataItemTableView = sorting("Document Type","No.") where("Document Type"=const(Order));
			RequestFilterFields = "No.","Sell-to Customer No.","No. Printed";
			RequestFilterHeading = 'Pedido';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(CIF_NIF__FORMAT_CIFNIF; 'CIF/NIF: '+Format(CIFNIF))
			{
			}
			column(PEDIDO; 'PEDIDO')
			{
			}
			column(DireccionEnvio; 'Dirección Envío')
			{
			}
			column(DireccionFiscal; 'Dirección Fiscal')
			{
			}
			column(CustAddr1; CustAddr[1])
			{
			}
			column(SearchName_Cust; Cust."Search Name")
			{
			}
			column(CustAddr5; CustAddr[5])
			{
			}
			column(CustAddr4; CustAddr[4])
			{
			}
			column(CustAddr3; CustAddr[3])
			{
			}
			column(CustAddr2; CustAddr[2])
			{
			}
			column(ShipToAddr5; ShipToAddr[5])
			{
			}
			column(ShipToAddr4; ShipToAddr[4])
			{
			}
			column(ShipToAddr3; ShipToAddr[3])
			{
			}
			column(ShipToAddr2; ShipToAddr[2])
			{
			}
			column(Trasnportista__RectraName; 'Trasnportista: '+Rectra.Name)
			{
			}
			column(SunoRef__SalesHeaderYourReference; 'Su nº Ref: '+"Sales Header"."Your Reference")
			{
			}
			column(Notelefono__CustPhoneNo; 'Nº telefono:'+ Cust."Phone No.")
			{
			}
			column(CustAddr7; CustAddr[7])
			{
			}
			column(CustAddr6; CustAddr[6])
			{
			}
			column(ShipToAddr8; ShipToAddr[8])
			{
			}
			column(ShipToAddr7; ShipToAddr[7])
			{
			}
			column(ShipToAddr6; ShipToAddr[6])
			{
			}
			column(SalesHeaderDocumentDate; Format("Sales Header"."Document Date"))
			{
			}
			column(Fecha; 'Fecha')
			{
			}
			column(No_SalesHeader; "Sales Header"."No.")
			{
			}
			column(SalesPurchPersonName; SalesPurchPerson.Name)
			{
			}
			column(SalesPersonText; SalesPersonText)
			{
			}
			column(Bill_toCustomerNo_SalesHeader_Lbl; "Sales Header".FieldCaption("Bill-to Customer No."))
			{
			}
			column(Bill_toCustomerNo_SalesHeader; "Sales Header"."Bill-to Customer No.")
			{
			}
			column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005,Format(ReportForNav.PageNo)))
			{
			}
			dataitem("Sales Line";"Sales Line")
			{
				DataItemLink = "Document Type"=field("Document Type"),"Document No."=field("No.");
				DataItemLinkReference = "Sales Header";
				DataItemTableView = sorting("Document Type","Document No.","Line No.");
				column(ReportForNavId_32; 32) {} // Autogenerated by ForNav - Do not delete
				column(Linno; 'Lin.nº')
				{
				}
				column(Importe; 'Importe')
				{
					AutoFormatType = 1;
				}
				column(Preciofinal; 'Precio final')
				{
				}
				column(Dtos; 'Dtos')
				{
				}
				column(Tarifa; 'Tarifa')
				{
					DecimalPlaces = 3:3;
				}
				column(IvaPct; 'Iva%')
				{
				}
				column(Cantidad; 'Cantidad')
				{
				}
				column(PctBenf; '% Benf')
				{
				}
				column(PVPR; 'PVPR')
				{
				}
				column(Ean; 'Ean')
				{
				}
				column(Descripcion; 'Descripción')
				{
				}
				column(Referencia; 'Referencia')
				{
				}
				column(VATBaseAmount_SalesLine; "Sales Line"."VAT Base Amount")
				{
					AutoFormatType = 1;
				}
				column(Description_SalesLine; "Sales Line".Description)
				{
				}
				column(Renglon; Renglon)
				{
					DecimalPlaces = 0:0;
				}
				column(precioreco; precioreco)
				{
				}
				column(beneficio; beneficio)
				{
				}
				column(cb; cb)
				{
				}
				column(CODIVA; CODIVA)
				{
				}
				column(Preciobase_SalesLine; "Precio base")
				{
					DecimalPlaces = 2:2;
				}
				column(Preciofinal_SalesLine; "Precio final")
				{
				}
				column(dto; dto)
				{
				}
				column(LineAmount_SalesLine; "Sales Line"."Line Amount")
				{
					AutoFormatType = 1;
				}
				column(Quantity_SalesLine; "Sales Line".Quantity)
				{
				}
				column(No_SalesLine; "Sales Line"."No.")
				{
				}
				column(CIF_CompanyInfoVATRegistrationNo; 'CIF. '+CompanyInfo."VAT Registration No.")
				{
				}
				column(TelEspana__34961200945TelPortugal__351308803400; 'Tel.España: +34 96 120 09 45  Tel.Portugal: +351 308 803 400')
				{
				}
				column(totalbase_totaliva; totalbase+totaliva)
				{
				}
				column(totaliva; totaliva)
				{
				}
				column(totalbase; totalbase)
				{
				}
				column(PaymentMethodDescription; PaymentMethod.Description)
				{
				}
				column(ShipmentMethodDescription; ShipmentMethod.Description)
				{
				}
				column(PaymentTermsDescription; PaymentTerms.Description)
				{
				}
				column(Total; 'Total ')
				{
				}
				trigger OnPreDataItem();
				begin
					VATAmountLine.DeleteAll;
					SalesShipmentBuffer.Reset;
					SalesShipmentBuffer.DeleteAll;
					FirstValueEntryNo := 0;
					MoreLines := "Sales Line".Find('+');
					while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) do
					  MoreLines := "Sales Line".Next(-1) <> 0;
					if not MoreLines then
					  CurrReport.Break;
					SetRange("Line No.",0,"Sales Line"."Line No.");
					/// CREATETOTALS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount","Pmt. Disc. Given Amount");
				end;
				
				trigger OnAfterGetRecord();
				begin
					if RecItem.Get("Sales Line"."No.") then begin
						 if RecItem."No permite pedido" then begin
							  CurrReport.Skip;
						 end;
					end;
					if "Sales Line".Quantity=0 then begin
						 CurrReport.Skip;
					end;
					Renglon:=Renglon+1;
					dto:='';
					if ("Sales Line"."Dto% cabecera/oferta"<>0) and
					   ("Sales Line"."% Dto. vendedor"<>0) and
					   ("Sales Line"."Line Discount %"<>0)then begin
						 dto:=Format("Sales Line"."% Dto. vendedor")+'+'+
							  Format("Sales Line"."Dto% cabecera/oferta")+'+'+
							  Format("Sales Line"."Line Discount %");
					end;
					if ("Sales Line"."Dto% cabecera/oferta"<>0) and
					   ("Sales Line"."% Dto. vendedor"=0) and
					   ("Sales Line"."Line Discount %"=0)then begin
						 dto:=Format("Sales Line"."Dto% cabecera/oferta");
					end;
					if ("Sales Line"."Dto% cabecera/oferta"=0) and
					   ("Sales Line"."% Dto. vendedor"<>0) and
					   ("Sales Line"."Line Discount %"=0)then begin
						 dto:=Format("Sales Line"."% Dto. vendedor");
					end;
					if ("Sales Line"."Dto% cabecera/oferta"=0) and
					   ("Sales Line"."% Dto. vendedor"=0) and
					   ("Sales Line"."Line Discount %"<>0)then begin
						 dto:=Format("Sales Line"."Line Discount %");
					end;
					if ("Sales Line"."Dto% cabecera/oferta"<>0) and
					   ("Sales Line"."% Dto. vendedor"<>0) and
					   ("Sales Line"."Line Discount %"=0)then begin
						 dto:=Format("Sales Line"."% Dto. vendedor")+'+'+
							  Format("Sales Line"."Dto% cabecera/oferta");
					end;
					if ("Sales Line"."Dto% cabecera/oferta"<>0) and
					   ("Sales Line"."% Dto. vendedor"=0) and
					   ("Sales Line"."Line Discount %"<>0)then begin
						 dto:=Format("Sales Line"."Dto% cabecera/oferta")+'+'+
							  Format("Sales Line"."Line Discount %");
					end;
					if ("Sales Line"."Dto% cabecera/oferta"=0) and
					   ("Sales Line"."% Dto. vendedor"<>0) and
					   ("Sales Line"."Line Discount %"<>0)then begin
						 dto:=Format("Sales Line"."% Dto. vendedor")+'+'+
							  Format("Sales Line"."Line Discount %");
					end;
					PostedShipmentDate := 0D;
					if Quantity <> 0 then
					  PostedShipmentDate := FindPostedShipmentDate;
					if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
					  "No." := '';
					if VATPostingSetup.Get("Sales Line"."VAT Bus. Posting Group","Sales Line"."VAT Prod. Posting Group") then begin
						VATAmountLine.Init;
					///	VATAmountLine."VAT Identifier" := "Sales Shipment Line"."VAT Identifier";
						VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
						VATAmountLine."Tax Group Code" := "Tax Group Code";
						VATAmountLine."VAT %" := VATPostingSetup."VAT %";
						VATAmountLine."EC %" := VATPostingSetup."EC %";
						VATAmountLine."VAT Base" := "Sales Line"."VAT Base Amount";
						VATAmountLine."Amount Including VAT" :="Sales Line"."VAT Base Amount";
						VATAmountLine."Line Amount" :="Sales Line"."VAT Base Amount";
						/*VATAmountLine."Pmt. Disc. Given Amount" := "Pmt. Disc. Given Amount";
						IF "Allow Invoice Disc." THEN
						  VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
						VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
						*/
						VATAmountLine.SetCurrencyCode("Sales Header"."Currency Code");
					///	VATAmountLine."VAT Difference" := "VAT Difference";
					///	VATAmountLine."EC Difference" := "EC Difference";
						if "Sales Header"."Prices Including VAT" then
						  VATAmountLine."Prices Including VAT" := true;
						VATAmountLine.InsertLine;
					end;
					CODIVA:=Format(VATPostingSetup."VAT %");
					if VATPostingSetup."EC %"<>0 then begin
						 CODIVA:=CODIVA+'+'+Format(VATPostingSetup."EC %");
					end;
					cb:='';
					precioreco:=0;
					FRAGIL:=false;
					if RecItem.Get("Sales Line"."No.") then begin
						 precioreco:=RecItem."Precio recomendado";
						 cb:=RecItem.ean;
						 FRAGIL:=RecItem."Producto FRAGIL";
					end;
					RecTVP.Reset;
					RecTVP.SetRange(RecTVP."Item No.","Sales Line"."No.");
					RecTVP.SetRange(RecTVP."Sales Code","Sales Line"."Customer Price Group");
					if RecTVP.FindFirst then begin
						 precioreco:=RecTVP."Precio recomendado";
					end;
					beneficio:=0;
					if "Sales Line".Quantity<>0 then begin
						 if precioreco<>0 then begin
							  beneficio:=("Sales Line"."Line Amount"/"Sales Line".Quantity)/precioreco*100;
						 end;
					end;
					totalbase:=totalbase+"Sales Line"."Line Amount";
					totaliva:=totaliva+ROUND("Sales Line"."Line Amount"*("Sales Line"."VAT %"+"Sales Line"."EC %"),0.01)/100;
					totalfac:=totaliva+"Sales Line"."Line Amount"+
					+ROUND("Sales Line".Amount*"Sales Line"."VAT %",0.01)/100;
				
				end;
				
			}
			dataitem(SalesLine;"Sales Line")
			{
				DataItemLink = "Document Type"=field("Document Type"),"Document No."=field("No.");
				DataItemTableView = sorting("Document Type","Document No.","Line No.");
				column(ReportForNavId_69; 69) {} // Autogenerated by ForNav - Do not delete
				column(DETALLEDELASREFERENCIASQUESERANSERVIDASELDIA_FORMAT_SalesHea; 'DETALLE DE LAS REFERENCIAS QUE SERAN SERVIDAS EL DIA '+Format("Sales Header"."Fecha envio pendiente stock"))
				{
				}
				column(Linno3; 'Lin.nº')
				{
				}
				column(Referencia3; 'Referencia')
				{
				}
				column(Descripcion3; 'Descripción')
				{
				}
				column(Ean3; 'Ean')
				{
				}
				column(Tarifa2; 'Tarifa')
				{
					DecimalPlaces = 3:3;
				}
				column(Cantidad3; 'Cantidad')
				{
				}
				column(Dtos2; 'Dtos')
				{
				}
				column(Importe2; 'Importe')
				{
					AutoFormatType = 1;
				}
				column(Preciofinal2; 'Precio final')
				{
				}
				column(IvaPct3; 'Iva%')
				{
				}
				column(PctBenf3; '% Benf')
				{
				}
				column(PVPR3; 'PVPR')
				{
				}
				column(Fechaenviopendientestock_SalesHeader; "Sales Header"."Fecha envio pendiente stock")
				{
				}
				column(Renglon5; Renglon)
				{
					DecimalPlaces = 0:0;
				}
				column(No_SalesLine5; SalesLine."No.")
				{
				}
				column(Description_SalesLine6; SalesLine.Description)
				{
				}
				column(Preciobase_SalesLine3; "Precio base")
				{
					DecimalPlaces = 2:2;
				}
				column(Quantity_SalesLine5; SalesLine.Quantity)
				{
				}
				column(dto3; dto)
				{
				}
				column(CODIVA5; CODIVA)
				{
				}
				column(Preciofinal_SalesLine3; "Precio final")
				{
				}
				column(LineAmount_SalesLine3; "Sales Line"."Line Amount")
				{
					AutoFormatType = 1;
				}
				column(precioreco5; precioreco)
				{
				}
				column(beneficio5; beneficio)
				{
				}
				trigger OnAfterGetRecord();
				begin
					if RecItem.Get(SalesLine."No.") then begin
						 if not RecItem."No permite pedido" then begin
							  CurrReport.Skip;
						 end;
					end;
					if SalesLine.Quantity=0 then begin
						 CurrReport.Skip;
					end;
					Renglon:=Renglon+1;
					dto:='';
					if (SalesLine."Dto% cabecera/oferta"<>0) and
					   (SalesLine."% Dto. vendedor"<>0) and
					   (SalesLine."Line Discount %"<>0)then begin
						 dto:=Format(SalesLine."% Dto. vendedor")+'+'+
							  Format(SalesLine."Dto% cabecera/oferta")+'+'+
							  Format(SalesLine."Line Discount %");
					end;
					if (SalesLine."Dto% cabecera/oferta"<>0) and
					   (SalesLine."% Dto. vendedor"=0) and
					   (SalesLine."Line Discount %"=0)then begin
						 dto:=Format(SalesLine."Dto% cabecera/oferta");
					end;
					if (SalesLine."Dto% cabecera/oferta"=0) and
					   (SalesLine."% Dto. vendedor"<>0) and
					   (SalesLine."Line Discount %"=0)then begin
						 dto:=Format(SalesLine."% Dto. vendedor");
					end;
					if (SalesLine."Dto% cabecera/oferta"=0) and
					   (SalesLine."% Dto. vendedor"=0) and
					   (SalesLine."Line Discount %"<>0)then begin
						 dto:=Format(SalesLine."Line Discount %");
					end;
					if (SalesLine."Dto% cabecera/oferta"<>0) and
					   (SalesLine."% Dto. vendedor"<>0) and
					   (SalesLine."Line Discount %"=0)then begin
						 dto:=Format(SalesLine."% Dto. vendedor")+'+'+
							  Format(SalesLine."Dto% cabecera/oferta");
					end;
					if (SalesLine."Dto% cabecera/oferta"<>0) and
					   (SalesLine."% Dto. vendedor"=0) and
					   (SalesLine."Line Discount %"<>0)then begin
						 dto:=Format(SalesLine."Dto% cabecera/oferta")+'+'+
							  Format(SalesLine."Line Discount %");
					end;
					if (SalesLine."Dto% cabecera/oferta"=0) and
					   (SalesLine."% Dto. vendedor"<>0) and
					   (SalesLine."Line Discount %"<>0)then begin
						 dto:=Format(SalesLine."% Dto. vendedor")+'+'+
							  Format(SalesLine."Line Discount %");
					end;
					PostedShipmentDate := 0D;
					if Quantity <> 0 then
					  PostedShipmentDate := FindPostedShipmentDate;
					if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
					  "No." := '';
					if VATPostingSetup.Get(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group") then begin
						VATAmountLine.Init;
					///	VATAmountLine."VAT Identifier" := "Sales Shipment Line"."VAT Identifier";
						VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
						VATAmountLine."Tax Group Code" := "Tax Group Code";
						VATAmountLine."VAT %" := VATPostingSetup."VAT %";
						VATAmountLine."EC %" := VATPostingSetup."EC %";
						VATAmountLine."VAT Base" := SalesLine."VAT Base Amount";
						VATAmountLine."Amount Including VAT" :=SalesLine."VAT Base Amount";
						VATAmountLine."Line Amount" :=SalesLine."VAT Base Amount";
						/*VATAmountLine."Pmt. Disc. Given Amount" := "Pmt. Disc. Given Amount";
						IF "Allow Invoice Disc." THEN
						  VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
						VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
						*/
						VATAmountLine.SetCurrencyCode("Sales Header"."Currency Code");
					///	VATAmountLine."VAT Difference" := "VAT Difference";
					///	VATAmountLine."EC Difference" := "EC Difference";
						if "Sales Header"."Prices Including VAT" then
						  VATAmountLine."Prices Including VAT" := true;
						VATAmountLine.InsertLine;
					end;
					CODIVA:=Format(VATPostingSetup."VAT %");
					if VATPostingSetup."EC %"<>0 then begin
						 CODIVA:=CODIVA+'+'+Format(VATPostingSetup."EC %");
					end;
					cb:='';
					precioreco:=0;
					FRAGIL:=false;
					if RecItem.Get(SalesLine."No.") then begin
						 precioreco:=RecItem."Precio recomendado";
						 cb:=RecItem.ean;
						 FRAGIL:=RecItem."Producto FRAGIL";
					end;
					RecTVP.Reset;
					RecTVP.SetRange(RecTVP."Item No.",SalesLine."No.");
					RecTVP.SetRange(RecTVP."Sales Code",SalesLine."Customer Price Group");
					if RecTVP.FindFirst then begin
						 precioreco:=RecTVP."Precio recomendado";
					end;
					beneficio:=0;
					if SalesLine.Quantity<>0 then begin
						 if precioreco<>0 then begin
							  beneficio:=(SalesLine."Line Amount"/SalesLine.Quantity)/precioreco*100;
						 end;
					end;
					totalbase:=totalbase+SalesLine."Line Amount";
					totaliva:=totaliva+ROUND(SalesLine."Line Amount"*(SalesLine."VAT %"+SalesLine."EC %"),0.01)/100;
					totalfac:=totaliva+SalesLine."Line Amount"+
					+ROUND(SalesLine.Amount*SalesLine."VAT %",0.01)/100;
				
				end;
				
			}
			dataitem(VATCounter;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_95; 95) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				begin
					SetRange(Number,1,VATAmountLine.Count);
				end;
				
				trigger OnAfterGetRecord();
				begin
					VATAmountLine.GetLine(Number);
				end;
				
			}
			dataitem(VatCounterLCY;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_96; 96) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				begin
					if (not GLSetup."Print VAT specification in LCY") or
					   ("Sales Header"."Currency Code"  = '') or
					   (VATAmountLine.GetTotalVATAmount = 0) then
					  CurrReport.Break;
					SetRange(Number,1,VATAmountLine.Count);
					if GLSetup."LCY Code" = '' then
					  VALSpecLCYHeader := Text007 + Text008
					else
					  VALSpecLCYHeader := Text007 + Format(GLSetup."LCY Code");
					CurrExchRate.FindCurrency("Sales Header"."Posting Date","Sales Header"."Currency Code",1);
					CalculatedExchRate := ROUND(1 / "Sales Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount",0.000001);
					VALExchRate := StrSubstNo(Text009,CalculatedExchRate,CurrExchRate."Exchange Rate Amount");
				end;
				
				trigger OnAfterGetRecord();
				begin
					VATAmountLine.GetLine(Number);
					VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Sales Header"."Currency Factor");
					VALVATAmountLCY :=ROUND(VATAmountLine."VAT Amount" / "Sales Header"."Currency Factor");
				end;
				
			}
			dataitem(Total;Integer)
			{
				DataItemTableView = sorting(Number) where(Number=const(1));
				column(ReportForNavId_97; 97) {} // Autogenerated by ForNav - Do not delete
			}
			dataitem(Total2;Integer)
			{
				DataItemTableView = sorting(Number) where(Number=const(1));
				column(ReportForNavId_98; 98) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				begin
					if not ShowShippingAddr then
					  CurrReport.Break;
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				if Exists('\\192.168.0.225\compartido\CABECERA.BMP') then begin
					 "Sales Header"."Logo cabecera".Import('\\192.168.0.225\compartido\CABECERA.BMP',false);
				end;
				CurrReport.Language := Language.GetLanguageID("Language Code");
				VALORADO:="Sales Header"."Albaran valorado";
				Rectra.Init;
				if Rectra.Get("Sales Header"."Shipping Agent Code") then begin
				end;
				if RespCenter.Get("Responsibility Center") then begin
				  FormatAddr.RespCenter(CompanyAddr,RespCenter);
				  CompanyInfo."Phone No." := RespCenter."Phone No.";
				  CompanyInfo."Fax No." := RespCenter."Fax No.";
				end else begin
				  FormatAddr.Company(CompanyAddr,CompanyInfo);
				end;
				if "Salesperson Code" = '' then begin
				  SalesPurchPerson.Init;
				  SalesPersonText := '';
				end else begin
				  SalesPurchPerson.Get("Salesperson Code");
				  SalesPersonText := Text000;
				end;
				if "Your Reference" = '' then
				  ReferenceText := ''
				else
				  ReferenceText := FieldCaption("Your Reference");
				if "VAT Registration No." = '' then
				  VATNoText := ''
				else
				  VATNoText := FieldCaption("VAT Registration No.");
				if "Currency Code" = '' then begin
				  GLSetup.TestField("LCY Code");
				  TotalText := StrSubstNo(Text001,GLSetup."LCY Code");
				  TotalInclVATText := StrSubstNo(Text1100000,GLSetup."LCY Code");
				  TotalExclVATText := StrSubstNo(Text1100001,GLSetup."LCY Code");
				end else begin
				  TotalText := StrSubstNo(Text001,"Currency Code");
				  TotalInclVATText := StrSubstNo(Text1100000,"Currency Code");
				  TotalExclVATText := StrSubstNo(Text1100001,"Currency Code");
				end;
				FormatAddr.SalesHeaderSellTo(CustAddr,"Sales Header");
				if not Cust.Get("Bill-to Customer No.") then
				  Clear(Cust);
				if "Payment Terms Code" = '' then
				  PaymentTerms.Init
				else begin
				  PaymentTerms.Get("Payment Terms Code");
				  PaymentTerms.TranslateDescription(PaymentTerms,"Language Code");
				end;
				if "Payment Method Code" = '' then
				  PaymentMethod.Init
				else
				  PaymentMethod.Get("Payment Method Code");
				if "Shipment Method Code" = '' then
				  ShipmentMethod.Init
				else begin
				  ShipmentMethod.Get("Shipment Method Code");
				  ShipmentMethod.TranslateDescription(ShipmentMethod,"Language Code");
				end;
				FormatAddr.SalesHeaderShipTo(ShipToAddr,CustAddr,"Sales Header");
				ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
				for i := 1 to ArrayLen(ShipToAddr) do
				  if ShipToAddr[i] <> CustAddr[i] then
					ShowShippingAddr := true;
				/*
				IF LogInteraction THEN
				  IF NOT CurrReport.PREVIEW THEN BEGIN
					IF "Bill-to Contact No." <> '' THEN
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Contact,"Bill-to Contact No.","Salesperson Code",
						"Campaign No.","Posting Description",'')
					ELSE
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Customer,"Bill-to Customer No.","Salesperson Code",
						"Campaign No.","Posting Description",'');
				  END;
				*/
				CustAddrdf[1]:=CustAddr[1];
				CustAddrdf[2]:=CustAddr[2];
				CustAddrdf[3]:=CustAddr[3];
				CustAddrdf[4]:=CustAddr[4];
				CustAddrdf[5]:=CustAddr[5];
				CustAddrdf[6]:=CustAddr[6];
				CustAddrdf[7]:=CustAddr[7];
				CustAddrdf[8]:=CustAddr[8];
				CIFNIF:="Sales Header"."VAT Registration No.";
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies;NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowInternalInfo;ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
					field(LogInteraction;LogInteraction)
					{
						ApplicationArea = Basic;
						Caption = 'Log Interaction';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			InitLogInteraction;
			; // TODO RequestRequestOptionsPage.LogInteraction.ENABLED(LogInteraction);
		end;

	}

	trigger OnInitReport()
	begin
		
		GLSetup.Get;
		CompanyInfo.Get;
		SalesSetup.Get;
		case SalesSetup."Logo Position on Documents" of
		  SalesSetup."logo position on documents"::"No Logo":;
		  SalesSetup."logo position on documents"::Left:
			begin
			  CompanyInfo.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Center:
			begin
			  CompanyInfo1.Get;
			  CompanyInfo1.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Right:
			begin
			  CompanyInfo2.Get;
			  CompanyInfo2.CalcFields(Picture);
			end;
		end;
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if not CurrReport.UseRequestPage then
		  InitLogInteraction;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Salesperson';
		Text001: label 'Total %1';
		Text002: label 'Total %1 Incl. VAT';
		Text003: label 'COPY';
		Text004: label 'Sales - Invoice %1';
		Text005: label 'Page %1';
		Text006: label 'Total %1 Excl. VAT';
		GLSetup: Record "General Ledger Setup";
		ShipmentMethod: Record "Shipment Method";
		PaymentTerms: Record "Payment Terms";
		SalesPurchPerson: Record "Salesperson/Purchaser";
		CompanyInfo: Record "Company Information";
		CompanyInfo1: Record "Company Information";
		CompanyInfo2: Record "Company Information";
		SalesSetup: Record "Sales & Receivables Setup";
		Cust: Record Customer;
		VATAmountLine: Record "VAT Amount Line" temporary;
		PostedDocDim1: Record "Dimension Set Entry";
		PostedDocDim2: Record "Dimension Set Entry";
		RespCenter: Record "Responsibility Center";
		Language: Record Language;
		CurrExchRate: Record "Currency Exchange Rate";
		SalesInvCountPrinted: Codeunit "Sales Inv.-Printed";
		FormatAddr: Codeunit "Format Address";
		SegManagement: Codeunit SegManagement;
		SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
		PostedShipmentDate: Date;
		CustAddr: array [8] of Text[50];
		CustAddrdf: array [8] of Text[50];
		ShipToAddr: array [8] of Text[50];
		CompanyAddr: array [8] of Text[50];
		OrderNoText: Text[30];
		SalesPersonText: Text[30];
		VATNoText: Text[30];
		ReferenceText: Text[30];
		TotalText: Text[50];
		TotalExclVATText: Text[50];
		TotalInclVATText: Text[50];
		MoreLines: Boolean;
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		CopyText: Text[30];
		ShowShippingAddr: Boolean;
		i: Integer;
		NextEntryNo: Integer;
		FirstValueEntryNo: Integer;
		DimText: Text[120];
		OldDimText: Text[75];
		ShowInternalInfo: Boolean;
		Continue: Boolean;
		LogInteraction: Boolean;
		VALVATBaseLCY: Decimal;
		VALVATAmountLCY: Decimal;
		VALSpecLCYHeader: Text[80];
		Text007: label 'VAT Amount Specification in ';
		Text008: label 'Local Currency';
		VALExchRate: Text[50];
		Text009: label 'Exchange rate: %1/%2';
		CalculatedExchRate: Decimal;
		Text010: label 'Sales - Prepayment Invoice %1';
		Text1100000: label 'Total %1 Incl. VAT+EC';
		Text1100001: label 'Total %1 Excl. VAT+EC';
		VATPostingSetup: Record "VAT Posting Setup";
		PaymentMethod: Record "Payment Method";
		dto: Code[10];
		cb: Code[20];
		precioreco: Decimal;
		beneficio: Decimal;
		RecItem: Record Item;
		totalbase: Decimal;
		totaliva: Decimal;
		totalfac: Decimal;
		VALORADO: Boolean;
		Rectra: Record "Shipping Agent";
		Renglon: Integer;
		FRAGIL: Boolean;
		CODIVA: Code[12];
		RecTVP: Record "Sales Price";
		CIFNIF: Text[30];

	procedure InitLogInteraction()
	begin
		LogInteraction := SegManagement.FindInteractTmplCode(4) <> '';
	end;

	procedure FindPostedShipmentDate(): Date
	var
		SalesShipmentHeader: Record "Sales Shipment Header";
		SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
	begin
		NextEntryNo := 1;
	end;

	procedure GenerateBufferFromValueEntry(SalesInvoiceLine2: Record "Sales Invoice Line")
	var
		ValueEntry: Record "Value Entry";
		ItemLedgerEntry: Record "Item Ledger Entry";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
		TotalQuantity := SalesInvoiceLine2."Quantity (Base)";
	end;

	procedure GenerateBufferFromShipment(SalesInvoiceLine: Record "Sales Invoice Line")
	var
		SalesInvoiceHeader: Record "Sales Invoice Header";
		SalesInvoiceLine2: Record "Sales Invoice Line";
		SalesShipmentHeader: Record "Sales Shipment Header";
		SalesShipmentLine: Record "Sales Shipment Line";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
	end;

	procedure CorrectShipment(var SalesShipmentLine: Record "Sales Shipment Line")
	var
		SalesInvoiceLine: Record "Sales Invoice Line";
	begin
		SalesInvoiceLine.SetCurrentkey("Shipment No.","Shipment Line No.");
		SalesInvoiceLine.SetRange("Shipment No.",SalesShipmentLine."Document No.");
		SalesInvoiceLine.SetRange("Shipment Line No.",SalesShipmentLine."Line No.");
		if SalesInvoiceLine.Find('-') then
		   repeat
			  SalesShipmentLine.Quantity := SalesShipmentLine.Quantity - SalesInvoiceLine.Quantity;
		   until SalesInvoiceLine.Next = 0;
	end;

	procedure AddBufferEntry(SalesInvoiceLine: Record "Sales Invoice Line";QtyOnShipment: Decimal;PostingDate: Date)
	begin
		SalesShipmentBuffer.SetRange("Document No.",SalesInvoiceLine."Document No.");
		SalesShipmentBuffer.SetRange("Line No.",SalesInvoiceLine."Line No.");
		SalesShipmentBuffer.SetRange("Posting Date",PostingDate);
		if SalesShipmentBuffer.Find('-') then begin
		  SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity + QtyOnShipment;
		  SalesShipmentBuffer.Modify;
		  exit;
		end;
		with SalesShipmentBuffer do begin
		  "Document No." := SalesInvoiceLine."Document No.";
		  "Line No." := SalesInvoiceLine."Line No.";
		  "Entry No." := NextEntryNo;
		  Type := SalesInvoiceLine.Type;
		  "No." := SalesInvoiceLine."No.";
		  Quantity := QtyOnShipment;
		 "Posting Date" := PostingDate;
		  Insert;
		  NextEntryNo := NextEntryNo + 1
		end;
	end;

	local procedure DocumentCaption(): Text[250]
	begin
	end;

	procedure GetCarteraInvoice(): Boolean
	var
		CustLedgEntry: Record "Cust. Ledger Entry";
	begin
	end;

	local procedure OnPreSectionSalesLine2_Header2(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput(GetCarteraInvoice);
		end;
	end;
	local procedure OnPreSectionSalesLine2_Header3(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput(VALORADO);
		end;
	end;
	local procedure OnPreSectionSalesLine2_Header4(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput(not VALORADO);
		end;
	end;
	local procedure OnPreSectionSalesLine2_Body6(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput(Type = 0);
		end;
	end;
	local procedure OnPreSectionSalesLine2_Body7(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput((Type > 0) and (VALORADO) and (not FRAGIL));
		end;
	end;
	local procedure OnPreSectionSalesLine2_Body8(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput((Type > 0) and (VALORADO) and FRAGIL);
		end;
	end;
	local procedure OnPreSectionSalesLine2_Body9(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput((Type > 0) and (not VALORADO) and (not FRAGIL));
		end;
	end;
	local procedure OnPreSectionSalesLine2_Body10(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput((Type > 0) and (not VALORADO) and FRAGIL);
		end;
	end;
	local procedure OnPreSectionSalesLine2_Footer15(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput((not "Sales Header"."Prices Including VAT") and (VALORADO));
		end;
	end;
	local procedure OnPreSectionSalesLine2_Footer17(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput("Sales Header"."Prices Including VAT" and
		  (VATAmountLine."VAT Calculation Type" <> VATAmountLine."vat calculation type"::"Reverse Charge VAT"));
		end;
	end;
	local procedure OnPreSectionSalesLine2_Footer18(var "Sales Line" : Record "Sales Line");
	begin
		with "Sales Line" do begin
		  ReportForNav.ShowOutput("Sales Header"."Prices Including VAT" and
		  (VATAmountLine."VAT Calculation Type" = VATAmountLine."vat calculation type"::"Reverse Charge VAT"));
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50047_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50047;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
