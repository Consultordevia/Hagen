#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50001_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50001){}   
		type("System.IO.Path"; System_IO_Path50001) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50001 "_A,B,C productos"
{
	Caption = 'A,B,C productos';
	RDLCLayout = './Layouts/_A,B,Cproductos.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Item;Item)
		{
			CalcFields = "Cantidad facturada","Cantidad abonada","Importe facturado","Importe abonado","Cantidad fabricada";
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.","Gen. Prod. Posting Group","Date Filter","Vendor No.";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			trigger OnPreDataItem();
			begin
				Window.Open(Text000);
				///ItemAmount.DELETEALL;
				i := 0;
			end;
			
			trigger OnAfterGetRecord();
			begin
				Window.Update(1,"No.");
				if (Item."Cantidad fabricada"=0) and
				   (Item."Cantidad facturada"=0) and
				   (Item."Cantidad abonada"=0) and
				   (Item."Importe facturado"=0) and
				   (Item."Importe abonado"=0) then
				  CurrReport.Skip;
				pvp:=0;
				Rec1.Reset;
				Rec1.SetRange(Rec1."Item No.",Item."No.");
				if Rec1.FindFirst then begin
					 pvp:=Rec1."Unit Price";
				end;
				ItemAmount.Init;
				ItemAmount."Item No." := "No.";
				ItemAmount.Amount := (Item."Importe facturado"+Item."Importe abonado");
				ItemAmount."Amount 2" := (Item."Cantidad facturada"+Item."Cantidad abonada");
				ItemAmount.Insert;
				TAcumu:=TAcumu+ItemAmount.Amount;
				Tcanti:=Tcanti+ItemAmount."Amount 2";
			end;
			
		}
		dataitem("Item Amount";"Item Amount")
		{
			DataItemTableView = sorting(Amount,"Amount 2","Item No.") order(descending);
			column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNavPageNo; Format(ReportForNav.PageNo))
			{
			}
			column(TODAY_0_4; Format(Today,0,4))
			{
			}
			column(USERID; UserId)
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(STRSUBSTNO_Text001_ItemDateFilter; StrSubstNo(Text001,ItemDateFilter))
			{
			}
			column(tantob; tantob)
			{
			}
			column(tantoa; tantoa)
			{
			}
			column(CONTA; CONTA)
			{
			}
			column(Description_RecItem; RecItem.Description)
			{
			}
			column(Acumu; Acumu)
			{
				DecimalPlaces = 0:0;
			}
			column(Tanto; Tanto)
			{
				DecimalPlaces = 2:2;
			}
			column(Clasi; Clasi)
			{
				DecimalPlaces = 2:2;
			}
			column(Amount2; "Item Amount"."Amount 2")
			{
				DecimalPlaces = 0:0;
			}
			column(Amount; "Item Amount".Amount)
			{
				DecimalPlaces = 0:0;
			}
			column(ItemNo; "Item Amount"."Item No.")
			{
			}
			trigger OnAfterGetRecord();
			begin
				RecItem.Get("Item Amount"."Item No.");
				CONTA:=CONTA+1;
				Acumu:=Acumu+"Item Amount".Amount;
				if TAcumu<>0 then begin
					 Tanto:=(Acumu*100)/TAcumu;
				end;
				if Tcanti<>0 then begin
					 tantoa:=("Item Amount"."Amount 2"*100)/Tcanti;
				end;
				if TAcumu<>0 then begin
					 tantob:=("Item Amount".Amount*100)/TAcumu;
				end;
				if Tanto<(TA+TB+TA) then begin
					 Clasi:=2;
				end;
				if (Tanto<TB+TA) then begin
					 Clasi:=1;
				end;
				if (Tanto<TA) then begin
					 Clasi:=0;
				end;
				if Tipo=1 then begin
					 RecItem."Clasificación A,B,C":=Clasi;
					 RecItem."Fecha asignada clasificación":=Today;
					 RecItem.Modify;
				end;
				  fnCrearCelda('A' + Format(intFila),Format(CONTA));
				  fnCrearCelda('B' + Format(intFila),Format(RecItem."No."));
				  fnCrearCelda('C' + Format(intFila),Format(RecItem.Description));
				  fnCrearCelda('D' + Format(intFila),Format("Item Amount"."Amount 2"));
				  fnCrearCelda('E' + Format(intFila),Format(ROUND(tantoa,0.01)));
				  fnCrearCelda('F' + Format(intFila),Format("Item Amount".Amount));
				  fnCrearCelda('G' + Format(intFila),Format(ROUND(tantob,0.01)));
				  fnCrearCelda('H' + Format(intFila),Format(Acumu));
				  fnCrearCelda('I' + Format(intFila),Format(ROUND(Tanto,0.01)));
				  fnCrearCelda('J' + Format(intFila),Format(Clasi));
				  fnCrearCelda('K' + Format(intFila),Format(ROUND(RecItem."Unit Cost",0.01)));
				  PVMEDIO:=0;
				  if "Item Amount"."Amount 2"<>0 then begin
					   PVMEDIO:=ROUND("Item Amount".Amount/"Item Amount"."Amount 2",0.01);
				  end;
				  fnCrearCelda('L' + Format(intFila),Format(PVMEDIO));
				  fnCrearCelda('M' + Format(intFila),Format(PVMEDIO-RecItem."Unit Cost"));
				  fnCrearCelda('N' + Format(intFila),Format((PVMEDIO-RecItem."Unit Cost")*"Item Amount"."Amount 2"));
				  RecSP.Reset;
				  RecSP.SetRange(RecSP."Item No.",RecItem."No.");
				  RecSP.SetRange(RecSP."Sales Type",1);
				  RecSP.SetRange(RecSP."Sales Code",RecCVP."Tarifa vigente anterior");
				  if RecSP.FindFirst then begin
					   fnCrearCelda('O' + Format(intFila),Format(RecSP."Unit Price"));
				  end;
				  RecSP.Reset;
				  RecSP.SetRange(RecSP."Item No.",RecItem."No.");
				  RecSP.SetRange(RecSP."Sales Type",1);
				  RecSP.SetRange(RecSP."Sales Code",RecCVP."Tarifa vigente");
				  if RecSP.FindFirst then begin
					   fnCrearCelda('P' + Format(intFila),Format(RecSP."Unit Price"));
				  end;
				  ROTACION:=ROUND("Item Amount"."Amount 2"/DIAS,0.01);
				  fnCrearCelda('Q' + Format(intFila),Format(ROTACION));
				  NOMPROVEEDOR:='';
				  if RecVe.Get(RecItem."Vendor No.") then begin
					   NOMPROVEEDOR:=RecVe.Name;
				  end;
				  fnCrearCelda('R' + Format(intFila),Format(NOMPROVEEDOR));
				  intFila:=intFila+1;
			end;
			
		}
		dataitem(Integer;Integer)
		{
			DataItemTableView = sorting(Number) where(Number=filter(1..));
			column(ReportForNavId_18; 18) {} // Autogenerated by ForNav - Do not delete
			trigger OnPreDataItem();
			begin
				Window.Close;
			end;
			
			trigger OnAfterGetRecord();
			begin
				if Number = 1 then begin
				  if not ItemAmount.Find('-') then
					CurrReport.Break;
				end else
				  if ItemAmount.Next = 0 then
					CurrReport.Break;
				Item.Get(ItemAmount."Item No.");
				/*
				IF ShowSorting = ShowSorting::Largest THEN BEGIN
				  ItemAmount.Amount := -ItemAmount.Amount;
				  ItemAmount."Amount 2" := -ItemAmount."Amount 2";
				END;
				IF (MaxAmount > 0) AND (ItemAmount.Amount > 0) THEN
				  BarText := PADSTR('',ROUND(ItemAmount.Amount / MaxAmount * 45,1),'*')
				ELSE
				  BarText := '';
				IF ShowSorting = ShowSorting::Largest THEN BEGIN
				  ItemAmount.Amount := -ItemAmount.Amount;
				  ItemAmount."Amount 2" := -ItemAmount."Amount 2";
				END;
				*/
				dato2:=ItemAmount.Amount;
				dato1:=ItemAmount."Amount 2";
				Acumu:=Acumu+ItemAmount.Amount*-1;
				if TAcumu<>0 then begin
					 Tanto:=(Acumu*100)/TAcumu;
				end;
				if Tanto<(TA+TB+TA) then begin
					 Clasi:=2;
				end;
				if (Tanto<TB+TA) then begin
					 Clasi:=1;
				end;
				if (Tanto<TA) then begin
					 Clasi:=0;
				end;
				if Tipo=1 then begin
					 Item."Clasificación A,B,C":=Clasi;
					 Item."Fecha asignada clasificación":=Today;
					 Item.Modify;
				end;
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(Tipo;Tipo)
					{
						ApplicationArea = Basic;
						Caption = 'Tipo acción';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			NoOfRecordsToPrint := 99999999;
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if ItemAmount.FindFirst then repeat
			 ItemAmount.Delete;
		until ItemAmount.Next =0;
		ItemFilter := Item.GetFilters;
		ItemDateFilter := Item.GetFilter("Date Filter");
		Sequence := Lowercase(Format(SelectStr(ShowSorting + 1,Text004)));
		Heading := Format(SelectStr(ShowType + 1,Text005));
		RecCE.Get;
		TA:=RecCE."% Venta Clasificación A";
		TB:=RecCE."% Venta Clasificación B";
		TC:=RecCE."% Venta Clasificación C";
		if Tipo = 1 then begin
			 if RecItem.FindFirst then repeat
				  RecItem."Clasificación A,B,C":=2;
				  RecItem.Modify;
			 until RecItem.Next = 0;
		end;
		RecCVP.Get;
		fnCrearAut;
		intFila := 1;
		  fnCrearHoja('ABC PRODUCTOS',90);
		  fnCrearCelda('A' + Format(intFila),'Posición');
		  fnCrearCelda('B' + Format(intFila),'Producto');
		  fnCrearCelda('C' + Format(intFila),'Descripcion');
		  fnCrearCelda('D' + Format(intFila),'Cantidad');
		  fnCrearCelda('E' + Format(intFila),'% sobre total');
		  fnCrearCelda('F' + Format(intFila),'Importe');
		  fnCrearCelda('G' + Format(intFila),'% sobre total');
		  fnCrearCelda('H' + Format(intFila),'Acumulado');
		  fnCrearCelda('I' + Format(intFila),'% total');
		  fnCrearCelda('J' + Format(intFila),'Clasificación');
		  fnCrearCelda('K' + Format(intFila),'Coste');
		  fnCrearCelda('L' + Format(intFila),'Venta media');
		  fnCrearCelda('M' + Format(intFila),'Bnfo. unit.');
		  fnCrearCelda('N' + Format(intFila),'Total Beneficio');
		  fnCrearCelda('O' + Format(intFila),RecCVP."Tarifa vigente anterior");
		  fnCrearCelda('P' + Format(intFila),RecCVP."Tarifa vigente");
		  fnCrearCelda('Q' + Format(intFila),'Rotación');
		  fnCrearCelda('R' + Format(intFila),'Proveedor');
		  intFila := intFila + 1;
		DESDEFECHA:=Item.GetRangeMin(Item."Date Filter");
		HASTAFECHA:=Item.GetRangemax(Item."Date Filter");
		DIAS:=HASTAFECHA-DESDEFECHA+1;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Sorting items	#1##########';
		Text001: label 'Period: %1';
		Text002: label 'Ranked according to %1 %2';
		Text003: label 'Portion of %1';
		Window: Dialog;
		ItemAmount: Record "Item Amount";
		ItemAmount2: Record "Item Amount";
		ItemFilter: Text[250];
		ItemDateFilter: Text[30];
		Sequence: Text[30];
		Heading: Text[30];
		ShowSorting: Option Largest,Smallest;
		ShowType: Option "Sales (LCY)";
		NoOfRecordsToPrint: Integer;
		PrintAlsoIfZero: Boolean;
		ItemSales: Decimal;
		QtyOnHand: Decimal;
		SalesAmountPct: Decimal;
		QtyOnHandPct: Decimal;
		MaxAmount: Decimal;
		BarText: Text[50];
		i: Integer;
		Text004: label 'Largest,Smallest';
		Text005: label 'Sales (LCY),Inventory';
		Acumu: Decimal;
		TAcumu: Decimal;
		Tanto: Decimal;
		Clasi: Option A,B,C;
		RecCE: Record "Sales & Receivables Setup";
		TA: Decimal;
		TB: Decimal;
		TC: Decimal;
		Tipo: Option Propuesta,"Guardar datos";
		Rec1: Record "Sales Price";
		pvp: Decimal;
		dato1: Decimal;
		dato2: Decimal;
		CONTA: Integer;
		RecItem: Record Item;
		Tcanti: Decimal;
		tantoa: Decimal;
		tantob: Decimal;
		autXLApp: Automation ;
		autXLLibros: Automation ;
		autXLLibro: Automation ;
		autXLHojas: Automation ;
		autXLHoja: Automation ;
		autXLGraficos: Automation ;
		autXLGrafico: Automation ;
		autXLChart: Automation ;
		autXLRango: Automation ;
		autXLSeries: Automation ;
		autXLEjes: Automation ;
		autXLEjes1: Automation ;
		autXLSerieColeccion: Automation ;
		autXLSerie: Integer;
		intFila: Integer;
		PVMEDIO: Decimal;
		RecSP: Record "Sales Price";
		ROTACION: Decimal;
		DESDEFECHA: Date;
		HASTAFECHA: Date;
		DIAS: Integer;
		NOMPROVEEDOR: Text[70];
		RecVe: Record Vendor;
		RecCVP: Record "Sales & Receivables Setup";

	local procedure Pct(Numeral1: Decimal;Numeral2: Decimal): Decimal
	begin
		if Numeral2 = 0 then
		  exit(0);
		exit(ROUND(Numeral1 / Numeral2 * 100,0.1));
	end;

	procedure fnCrearAut()
	begin
		Create(autXLApp);
		autXLApp.WindowState := -4143;
		autXLLibros := autXLApp.Workbooks;
		autXLLibro  := autXLLibros.Add;
		autXLHojas  := autXLLibro.Worksheets;
		autXLApp.Visible := true;
	end;

	procedure fnElimnarAut()
	begin
		//autXLApp.Columns.EntireColumn.AutoFit;
		autXLApp.Visible := true;
		Clear(autXLChart);
		Clear(autXLHoja);
		Clear(autXLHojas);
		Clear(autXLLibro);
		Clear(autXLLibros);
		Clear(autXLApp);
	end;

	procedure fnCrearHoja(txtNombreHoja: Text[100];intZoom: Integer)
	begin
		autXLHojas.Add;
		autXLHoja := autXLLibro.ActiveSheet;
		autXLHoja.Name := txtNombreHoja;
		autXLApp.ActiveWindow.Zoom := intZoom;
	end;

	procedure fnCrearCelda(txtCelda: Text[30];txtValor: Text[100])
	begin
		autXLHoja.Range(txtCelda).Value := txtValor;
	end;

	procedure fnFormatoCelda(txtCelda: Text[100];txtFormato: Text[100])
	begin
		autXLHoja.Range(txtCelda).NumberFormat := txtFormato;
	end;

	procedure fnAliniacionCelda(txtCelda: Text[100];intHorAli: Integer)
	begin
		autXLHoja.Range(txtCelda).HorizontalAlignment := intHorAli;
	end;

	procedure fnColorCelda(pnRango: Text[100];pnColorInterior: Integer;pnColorFuente: Integer;pnNegrita: Boolean)
	begin
		autXLHoja.Range(pnRango).Interior.ColorIndex := pnColorInterior;
		autXLHoja.Range(pnRango).Font.ColorIndex := pnColorFuente;
		autXLHoja.Range(pnRango).Font.Bold := pnNegrita;
	end;

	procedure fnBordes(pnRango: Text[100];pnBorde: Integer;pnLinea: Integer;pnAncho: Integer;pnColor: Integer)
	begin
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).LineStyle := pnLinea;
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).Weight	:= pnAncho;
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).Color	 := pnColor;
	end;

	procedure fnGraficoCrear(pnTop: Integer;pnPosicion: Integer;pnAncho: Integer;pnAlto: Integer;"pnTamaño": Integer)
	begin
		autXLGraficos := autXLHoja.ChartObjects;
		autXLGrafico := autXLGraficos.Add(pnTop,pnPosicion,pnAlto,pnAncho);
		autXLChart   := autXLGrafico.Chart;
		//autXLChart.ChartArea.Width := pnTamaño;
	end;

	procedure fnGraficoParam(pnRango: Text[30];pnTipo: Integer;pnLeyLeft: Integer;pnLeyTop: Integer)
	begin
		autXLRango := autXLHoja.Range(pnRango);
		autXLChart.SetSourceData(autXLRango,'xlColumns');
		autXLChart.ChartType(pnTipo);
		autXLChart.PlotArea.Interior.ColorIndex := -4142;
		autXLChart.Legend.Left := pnLeyLeft;
		autXLChart.Legend.Top  := pnLeyTop;
		//autXLChart.ChartArea.Width := 692;
		//autXLChart.Legend.Font.Size := 10;
	end;

	procedure fnGraficoSeries(pnSerie: Integer;pnColor: Integer;pnTipoGrafico: Integer;pnMarca: Integer;pnPrimerPlano: Integer;pnSegundoPlano: Integer)
	begin
		autXLSerieColeccion := autXLChart.SeriesCollection;
		autXLSerieColeccion.Item(pnSerie).Interior.ColorIndex := pnColor;
		autXLSerieColeccion.Item(pnSerie).ChartType   := pnTipoGrafico;
		if pnTipoGrafico = 65 then begin
		 autXLSerieColeccion.Item(pnSerie).Border.ColorIndex := pnColor;
		 autXLSerieColeccion.Item(pnSerie).MarkerBackgroundColorIndex := pnPrimerPlano;
		 autXLSerieColeccion.Item(pnSerie).MarkerForegroundColorIndex := pnSegundoPlano;
		 autXLSerieColeccion.Item(pnSerie).MarkerStyle := pnMarca;
		 autXLSerieColeccion.Item(pnSerie).Border.Weight := 4;
		end;
	end;

	procedure fnGraficoEjes(pnMenor: Integer;pnMayor: Integer)
	begin
		autXLEjes		   := autXLChart.Axes(2);
		autXLEjes.MinorUnit := pnMenor;
		autXLEjes.MajorUnit := pnMayor;
		autXLEjes.DisplayUnit := -6;
		/*
		autXLEjes1	 := autXLChart.Axes(1);
		autXLEjes1.TickLabels.Orientation := 90;
		//autXLEjes1.TickLabels.Font.Size   := 10;
		*/
		Clear(autXLEjes);
		/*
		CLEAR(autXLEjes1);
		*/

	end;

	procedure fnOrientacionEjes(pnOrientacion: Integer)
	begin
		autXLChart.PlotBy := pnOrientacion;
	end;

	procedure fnFormatoEjes(pnEje: Integer)
	begin
		//autXLEjes := autXLChart.Axes(pnEje);
		//autXLEjes.TickLabels.Font.Name := 'Verdana';
		//autXLEjes.TickLabels.Font.Size := 25;
	end;

	procedure fnGrabarHoja(Carpeta: Text[250])
	begin
		if Exists(Carpeta) then
		  exit;
		autXLLibro.__SaveAs(Carpeta);
	end;

	local procedure OnPreSectionInteger_Header6(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput(ReportForNav.PageNo = 1);
		end;
	end;
	local procedure OnPreSectionInteger_Header7(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput((ReportForNav.PageNo = 1) and PrintAlsoIfZero);
		end;
	end;
	local procedure OnPreSectionInteger_Header8(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput((ReportForNav.PageNo = 1) and (ItemFilter <> ''));
		end;
	end;
	local procedure OnPreSectionInteger_Header9(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput(ReportForNav.PageNo = 1);
		end;
	end;
	local procedure OnPreSectionInteger_Footer12(var Integer : Record Integer);
	begin
		with Integer do begin
		  SalesAmountPct := Pct(Item."Sales (LCY)",ItemSales);
		  QtyOnHandPct := Pct(Item.Inventory,QtyOnHand);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50001_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50001;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
