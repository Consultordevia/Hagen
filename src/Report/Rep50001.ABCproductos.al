Report 50001 "_A,B,C productos"
{
    Caption = 'ABC productos';
    RDLCLayout = './Layouts/_A,B,Cproductos.rdlc';
    DefaultLayout = RDLC;

    ApplicationArea = All;
    UsageCategory = Lists;


    dataset
    {
        dataitem(Item; Item)
        {
            CalcFields = "Cantidad facturada", "Cantidad abonada", "Importe facturado", "Importe abonado", "Cantidad fabricada";
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Gen. Prod. Posting Group", "Date Filter", "Vendor No.";
            trigger OnPreDataItem();
            begin

                i := 0;
            end;

            trigger OnAfterGetRecord();
            begin
                if (Item."Cantidad fabricada" = 0) and
                   (Item."Cantidad facturada" = 0) and
                   (Item."Cantidad abonada" = 0) and
                   (Item."Importe facturado" = 0) and
                   (Item."Importe abonado" = 0) then
                    CurrReport.Skip;
                pvp := 0;
                Rec1.Reset;
                Rec1.SetRange(Rec1."Item No.", Item."No.");
                if Rec1.FindFirst then begin
                    pvp := Rec1."Unit Price";
                end;
                ItemAmount.Init;
                ItemAmount."Item No." := "No.";
                ItemAmount.Amount := (Item."Importe facturado" + Item."Importe abonado");
                ItemAmount."Amount 2" := (Item."Cantidad facturada" + Item."Cantidad abonada");
                ItemAmount.Insert;
                TAcumu := TAcumu + ItemAmount.Amount;
                Tcanti := Tcanti + ItemAmount."Amount 2";
            end;

        }
        dataitem("Item Amount"; "Item Amount")
        {
            DataItemTableView = sorting(Amount, "Amount 2", "Item No.") order(descending);
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(TODAY_0_4; Format(Today, 0, 4))
            {
            }
            column(USERID; UserId)
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(STRSUBSTNO_Text001_ItemDateFilter; StrSubstNo(Text001, ItemDateFilter))
            {
            }


            column(CONTA; CONTA) { }
            column(No; RecItem."No.") { }
            column(Description; RecItem.Description) { }
            column(Amount2; "Item Amount"."Amount 2") { }
            column(tantoa; tantoa) { }
            column(Amount; "Item Amount".Amount) { }
            column(tantob; tantob) { }
            column(Acumu; Acumu) { }
            column(Tanto; Tanto) { }
            column(Clasi; Clasi) { }
            column(UnitCost; RecItem."Unit Cost") { }
            column(PVMEDIO; PVMEDIO) { }
            column(PVMEDIOUnitCost; PVMEDIO - RecItem."Unit Cost") { }
            column(PVMEDIOUnitCostAmount2; (PVMEDIO - RecItem."Unit Cost") * "Item Amount"."Amount 2") { }
            column(preciotar1; preciotar1) { }
            column(preciotar2; preciotar2) { }
            column(ROTACION; ROTACION) { }
            column(NOMPROVEEDOR; NOMPROVEEDOR) { }
            column(Tarifavigenteanterior; RecCVP."Tarifa vigente anterior") { }
            column(Tarifavigente; RecCVP."Tarifa vigente") { }
            column(imprime; imprime) { }


            trigger OnAfterGetRecord();
            begin

                RecCVP.Get;
                RecItem.Get("Item Amount"."Item No.");
                CONTA := CONTA + 1;
                Acumu := Acumu + "Item Amount".Amount;
                if TAcumu <> 0 then begin
                    Tanto := (Acumu * 100) / TAcumu;
                end;
                if Tcanti <> 0 then begin
                    tantoa := ("Item Amount"."Amount 2" * 100) / Tcanti;
                end;
                if TAcumu <> 0 then begin
                    tantob := ("Item Amount".Amount * 100) / TAcumu;
                end;
                if Tanto < (TA + TB + TA) then begin
                    Clasi := 2;
                end;
                if (Tanto < TB + TA) then begin
                    Clasi := 1;
                end;
                if (Tanto < TA) then begin
                    Clasi := 0;
                end;
                if Tipo = 1 then begin
                    RecItem."Clasificación A,B,C" := Clasi;
                    RecItem."Fecha asignada clasificación" := Today;
                    RecItem.Modify;
                end;
                /*
                fnCrearCelda('A' + Format(intFila), Format(CONTA));
                fnCrearCelda('B' + Format(intFila), Format(RecItem."No."));
                fnCrearCelda('C' + Format(intFila), Format(RecItem.Description));
                fnCrearCelda('D' + Format(intFila), Format("Item Amount"."Amount 2"));
                fnCrearCelda('E' + Format(intFila), Format(ROUND(tantoa, 0.01)));
                fnCrearCelda('F' + Format(intFila), Format("Item Amount".Amount));
                fnCrearCelda('G' + Format(intFila), Format(ROUND(tantob, 0.01)));
                fnCrearCelda('H' + Format(intFila), Format(Acumu));
                fnCrearCelda('I' + Format(intFila), Format(ROUND(Tanto, 0.01)));
                fnCrearCelda('J' + Format(intFila), Format(Clasi));
                fnCrearCelda('K' + Format(intFila), Format(ROUND(RecItem."Unit Cost", 0.01)));
				*/
                PVMEDIO := 0;
                if "Item Amount"."Amount 2" <> 0 then begin
                    PVMEDIO := ROUND("Item Amount".Amount / "Item Amount"."Amount 2", 0.01);
                end;
                /*fnCrearCelda('L' + Format(intFila), Format(PVMEDIO));
                fnCrearCelda('M' + Format(intFila), Format(PVMEDIO - RecItem."Unit Cost"));
                fnCrearCelda('N' + Format(intFila), Format((PVMEDIO - RecItem."Unit Cost") * "Item Amount"."Amount 2"));
				*/
                preciotar1 := 0;
                RecSP.Reset;
                RecSP.SetRange(RecSP."Item No.", RecItem."No.");
                RecSP.SetRange(RecSP."Sales Type", 1);
                RecSP.SetRange(RecSP."Sales Code", RecCVP."Tarifa vigente anterior");
                if RecSP.FindFirst then begin
                    preciotar1 := RecSP."Unit Price";
                    /*fnCrearCelda('O' + Format(intFila), Format(RecSP."Unit Price"));*/
                end;
                preciotar2 := 0;
                RecSP.Reset;
                RecSP.SetRange(RecSP."Item No.", RecItem."No.");
                RecSP.SetRange(RecSP."Sales Type", 1);
                RecSP.SetRange(RecSP."Sales Code", RecCVP."Tarifa vigente");
                if RecSP.FindFirst then begin
                    /*fnCrearCelda('P' + Format(intFila), Format(RecSP."Unit Price"));*/
                    preciotar2 := RecSP."Unit Price";
                end;
                ROTACION := ROUND("Item Amount"."Amount 2" / DIAS, 0.01);
                /*fnCrearCelda('Q' + Format(intFila), Format(ROTACION));*/
                NOMPROVEEDOR := '';
                if RecVe.Get(RecItem."Vendor No.") then begin
                    NOMPROVEEDOR := RecVe.Name;
                end;
                /*fnCrearCelda('R' + Format(intFila), Format(NOMPROVEEDOR));*/
                intFila := intFila + 1;

                imprime := 0;
                if RecItem."No." <> '' then begin
                    imprime := 1;
                end;

            end;

        }
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
            column(ReportForNavId_18; 18) { } // Autogenerated by ForNav - Do not delete
            trigger OnPreDataItem();
            begin

            end;

            trigger OnAfterGetRecord();
            begin
                if Number = 1 then begin
                    if not ItemAmount.Find('-') then
                        CurrReport.Break;
                end else
                    if ItemAmount.Next = 0 then
                        CurrReport.Break;
                Item.Get(ItemAmount."Item No.");
                /*
				IF ShowSorting = ShowSorting::Largest THEN BEGIN
				  ItemAmount.Amount := -ItemAmount.Amount;
				  ItemAmount."Amount 2" := -ItemAmount."Amount 2";
				END;
				IF (MaxAmount > 0) AND (ItemAmount.Amount > 0) THEN
				  BarText := PADSTR('',ROUND(ItemAmount.Amount / MaxAmount * 45,1),'*')
				ELSE
				  BarText := '';
				IF ShowSorting = ShowSorting::Largest THEN BEGIN
				  ItemAmount.Amount := -ItemAmount.Amount;
				  ItemAmount."Amount 2" := -ItemAmount."Amount 2";
				END;
				*/
                dato2 := ItemAmount.Amount;
                dato1 := ItemAmount."Amount 2";
                Acumu := Acumu + ItemAmount.Amount * -1;
                if TAcumu <> 0 then begin
                    Tanto := (Acumu * 100) / TAcumu;
                end;
                if Tanto < (TA + TB + TA) then begin
                    Clasi := 2;
                end;
                if (Tanto < TB + TA) then begin
                    Clasi := 1;
                end;
                if (Tanto < TA) then begin
                    Clasi := 0;
                end;
                if Tipo = 1 then begin
                    Item."Clasificación A,B,C" := Clasi;
                    Item."Fecha asignada clasificación" := Today;
                    Item.Modify;
                end;

            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(Tipo; Tipo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Tipo acción';
                    }
                }
            }
        }
    }




    trigger OnPreReport()
    begin
        NoOfRecordsToPrint := 99999999;
        if ItemAmount.FindFirst then
            repeat
                ItemAmount.Delete;
            until ItemAmount.Next = 0;
        ItemFilter := Item.GetFilters;
        ItemDateFilter := Item.GetFilter("Date Filter");
        Sequence := Lowercase(Format(SelectStr(ShowSorting + 1, Text004)));
        Heading := Format(SelectStr(ShowType + 1, Text005));
        RecCE.Get;
        TA := RecCE."% Venta Clasificación A";
        TB := RecCE."% Venta Clasificación B";
        TC := RecCE."% Venta Clasificación C";
        if Tipo = 1 then begin
            if RecItem.FindFirst then
                repeat
                    RecItem."Clasificación A,B,C" := 2;
                    RecItem.Modify;
                until RecItem.Next = 0;
        end;
        RecCVP.Get;
        intFila := 1;
        /*
        fnCrearHoja('ABC PRODUCTOS', 90);
        fnCrearCelda('A' + Format(intFila), 'Posición');
        fnCrearCelda('B' + Format(intFila), 'Producto');
        fnCrearCelda('C' + Format(intFila), 'Descripcion');
        fnCrearCelda('D' + Format(intFila), 'Cantidad');
        fnCrearCelda('E' + Format(intFila), '% sobre total');
        fnCrearCelda('F' + Format(intFila), 'Importe');
        fnCrearCelda('G' + Format(intFila), '% sobre total');
        fnCrearCelda('H' + Format(intFila), 'Acumulado');
        fnCrearCelda('I' + Format(intFila), '% total');
        fnCrearCelda('J' + Format(intFila), 'Clasificación');
        fnCrearCelda('K' + Format(intFila), 'Coste');
        fnCrearCelda('L' + Format(intFila), 'Venta media');
        fnCrearCelda('M' + Format(intFila), 'Bnfo. unit.');
        fnCrearCelda('N' + Format(intFila), 'Total Beneficio');
        fnCrearCelda('O' + Format(intFila), RecCVP."Tarifa vigente anterior");
        fnCrearCelda('P' + Format(intFila), RecCVP."Tarifa vigente");
        fnCrearCelda('Q' + Format(intFila), 'Rotación');
        fnCrearCelda('R' + Format(intFila), 'Proveedor');
		*/
        intFila := intFila + 1;
        DESDEFECHA := Item.GetRangeMin(Item."Date Filter");
        HASTAFECHA := Item.GetRangemax(Item."Date Filter");
        DIAS := HASTAFECHA - DESDEFECHA + 1;


    end;

    var
        Text000: label 'Sorting items	#1##########';
        Text001: label 'Period: %1';
        Text002: label 'Ranked according to %1 %2';
        Text003: label 'Portion of %1';
        Window: Dialog;
        ItemAmount: Record "Item Amount";
        ItemAmount2: Record "Item Amount";
        ItemFilter: Text[250];
        ItemDateFilter: Text[30];
        Sequence: Text[30];
        Heading: Text[30];
        ShowSorting: Option Largest,Smallest;
        ShowType: Option "Sales (LCY)";
        NoOfRecordsToPrint: Integer;
        PrintAlsoIfZero: Boolean;
        ItemSales: Decimal;
        QtyOnHand: Decimal;
        SalesAmountPct: Decimal;
        QtyOnHandPct: Decimal;
        MaxAmount: Decimal;
        BarText: Text[50];
        i: Integer;
        Text004: label 'Largest,Smallest';
        Text005: label 'Sales (LCY),Inventory';
        Acumu: Decimal;
        TAcumu: Decimal;
        Tanto: Decimal;
        Clasi: Option A,B,C;
        RecCE: Record "Sales & Receivables Setup";
        TA: Decimal;
        TB: Decimal;
        TC: Decimal;
        Tipo: Option Propuesta,"Guardar datos";
        Rec1: Record "Sales Price";
        pvp: Decimal;
        dato1: Decimal;
        dato2: Decimal;
        CONTA: Integer;
        RecItem: Record Item;
        Tcanti: Decimal;
        tantoa: Decimal;
        tantob: Decimal;
        autXLSerie: Integer;
        intFila: Integer;
        PVMEDIO: Decimal;
        RecSP: Record "Sales Price";
        ROTACION: Decimal;
        DESDEFECHA: Date;
        HASTAFECHA: Date;
        DIAS: Integer;
        NOMPROVEEDOR: Text[70];
        RecVe: Record Vendor;
        RecCVP: Record "Sales & Receivables Setup";
        codtar1: code[20];
        codtar2: code[20];

        preciotar1: Decimal;
        preciotar2: Decimal;

        imprime: Integer;





    local procedure Pct(Numeral1: Decimal; Numeral2: Decimal): Decimal
    begin
        if Numeral2 = 0 then
            exit(0);
        exit(ROUND(Numeral1 / Numeral2 * 100, 0.1));
    end;





}
