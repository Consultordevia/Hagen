#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50004_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50004){}   
		type("System.IO.Path"; System_IO_Path50004) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50004 "Pedidos Oferta"
{
	Caption = 'Pedidos Oferta';
	RDLCLayout = './Layouts/PedidosOferta.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Purchase Header";"Purchase Header")
		{
			DataItemTableView = sorting("Document Type","No.") where("Document Type"=const(Quote));
			RequestFilterFields = "No.","Buy-from Vendor No.","No. Printed";
			RequestFilterHeading = 'Purchase Quote';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number=const(1));
					column(ReportForNavId_3; 3) {} // Autogenerated by ForNav - Do not delete
					column(totalvol; totalvol)
					{
						DecimalPlaces = 4:4;
					}
					column(totalkilos; totalkilos)
					{
					}
					column(CompanyAddr6; CompanyAddr[6])
					{
					}
					column(CompanyAddr5; CompanyAddr[5])
					{
					}
					column(PurchaseHeaderYourReference; "Purchase Header"."Your Reference")
					{
					}
					column(ReferenceText; ReferenceText)
					{
					}
					column(PurchaseHeaderNo; "Purchase Header"."No.")
					{
					}
					column(SalesPurchPersonName; SalesPurchPerson.Name)
					{
					}
					column(PurchaserText; PurchaserText)
					{
					}
					column(PurchaseHeaderRequestedReceiptDate; "Purchase Header"."Requested Receipt Date")
					{
					}
					column(PurchaseHeaderDocumentDate_0_4; Format("Purchase Header"."Document Date",0,4))
					{
					}
					column(CompanyInfoFaxNo; CompanyInfo."Fax No.")
					{
					}
					column(VendAddr6; VendAddr[6])
					{
					}
					column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
					{
					}
					column(VendAddr5; VendAddr[5])
					{
					}
					column(CompanyAddr4; CompanyAddr[4])
					{
					}
					column(VendAddr4; VendAddr[4])
					{
					}
					column(CompanyAddr3; CompanyAddr[3])
					{
					}
					column(VendAddr3; VendAddr[3])
					{
					}
					column(CompanyAddr2; CompanyAddr[2])
					{
					}
					column(VendAddr2; VendAddr[2])
					{
					}
					column(CompanyAddr1; CompanyAddr[1])
					{
					}
					column(VendAddr1; VendAddr[1])
					{
					}
					column(STRSUBSTNO_Text003_FORMAT_ReportForNavPageNo_; StrSubstNo(Text003,Format(ReportForNav.PageNo)))
					{
					}
					column(STRSUBSTNO_Text002_CopyText; StrSubstNo(Text002,CopyText))
					{
					}
					dataitem(DimensionLoop1;Integer)
					{
						DataItemLinkReference = PurchaseHeader;
						DataItemTableView = sorting(Number) where(Number=filter(1..));
						column(ReportForNavId_29; 29) {} // Autogenerated by ForNav - Do not delete
						column(DimText; DimText)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowInternalInfo then
							  CurrReport.Break;
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then begin
							  if not DocDim1.Find('-') then
								CurrReport.Break;
							end else
							  if not Continue then
								CurrReport.Break;
							Clear(DimText);
							Continue := false;
							repeat
							  OldDimText := DimText;
							  if DimText = '' then
								DimText := StrSubstNo(
								  '%1 - %2',DocDim1."Dimension Code",DocDim1."Dimension Value Code")
							  else
								DimText :=
								  StrSubstNo(
									'%1; %2 - %3',DimText,
									DocDim1."Dimension Code",DocDim1."Dimension Value Code");
							  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
								DimText := OldDimText;
								Continue := true;
								exit;
							  end;
							until (DocDim1.Next = 0);
						end;
						
					}
					dataitem("Purchase Line";"Purchase Line")
					{
						DataItemLink = "Document Type"=field("Document Type"),"Document No."=field("No.");
						DataItemLinkReference = PurchaseHeader;
						DataItemTableView = sorting("Document Type","Document No.","Line No.");
						column(ReportForNavId_31; 31) {} // Autogenerated by ForNav - Do not delete
						trigger OnPreDataItem();
						begin
							CurrReport.Break;
						end;
						
					}
					dataitem(RoundLoop;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_32; 32) {} // Autogenerated by ForNav - Do not delete
						column(PurchaseLineDescription; "Purchase Line".Description)
						{
						}
						column(PurchaseLineQuantity; "Purchase Line".Quantity)
						{
							DecimalPlaces = 2:2;
						}
						column(PurchaseLineQuantity_Base_; "Purchase Line"."Quantity (Base)")
						{
							DecimalPlaces = 2:2;
						}
						column(PurchaseLineUnitofMeasure; "Purchase Line"."Unit of Measure")
						{
							DecimalPlaces = 2:2;
						}
						column(PurchaseLineNo; "Purchase Line"."No.")
						{
						}
						dataitem(DimensionLoop2;Integer)
						{
							DataItemTableView = sorting(Number) where(Number=filter(1..));
							column(ReportForNavId_38; 38) {} // Autogenerated by ForNav - Do not delete
							column(DimText3; DimText)
							{
							}
							trigger OnPreDataItem();
							begin
								if not ShowInternalInfo then
								  CurrReport.Break;
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then begin
								  if not DocDim2.Find('-') then
									CurrReport.Break;
								end else
								  if not Continue then
									CurrReport.Break;
								Clear(DimText);
								Continue := false;
								repeat
								  OldDimText := DimText;
								  if DimText = '' then
									DimText := StrSubstNo(
									  '%1 - %2',DocDim2."Dimension Code",DocDim2."Dimension Value Code")
								  else
									DimText :=
									  StrSubstNo(
										'%1; %2 - %3',DimText,
										DocDim2."Dimension Code",DocDim2."Dimension Value Code");
								  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
									DimText := OldDimText;
									Continue := true;
									exit;
								  end;
								until (DocDim2.Next = 0);
							end;
							
						}
						trigger OnPreDataItem();
						begin
							MoreLines := PurchLine.Find('+');
							while MoreLines and (PurchLine.Description = '') and (PurchLine."Description 2"= '') and
								  (PurchLine."No." = '') and (PurchLine.Quantity = 0) and
								  (PurchLine.Amount = 0)
							do
							  MoreLines := PurchLine.Next(-1) <> 0;
							if not MoreLines then
							  CurrReport.Break;
							PurchLine.SetRange("Line No.",0,PurchLine."Line No.");
							SetRange(Number,1,PurchLine.Count);
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then
							  PurchLine.Find('-')
							else
							  PurchLine.Next;
							"Purchase Line" := PurchLine;
							DocDim2.SetRange("Dimension Set ID", "Purchase Line"."Dimension Set ID");
							TotalCantidad:=TotalCantidad+"Purchase Line"."Quantity (Base)";
						end;
						
						trigger OnPostDataItem();
						begin
							PurchLine.DeleteAll;
						end;
						
					}
					dataitem(Total;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_40; 40) {} // Autogenerated by ForNav - Do not delete
						column(TotalCantidad; TotalCantidad)
						{
						}
						column(ShipmentMethodDescription; ShipmentMethod.Description)
						{
						}
					}
					dataitem(Total2;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_43; 43) {} // Autogenerated by ForNav - Do not delete
						trigger OnPreDataItem();
						begin
							if "Purchase Header"."Buy-from Vendor No." = "Purchase Header"."Pay-to Vendor No." then
							  CurrReport.Break;
						end;
						
					}
					dataitem(Total3;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_44; 44) {} // Autogenerated by ForNav - Do not delete
						column(ShipToAddr8; ShipToAddr[8])
						{
						}
						column(ShipToAddr7; ShipToAddr[7])
						{
						}
						column(ShipToAddr6; ShipToAddr[6])
						{
						}
						column(ShipToAddr5; ShipToAddr[5])
						{
						}
						column(ShipToAddr4; ShipToAddr[4])
						{
						}
						column(ShipToAddr3; ShipToAddr[3])
						{
						}
						column(ShipToAddr2; ShipToAddr[2])
						{
						}
						column(ShipToAddr1; ShipToAddr[1])
						{
						}
						trigger OnPreDataItem();
						begin
							if ("Purchase Header"."Sell-to Customer No." = '') and (ShipToAddr[1] = '') then
							  CurrReport.Break;
						end;
						
					}
				}
				trigger OnPreDataItem();
				begin
					NoOfLoops := Abs(NoOfCopies) + 1;
					CopyText := '';
					SetRange(Number,1,NoOfLoops);
				end;
				
				trigger OnAfterGetRecord();
				begin
					Clear(PurchLine);
					Clear(PurchPost);
					PurchLine.DeleteAll;
					PurchPost.GetPurchLines("Purchase Header",PurchLine,0);
					if Number > 1 then
					  CopyText := Text001;
					
				end;
				
				trigger OnPostDataItem();
				begin
					if not CurrReport.Preview then
					  PurchCountPrinted.Run("Purchase Header");
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				CurrReport.Language := Language.GetLanguageID("Language Code");
				CompanyInfo.Get;
				if RespCenter.Get("Responsibility Center") then begin
				  FormatAddr.RespCenter(CompanyAddr,RespCenter);
				  CompanyInfo."Phone No." := RespCenter."Phone No.";
				  CompanyInfo."Fax No." := RespCenter."Fax No.";
				end else
				  FormatAddr.Company(CompanyAddr,CompanyInfo);
				DocDim1.SetRange("Dimension Set ID", "Purchase Header"."Dimension Set ID");
				if "Purchaser Code" = '' then begin
				  SalesPurchPerson.Init;
				  PurchaserText := '';
				end else begin
				  SalesPurchPerson.Get("Purchaser Code");
				  PurchaserText := Text000
				end;
				if "Your Reference" = '' then
				  ReferenceText := ''
				else
				  ReferenceText := FieldCaption("Your Reference");
				if "VAT Registration No." = '' then
				  VATNoText := ''
				else
				  VATNoText := FieldCaption("VAT Registration No.");
				FormatAddr.PurchHeaderPayTo(VendAddr,"Purchase Header");
				ReferenceText := 'Numero de Orden de Hagen: ';
				if "Shipment Method Code" = '' then
				  ShipmentMethod.Init
				else begin
				  ShipmentMethod.Get("Shipment Method Code");
				  ShipmentMethod.TranslateDescription(ShipmentMethod,"Language Code");
				end;
				FormatAddr.PurchHeaderShipTo(ShipToAddr,"Purchase Header");
				if not CurrReport.Preview then begin
				  if ArchiveDocument then
					ArchiveManagement.StorePurchDocument("Purchase Header",LogInteraction);
				  if LogInteraction then begin
					CalcFields("No. of Archived Versions");
					SegManagement.LogDocument(
					  11,"No.","Doc. No. Occurrence","No. of Archived Versions",Database::Vendor,"Pay-to Vendor No.",
					  "Purchaser Code",'',"Posting Description",'');
				  end;
				end;
				totalvol:=0;
				totalkilos:=0;
				Rec39.Reset;
				Rec39.SetRange(Rec39."Document Type","Purchase Header"."Document Type");
				Rec39.SetRange(Rec39."Document No.","Purchase Header"."No.");
				if Rec39.FindFirst then repeat
					 totalkilos:=totalkilos+Rec39.Quantity*Rec39."Gross Weight";
					 totalvol:=totalvol+Rec39.Quantity*Rec39."Unit Volume";
				until Rec39.Next=0;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies;NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowInternalInfo;ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
					field(ArchiveDocument;ArchiveDocument)
					{
						ApplicationArea = Basic;
						Caption = 'Archive Document';

						trigger OnValidate()
						begin
							if not ArchiveDocument then
							  LogInteraction := false;
						end;
					}
					field(LogInteraction;LogInteraction)
					{
						ApplicationArea = Basic;
						Caption = 'Log Interaction';

						trigger OnValidate()
						begin
							if LogInteraction then
							  ; // TODO RequestArchiveDocument := RequestOptionsPage.ArchiveDocument.ENABLED;
						end;
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			ArchiveDocument := ArchiveManagement.PurchaseDocArchiveGranule;
			LogInteraction := SegManagement.FindInteractTmplCode(11) <> '';
			; // TODO RequestRequestOptionsPage.ArchiveDocument.ENABLED(ArchiveDocument);
			; // TODO RequestRequestOptionsPage.LogInteraction.ENABLED(LogInteraction);
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Purchaser';
		Text001: label 'COPY';
		Text002: label 'Purchase - Quote %1';
		Text003: label 'Page %1';
		Item: Record Item;
		FA: Record "Fixed Asset";
		ShipmentMethod: Record "Shipment Method";
		SalesPurchPerson: Record "Salesperson/Purchaser";
		CompanyInfo: Record "Company Information";
		PurchLine: Record "Purchase Line" temporary;
		DocDim1: Record "Dimension Set Entry";
		DocDim2: Record "Dimension Set Entry";
		RespCenter: Record "Responsibility Center";
		Language: Record Language;
		PurchCountPrinted: Codeunit "Purch.Header-Printed";
		PurchPost: Codeunit "Purch.-Post";
		SegManagement: Codeunit SegManagement;
		ArchiveManagement: Codeunit ArchiveManagement;
		VendAddr: array [8] of Text[50];
		ShipToAddr: array [8] of Text[50];
		CompanyAddr: array [8] of Text[50];
		PurchaserText: Text[30];
		VATNoText: Text[30];
		ReferenceText: Text[30];
		MoreLines: Boolean;
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		CopyText: Text[30];
		FormatAddr: Codeunit "Format Address";
		DimText: Text[120];
		OldDimText: Text[75];
		ShowInternalInfo: Boolean;
		Continue: Boolean;
		ArchiveDocument: Boolean;
		LogInteraction: Boolean;
		TotalCantidad: Decimal;
		totalkilos: Decimal;
		totalvol: Decimal;
		Rec39: Record "Purchase Line";

	local procedure OnPreSectionDimensionLoop1_Body2(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number = 1);
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body3(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number > 1);
		end;
	end;
	local procedure OnPreSectionRoundLoop_Body5(var RoundLoop : Record Integer);
	begin
		with RoundLoop do begin
		  ReportForNav.ShowOutput(PurchLine.Type = 0);
		end;
	end;
	local procedure OnPreSectionRoundLoop_Body6(var RoundLoop : Record Integer);
	begin
		with RoundLoop do begin
		  ReportForNav.ShowOutput(
			(PurchLine.Type = PurchLine.Type::"G/L Account") and
			(not ShowInternalInfo));
		end;
	end;
	local procedure OnPreSectionRoundLoop_Body7(var RoundLoop : Record Integer);
	begin
		with RoundLoop do begin
		  case PurchLine.Type of
			PurchLine.Type::Item:
			  Item.Get(PurchLine."No.");
			PurchLine.Type::"Fixed Asset":
			  FA.Get(PurchLine."No.");
		  end;
		  ReportForNav.ShowOutput(
			(PurchLine.Type = PurchLine.Type::Item) or
			(PurchLine.Type = PurchLine.Type::"Fixed Asset") or
			((PurchLine.Type = PurchLine.Type::"G/L Account") and ShowInternalInfo));
		end;
	end;
	local procedure OnPreSectionDimensionLoop2_Body8(var DimensionLoop2 : Record Integer);
	begin
		with DimensionLoop2 do begin
		  ReportForNav.ShowOutput(Number = 1);
		end;
	end;
	local procedure OnPreSectionDimensionLoop2_Body9(var DimensionLoop2 : Record Integer);
	begin
		with DimensionLoop2 do begin
		  ReportForNav.ShowOutput(Number > 1);
		end;
	end;
	local procedure OnPreSectionTotal3_Body13(var Total3 : Record Integer);
	begin
		with Total3 do begin
		  ReportForNav.ShowOutput := "Purchase Header"."Sell-to Customer No." <> '';
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50004_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50004;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
