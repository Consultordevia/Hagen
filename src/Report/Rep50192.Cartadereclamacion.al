#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50192_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50192){}   
		type("System.IO.Path"; System_IO_Path50192) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50192 "Carta de reclamacion"
{
	UseRequestPage = true;
	Permissions = TableData "Cust. Ledger Entry"=rim;
	RDLCLayout = './Layouts/Cartadereclamacion.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Customer;Customer)
		{
			CalcFields = "Balance (LCY)";
			DataItemTableView = sorting("No.");
			PrintOnlyIfDetail = true;
			RequestFilterFields = "No.","Fecha clasificación poliza",Horario,"VAT Registration No.","Customer Posting Group";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(Paginano_FORMAT_pag; 'Pagina nº '+Format(pag))
			{
			}
			column(No_Customer; Customer."No.")
			{
			}
			column(DirClie2; DirClie[2])
			{
			}
			column(DirClie7; DirClie[7])
			{
			}
			column(DirClie6; DirClie[6])
			{
			}
			column(DirClie5; DirClie[5])
			{
			}
			column(VATRegistrationNo_Clie; Clie."VAT Registration No.")
			{
			}
			column(DirClie4; DirClie[4])
			{
			}
			column(DirClie3; DirClie[3])
			{
			}
			column(DirClie1; DirClie[1])
			{
			}
			column(Silla__FORMAT_TODAY_0_4; 'Silla, '+Format(Today,0,4))
			{
			}
			column(NOMBREUSU; NOMBREUSU)
			{
			}
			column(Sitienecualquierdudaodiferenciacontableconnosotros_rogamosse; '		  Si tiene cualquier duda o diferencia contable con nosotros, rogamos se pongan en')
			{
			}
			column(contactoconnuestrodepartamentodecontabilidadosiloprefierecon; 'contacto con nuestro departamento de contabilidad o si lo prefiere con su vendedor habitual.')
			{
			}
			column(TOTAL_; 'TOTAL:')
			{
				AutoFormatType = 1;
			}
			column(total; total)
			{
				AutoFormatType = 1;
			}
			column(todavianolohaliquidado_nosremitaelimportependienteparasuregu; 'todavía no lo ha liquidado, nos remita el importe pendiente para su regularización.')
			{
			}
			column(Comoquieraquelafechaprevistadepagoyahavencido_leagradeceriam; '		 Como quiera que la fecha prevista de pago ya ha vencido, le agradeceríamos que si')
			{
			}
			column(infoempName; infoemp.Name)
			{
			}
			dataitem(Cust2;"Cust. Ledger Entry")
			{
				CalcFields = "Original Amt. (LCY)";
				DataItemLink = "Customer No."=field("No.");
				DataItemTableView = sorting("Customer No.","Posting Date","Currency Code") where(Open=const(true),"Document Type"=const(Invoice));
				RequestFilterFields = "Due Date";
				column(ReportForNavId_21; 21) {} // Autogenerated by ForNav - Do not delete
				column(Cust2DueDate; Cust2."Due Date")
				{
				}
				column(Cust2RemainingAmt_LCY_; Cust2."Remaining Amt. (LCY)")
				{
					AutoFormatType = 1;
				}
				column(Cust2DocumentNo; Cust2."Document No.")
				{
				}
				column(Cust2DocumentType; Cust2."Document Type")
				{
				}
				column(Cust2DocumentDate; Cust2."Document Date")
				{
				}
				column(total2; total)
				{
				}
				trigger OnAfterGetRecord();
				begin
					if Cust2."Due Date">Today then begin
						 CurrReport.Skip;
					end;
					total:=total+Cust2."Remaining Amt. (LCY)";
				end;
				
			}
			trigger OnPreDataItem();
			begin
				infoemp.Get;
				infoemp.CalcFields(infoemp.Picture);
			end;
			
			trigger OnAfterGetRecord();
			begin
				NOMBREUSU:='';
				if RecUser.Get(UserId) then begin
					 NOMBREUSU:=RecUser.Name;
				end;
				pag:=0;
				total := 0;
				if Customer."Balance (LCY)"<=0 then begin
					 CurrReport.Skip;
				end;
				for i := 1 to 8
				do DirClie[i]:='';
				Clie.Init;
					/*
				  DirecPago.RESET;
				  DirecPago.SETRANGE("Customer No.",Customer."No.");
				  IF DirecPago.FIND('-') THEN
					FormatDire.DirPagoCliente(DirClie,DirecPago)
				  ELSE
					IF Clie.GET(Customer."No.") THEN FormatDire.Cliente(DirClie,Clie);
					 */
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(Graba;Graba)
					{
						ApplicationArea = Basic;
						Caption = '¿ Graba reclamación ?';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		"Page": label 'página';
		LastFieldNo: Integer;
		FooterPrinted: Boolean;
		infoemp: Record "Company Information";
		confcar: Record "Cartera Setup";
		SDG: Record "Gen. Journal Batch";
		total: Decimal;
		LDG: Record "Gen. Journal Line";
		TxtFooter1: Text[200];
		TxtFooter2: Text[200];
		DirClie: array [8] of Text[50];
		Clie: Record Customer;
		Prove: Record Vendor;
		i: Integer;
		TxtDesc: Text[50];
		DirecPago: Record "Customer Pmt. Address";
		Rec3: Record "Cust. Ledger Entry";
		FECHAREG: Date;
		Graba: Boolean;
		pag: Decimal;
		NOMBREUSU: Text[30];
		RecUser: Record UnknownRecord2000000002;

	local procedure OnPreSectionCustomer_Header1(var Customer : Record Customer);
	begin
		with Customer do begin
		  FooterPrinted := false;
		  pag:=pag+1;
		end;
	end;
	local procedure OnPreSectionCust2_Body3(var Cust2 : Record "Cust. Ledger Entry");
	begin
		with Cust2 do begin
		  TxtDesc:=Cust2.Description;
		  ///IF "Cust. Ledger Entry"."Document Type"="Cust. Ledger Entry"."Document Type"::"Credit Memo" THEN
		  ///  TxtDesc:='Abono';
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50192_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50192;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
