#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50078_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50078){}   
		type("System.IO.Path"; System_IO_Path50078) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50078 "Factura de venta-otra ORDEN"
{
	Caption = 'Sales - Invoice';
	Permissions = TableData "Sales Shipment Buffer"=rimd;
	RDLCLayout = './Layouts/Facturadeventa-otraORDEN.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Invoice Header";"Sales Invoice Header")
		{
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.","Sell-to Customer No.","No. Printed";
			RequestFilterHeading = 'Posted Sales Invoice';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(SalesInvoiceHeaderShip_toName; "Sales Invoice Header"."Ship-to Name")
			{
			}
			column(ExternalDocumentNo; "Sales Invoice Header"."External Document No.")
			{
			}
			column(ImporExtra; ImporExtra)
			{
			}
			column(ImpVto2; ImpVto[2])
			{
			}
			column(ImpVto1; ImpVto[1])
			{
			}
			column(ImpVto3; ImpVto[3])
			{
			}
			column(FechaVto2; FechaVto[2])
			{
			}
			column(FechaVto3; FechaVto[3])
			{
			}
			column(FechaVto1; FechaVto[1])
			{
			}
			column(cuenta; cuenta)
			{
			}
			column(PaymentTermsDescription; PaymentTerms.Description)
			{
			}
			column(TotalFACTURA; 'Total FACTURA')
			{
			}
			column(Totalbase; 'Total base')
			{
			}
			column(TotalIVA_RE; 'Total I.V.A. + R.E.')
			{
			}
			column(totalf; totalf)
			{
				AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
				AutoFormatType = 1;
			}
			column(ivaf; ivaf)
			{
				AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
				AutoFormatType = 1;
			}
			column(basef; basef)
			{
				AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
				AutoFormatType = 1;
			}
			column(PaymentMethodDescription; PaymentMethod.Description)
			{
			}
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_20; 20) {} // Autogenerated by ForNav - Do not delete
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number=const(1));
					column(ReportForNavId_21; 21) {} // Autogenerated by ForNav - Do not delete
					column(Noexped__SalesInvoiceHeaderNoexpedicion; 'Nº exped.: '+"Sales Invoice Header"."Nº expedición")
					{
					}
					column(CIF_CustVATRegistrationNo; 'C.I.F. '+Cust."VAT Registration No.")
					{
					}
					column(CIF_CompanyInfoVATRegistrationNo; 'C.I.F. '+CompanyInfo."VAT Registration No.")
					{
					}
					column(SearchName_Cust; Cust."Search Name")
					{
					}
					column(CustAddrdf7; CustAddrdf[7])
					{
					}
					column(Sunopedido__SalesInvoiceHeaderYourReference; 'Su nº pedido: '+"Sales Invoice Header"."Your Reference")
					{
					}
					column(DireccionPostal; 'Dirección Postal')
					{
					}
					column(DireccionFiscal; 'Dirección Fiscal')
					{
					}
					column(CustAddrdf6; CustAddrdf[6])
					{
					}
					column(CustAddrdf5; CustAddrdf[5])
					{
					}
					column(CustAddrdf4; CustAddrdf[4])
					{
					}
					column(CustAddrdf3; CustAddrdf[3])
					{
					}
					column(CustAddrdf2; CustAddrdf[2])
					{
					}
					column(CustAddrdf1; CustAddrdf[1])
					{
					}
					column(SalesInvoiceHeaderPostingDate; "Sales Invoice Header"."Posting Date")
					{
					}
					column(CustAddr7; CustAddr[7])
					{
					}
					column(Fecha; 'Fecha')
					{
					}
					column(SalesInvoiceHeaderNo; "Sales Invoice Header"."No.")
					{
					}
					column(SalesPurchPersonName; SalesPurchPerson.Name)
					{
					}
					column(SalesPersonText; SalesPersonText)
					{
					}
					column(SalesInvoiceHeaderBill_toCustomerNo; "Sales Invoice Header"."Bill-to Customer No.")
					{
					}
					column(CustAddr6; CustAddr[6])
					{
					}
					column(CustAddr5; CustAddr[5])
					{
					}
					column(CustAddr4; CustAddr[4])
					{
					}
					column(CustAddr3; CustAddr[3])
					{
					}
					column(CustAddr2; CustAddr[2])
					{
					}
					column(CustAddr1; CustAddr[1])
					{
					}
					column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005,Format(ReportForNav.PageNo)))
					{
					}
					column(Noalbaran__nalbaran; 'Nº albaran: '+nalbaran)
					{
					}
					column(SalesInvoiceHeaderYourReference; "Sales Invoice Header"."Your Reference")
					{
					}
					column(Nopedido; 'Nº pedido')
					{
					}
					column(CustNoproveedor; Cust."Nº proveedor")
					{
					}
					column(Proveedor; 'Proveedor')
					{
					}
					column(V0071; '0071')
					{
					}
					column(DPTO; 'DPTO.')
					{
					}
					column(centro; centro)
					{
					}
					dataitem(DimensionLoop1;Integer)
					{
						DataItemLinkReference = SalesInvoiceHeader;
						DataItemTableView = sorting(Number) where(Number=filter(1..));
						column(ReportForNavId_59; 59) {} // Autogenerated by ForNav - Do not delete
						column(DimText; DimText)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowInternalInfo then
							  CurrReport.Break;
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then begin
							  if not PostedDocDim1.Find('-') then
								CurrReport.Break;
							end else
							  if not Continue then
								CurrReport.Break;
							Clear(DimText);
							Continue := false;
							repeat
							  OldDimText := DimText;
							  if DimText = '' then
								DimText := StrSubstNo(
								  '%1 %2',PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code")
							  else
								DimText :=
								  StrSubstNo(
									'%1, %2 %3',DimText,
									PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code");
							  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
								DimText := OldDimText;
								Continue := true;
								exit;
							  end;
							until (PostedDocDim1.Next = 0);
						end;
						
					}
					dataitem("Sales Invoice Line";"Sales Invoice Line")
					{
						DataItemLink = "Document No."=field("No.");
						DataItemLinkReference = SalesInvoiceHeader;
						DataItemTableView = sorting("Document No.","Line No.");
						column(ReportForNavId_61; 61) {} // Autogenerated by ForNav - Do not delete
						column(Importe; 'Importe')
						{
							AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Preciofinal; 'Precio final')
						{
						}
						column(DtosPct; 'Dtos %')
						{
						}
						column(Prectarifa; 'Prec.tarifa')
						{
							DecimalPlaces = 3:3;
						}
						column(PVP; 'PVP')
						{
						}
						column(BenfPct; 'Benf %')
						{
						}
						column(Cantidad; 'Cantidad')
						{
						}
						column(Ean; 'Ean')
						{
						}
						column(IVA; 'IVA')
						{
						}
						column(Descripcion; 'Descripción')
						{
						}
						column(Referencia; 'Referencia')
						{
						}
						column(LineAmount; "Sales Invoice Line"."Line Amount")
						{
							AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Description; "Sales Invoice Line".Description)
						{
						}
						column(dto; dto)
						{
						}
						column(Preciofinal2; "Precio final")
						{
						}
						column(beneficio; beneficio)
						{
						}
						column(Preciobase; "Precio base")
						{
							DecimalPlaces = 3:3;
						}
						column(precioreco; precioreco)
						{
						}
						column(codean; codean)
						{
						}
						column(VATPct; "Sales Invoice Line"."VAT %")
						{
						}
						column(Quantity; "Sales Invoice Line".Quantity)
						{
						}
						column(No; "Sales Invoice Line"."No.")
						{
						}
						column(LineAmount5; "Sales Invoice Line"."Line Amount")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(InvDiscountAmount; -"Inv. Discount Amount")
						{
							AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(PmtDiscGivenAmount; -"Pmt. Disc. Given Amount")
						{
							AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(LineAmount_InvDiscountAmount_PmtDiscGivenAmount_AmountInclud; -("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount" - "Amount Including VAT"))
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(TotalFACTURA2; 'Total FACTURA')
						{
						}
						column(AmountIncludingVAT; "Sales Invoice Line"."Amount Including VAT")
						{
							AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Amount; "Sales Invoice Line".Amount)
						{
							AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(AmountIncludingVAT_Amount; "Amount Including VAT" - Amount)
						{
							AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Totaliva; 'Total iva')
						{
						}
						column(Totalbase2; 'Total base')
						{
						}
						column(TotalExclVATText; TotalExclVATText)
						{
						}
						column(VATAmountLineVATAmountText; VATAmountLine.VATAmountText)
						{
						}
						column(TotalInclVATText; TotalInclVATText)
						{
						}
						column(totalf2; totalf)
						{
						}
						column(ivaf2; ivaf)
						{
						}
						column(basef2; basef)
						{
						}
						dataitem("Sales Shipment Buffer";Integer)
						{
							DataItemTableView = sorting(Number);
							column(ReportForNavId_97; 97) {} // Autogenerated by ForNav - Do not delete
							column(SalesShipmentBufferQuantity; SalesShipmentBuffer.Quantity)
							{
								DecimalPlaces = 0:5;
							}
							column(SalesShipmentBufferPostingDate; SalesShipmentBuffer."Posting Date")
							{
							}
							trigger OnPreDataItem();
							begin
								SalesShipmentBuffer.SetRange("Document No.","Sales Invoice Line"."Document No.");
								SalesShipmentBuffer.SetRange("Line No.","Sales Invoice Line"."Line No.");
								SetRange(Number,1,SalesShipmentBuffer.Count);
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then
								  SalesShipmentBuffer.Find('-')
								else
								  SalesShipmentBuffer.Next;
							end;
							
						}
						dataitem(DimensionLoop2;Integer)
						{
							DataItemTableView = sorting(Number) where(Number=filter(1..));
							column(ReportForNavId_100; 100) {} // Autogenerated by ForNav - Do not delete
							column(DimText3; DimText)
							{
							}
							trigger OnPreDataItem();
							begin
								if not ShowInternalInfo then
								  CurrReport.Break;
								PostedDocDim2.SetRange("Dimension Set ID", "Sales Invoice Line"."Dimension Set ID");
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then begin
								  if not PostedDocDim2.Find('-') then
									CurrReport.Break;
								end else
								  if not Continue then
									CurrReport.Break;
								Clear(DimText);
								Continue := false;
								repeat
								  OldDimText := DimText;
								  if DimText = '' then
									DimText := StrSubstNo(
									  '%1 %2',PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code")
								  else
									DimText :=
									  StrSubstNo(
										'%1, %2 %3',DimText,
										PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code");
								  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
									DimText := OldDimText;
									Continue := true;
									exit;
								  end;
								until (PostedDocDim2.Next = 0);
							end;
							
						}
						trigger OnPreDataItem();
						begin
							VATAmountLine.DeleteAll;
							SalesShipmentBuffer.Reset;
							SalesShipmentBuffer.DeleteAll;
							FirstValueEntryNo := 0;
							MoreLines := Find('+');
							while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
							  MoreLines := Next(-1) <> 0;
							if not MoreLines then
							  CurrReport.Break;
							SetRange("Line No.",0,"Line No.");
						end;
						
						trigger OnAfterGetRecord();
						begin
							if "Sales Invoice Line".Quantity=0 then begin
								 CurrReport.Skip;
							end;
							if "Sales Invoice Line"."NO imprimir en factura" then begin
								 CurrReport.Skip;
							end;
							if "Sales Invoice Header"."Usuario alta"='USERNWS' then begin
								 if "Sales Invoice Line"."Precio base"=0 then begin
									  "Sales Invoice Line"."Precio base":="Sales Invoice Line"."Unit Price";
								 end;
							end;
							dto:='';
							if ("Sales Invoice Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Invoice Line"."% Dto. vendedor"<>0) and
							   ("Sales Invoice Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Invoice Line"."% Dto. vendedor")+'+'+
									  Format("Sales Invoice Line"."Dto% cabecera/oferta")+'+'+
									  Format("Sales Invoice Line"."Line Discount %");
							end;
							if ("Sales Invoice Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Invoice Line"."% Dto. vendedor"=0) and
							   ("Sales Invoice Line"."Line Discount %"=0)then begin
								 dto:=Format("Sales Invoice Line"."Dto% cabecera/oferta");
							end;
							if ("Sales Invoice Line"."Dto% cabecera/oferta"=0) and
							   ("Sales Invoice Line"."% Dto. vendedor"<>0) and
							   ("Sales Invoice Line"."Line Discount %"=0)then begin
								 dto:=Format("Sales Invoice Line"."% Dto. vendedor");
							end;
							if ("Sales Invoice Line"."Dto% cabecera/oferta"=0) and
							   ("Sales Invoice Line"."% Dto. vendedor"=0) and
							   ("Sales Invoice Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Invoice Line"."Line Discount %");
							end;
							if ("Sales Invoice Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Invoice Line"."% Dto. vendedor"<>0) and
							   ("Sales Invoice Line"."Line Discount %"=0)then begin
								 dto:=Format("Sales Invoice Line"."% Dto. vendedor")+'+'+
									  Format("Sales Invoice Line"."Dto% cabecera/oferta");
							end;
							if ("Sales Invoice Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Invoice Line"."% Dto. vendedor"=0) and
							   ("Sales Invoice Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Invoice Line"."Dto% cabecera/oferta")+'+'+
									  Format("Sales Invoice Line"."Line Discount %");
							end;
							if ("Sales Invoice Line"."Dto% cabecera/oferta"=0) and
							   ("Sales Invoice Line"."% Dto. vendedor"<>0) and
							   ("Sales Invoice Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Invoice Line"."% Dto. vendedor")+'+'+
									  Format("Sales Invoice Line"."Line Discount %");
							end;
							PostedShipmentDate := 0D;
							if Quantity <> 0 then
							  PostedShipmentDate := FindPostedShipmentDate;
							if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
							  "No." := '';
							if VATPostingSetup.Get("Sales Invoice Line"."VAT Bus. Posting Group","Sales Invoice Line"."VAT Prod. Posting Group") then begin
								VATAmountLine.Init;
								VATAmountLine."VAT Identifier" := "VAT Identifier";
								VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
								VATAmountLine."Tax Group Code" := "Tax Group Code";
								VATAmountLine."VAT %" := VATPostingSetup."VAT %";
								VATAmountLine."EC %" := VATPostingSetup."EC %";
								VATAmountLine."VAT Base" := "Sales Invoice Line".Amount;
								VATAmountLine."Amount Including VAT" := "Sales Invoice Line"."Amount Including VAT";
								VATAmountLine."Line Amount" := "Line Amount";
								VATAmountLine."Pmt. Disc. Given Amount" := "Pmt. Disc. Given Amount";
								if "Allow Invoice Disc." then
								  VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
								VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
								VATAmountLine.SetCurrencyCode("Sales Invoice Header"."Currency Code");
								VATAmountLine."VAT Difference" := "VAT Difference";
								VATAmountLine."EC Difference" := "EC Difference";
								if "Sales Invoice Header"."Prices Including VAT" then
								  VATAmountLine."Prices Including VAT" := true;
								VATAmountLine.InsertLine;
							end;
							basef:=basef+Amount;
							ivaf:=ivaf+"Amount Including VAT" - Amount;
							totalf:=totalf+"Amount Including VAT";
							codean:=Ean;
							if RecClie."Grupo clientes"='G28' then begin
								 if RecItem.Get("Sales Invoice Line"."No.") then begin
									   codean:="Sales Invoice Line"."No.";
									  "Sales Invoice Line"."No.":=RecItem."Ref. hagen";
								 end;
							end;
							precioreco:=0;
							if RecItem.Get("Sales Invoice Line"."No.") then begin
								 precioreco:=RecItem."Precio recomendado";
							end;
							RecTVP.Reset;
							RecTVP.SetRange(RecTVP."Item No.","Sales Invoice Line"."No.");
							if RecTVP.FindFirst then begin
								 precioreco:=RecTVP."Precio recomendado";
							end;
							RecTVP.Reset;
							RecTVP.SetRange(RecTVP."Item No.","Sales Invoice Line"."No.");
							RecTVP.SetRange(RecTVP."Sales Code","Sales Invoice Line"."Customer Price Group");
							if RecTVP.FindFirst then begin
								 precioreco:=RecTVP."Precio recomendado";
							end;
							beneficio:=0;
							if "Sales Invoice Line".Quantity<>0 then begin
								 if precioreco<>0 then begin
									  if "Sales Invoice Line"."Precio base"<>0 then begin
									  beneficio:=ROUND(((precioreco-"Sales Invoice Line"."Precio base")/"Sales Invoice Line"."Precio base")*100,0.01);
									  end;
								 end;
							end;
							RecSP.Reset;
							RecSP.SetRange(RecSP."Item No.","Sales Invoice Line"."No.");
							RecSP.SetRange(RecSP."Sales Code","Sales Invoice Line"."Customer Price Group");
							if RecSP.FindFirst then begin
								 RecItem."Ref. hagen":=RecSP."Ref. hagen";
							end;
						end;
						
					}
					dataitem(VATCounter;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_102; 102) {} // Autogenerated by ForNav - Do not delete
						column(VATAmountLineECPct; VATAmountLine."EC %")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineECAmount; VATAmountLine."EC Amount")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineInvoiceDiscountAmount_VATAmountLinePmtDiscGiven; VATAmountLine."Invoice Discount Amount" + VATAmountLine."Pmt. Disc. Given Amount")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineInvDiscBaseAmount; VATAmountLine."Inv. Disc. Base Amount")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineLineAmount; VATAmountLine."Line Amount")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATIdentifier; VATAmountLine."VAT Identifier")
						{
						}
						column(VATAmountLineVATAmount; VATAmountLine."VAT Amount")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVAT_ECBase; VATAmountLine."VAT Base")
						{
							AutoFormatExpression = "Sales Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATPct; VATAmountLine."VAT %")
						{
							DecimalPlaces = 0:6;
						}
						trigger OnPreDataItem();
						begin
							SetRange(Number,1,VATAmountLine.Count);
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
						end;
						
					}
					dataitem(VatCounterLCY;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_112; 112) {} // Autogenerated by ForNav - Do not delete
						trigger OnPreDataItem();
						begin
							if (not GLSetup."Print VAT specification in LCY") or
							   ("Sales Invoice Header"."Currency Code"  = '') or
							   (VATAmountLine.GetTotalVATAmount = 0) then
							  CurrReport.Break;
							SetRange(Number,1,VATAmountLine.Count);
							if GLSetup."LCY Code" = '' then
							  VALSpecLCYHeader := Text007 + Text008
							else
							  VALSpecLCYHeader := Text007 + Format(GLSetup."LCY Code");
							CurrExchRate.FindCurrency("Sales Invoice Header"."Posting Date","Sales Invoice Header"."Currency Code",1);
							CalculatedExchRate := ROUND(1 / "Sales Invoice Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount",0.000001);
							VALExchRate := StrSubstNo(Text009,CalculatedExchRate,CurrExchRate."Exchange Rate Amount");
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
							VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Sales Invoice Header"."Currency Factor");
							VALVATAmountLCY :=ROUND(VATAmountLine."VAT Amount" / "Sales Invoice Header"."Currency Factor");
						end;
						
					}
					dataitem(Total;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_113; 113) {} // Autogenerated by ForNav - Do not delete
					}
					dataitem(Total2;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_114; 114) {} // Autogenerated by ForNav - Do not delete
						trigger OnPreDataItem();
						begin
							if not ShowShippingAddr then
							  CurrReport.Break;
						end;
						
					}
				}
				trigger OnPreDataItem();
				begin
					NoOfLoops := Abs(NoOfCopies) + Cust."Invoice Copies" + 1;
					if NoOfLoops <= 0 then
					  NoOfLoops := 1;
					CopyText := '';
					SetRange(Number,1,NoOfLoops);
				end;
				
				trigger OnAfterGetRecord();
				begin
					if Number > 1 then
					  CopyText := Text003;
					
				end;
				
				trigger OnPostDataItem();
				begin
					if not CurrReport.Preview then
					  SalesInvCountPrinted.Run("Sales Invoice Header");
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				CurrReport.Language := Language.GetLanguageID("Language Code");
				DETALLEPVP:=false;
				if RecClie.Get("Sales Invoice Header"."Sell-to Customer No.") then begin
					 centro:=RecClie."Centro ECI";
					 DETALLEPVP:=RecClie."Factura con PVP";
				end;
				if RespCenter.Get("Responsibility Center") then begin
				  FormatAddr.RespCenter(CompanyAddr,RespCenter);
				  CompanyInfo."Phone No." := RespCenter."Phone No.";
				  CompanyInfo."Fax No." := RespCenter."Fax No.";
				end else begin
				  FormatAddr.Company(CompanyAddr,CompanyInfo);
				end;
				PostedDocDim1.SetRange("Dimension Set ID", "Sales Invoice Header"."Dimension Set ID");
				if "Order No." = '' then
				  OrderNoText := ''
				else
				  OrderNoText := FieldCaption("Order No.");
				if "Salesperson Code" = '' then begin
				  SalesPurchPerson.Init;
				  SalesPersonText := '';
				end else begin
				  SalesPurchPerson.Get("Salesperson Code");
				  SalesPersonText := Text000;
				end;
				if "Your Reference" = '' then
				  ReferenceText := ''
				else
				  ReferenceText := FieldCaption("Your Reference");
				if "VAT Registration No." = '' then
				  VATNoText := ''
				else
				  VATNoText := FieldCaption("VAT Registration No.");
				if "Currency Code" = '' then begin
				  GLSetup.TestField("LCY Code");
				  TotalText := StrSubstNo(Text001,GLSetup."LCY Code");
				  TotalInclVATText := StrSubstNo(Text1100000,GLSetup."LCY Code");
				  TotalExclVATText := StrSubstNo(Text1100001,GLSetup."LCY Code");
				end else begin
				  TotalText := StrSubstNo(Text001,"Currency Code");
				  TotalInclVATText := StrSubstNo(Text1100000,"Currency Code");
				  TotalExclVATText := StrSubstNo(Text1100001,"Currency Code");
				end;
				Cust.Get("Sales Invoice Header"."Sell-to Customer No.");
				if Cust."Contacto en factura" then begin
					 FormatAddr.SalesInvBillTo(CustAddr,"Sales Invoice Header");
				end;
				if not Cust."Contacto en factura" then begin
				/////	 FormatAddr.SalesInvBillTo2(CustAddr,"Sales Invoice Header");
				end;
				if "Sales Invoice Header"."Pay-at Code"<>'' then begin
				/////	 FormatAddr.DirePago(CustAddr,"Sales Invoice Header");
				end;
				if not Cust.Get("Bill-to Customer No.") then
				  Clear(Cust);
				CustAddrdf[1]:=CustAddr[1];
				CustAddrdf[2]:=CustAddr[2];
				CustAddrdf[3]:=CustAddr[3];
				CustAddrdf[4]:=CustAddr[4];
				CustAddrdf[5]:=CustAddr[5];
				CustAddrdf[6]:=CustAddr[6];
				CustAddrdf[7]:=CustAddr[7];
				CustAddrdf[8]:=CustAddr[8];
				if "Payment Terms Code" = '' then
				  PaymentTerms.Init
				else begin
				  PaymentTerms.Get("Payment Terms Code");
				  PaymentTerms.TranslateDescription(PaymentTerms,"Language Code");
				end;
				if "Payment Method Code" = '' then
				  PaymentMethod.Init
				else
				  PaymentMethod.Get("Payment Method Code");
				if "Shipment Method Code" = '' then
				  ShipmentMethod.Init
				else begin
				  ShipmentMethod.Get("Shipment Method Code");
				  ShipmentMethod.TranslateDescription(ShipmentMethod,"Language Code");
				end;
				FormatAddr.SalesInvShipTo(ShipToAddr,CustAddr,"Sales Invoice Header");
				ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
				for i := 1 to ArrayLen(ShipToAddr) do
				  if ShipToAddr[i] <> CustAddr[i] then
					ShowShippingAddr := true;
				/*
				IF LogInteraction THEN
				  IF NOT CurrReport.PREVIEW THEN BEGIN
					IF "Bill-to Contact No." <> '' THEN
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Contact,"Bill-to Contact No.","Salesperson Code",
						"Campaign No.","Posting Description",'')
					ELSE
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Customer,"Bill-to Customer No.","Salesperson Code",
						"Campaign No.","Posting Description",'');
					  END;
				 */
				cuenta:='';
				if RecBC.Get("Sales Invoice Header"."Sell-to Customer No.","Sales Invoice Header"."Cust. Bank Acc. Code") then begin
					 cuenta:=RecBC."CCC Bank No."+' ******'+CopyStr(RecBC."CCC Bank Account No.",7,4);
				end;
				Calculavto;
				if RecClie."Centro ECI"<>'' then begin
				///// 5448
					 RecClie2.Get('5448');
					 if "Sales Invoice Header"."Customer Price Group"='BRICO' then begin
						  RecClie2.Get('5853');
					 end;
					 RecClie2.Contact:='';
					 FormatAddr.Customer(CustAddr,RecClie2);
					 FormatAddr.Customer(CustAddrdf,RecClie2);
					 nalbaran:='';
					 Rec110.Reset;
					 Rec110.SetRange(Rec110."Order No.","Sales Invoice Header"."Order No.");
					 if Rec110.FindFirst then begin
						  nalbaran:=Rec110."No.";
					 end;
				end;
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies;NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowInternalInfo;ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
					field(LogInteraction;LogInteraction)
					{
						ApplicationArea = Basic;
						Caption = 'Log Interaction';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			InitLogInteraction;
			; // TODO RequestRequestOptionsPage.LogInteraction.ENABLED(LogInteraction);
		end;

	}

	trigger OnInitReport()
	begin
		
		GLSetup.Get;
		CompanyInfo.Get;
		SalesSetup.Get;
		case SalesSetup."Logo Position on Documents" of
		  SalesSetup."logo position on documents"::"No Logo":;
		  SalesSetup."logo position on documents"::Left:
			begin
			  CompanyInfo.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Center:
			begin
			  CompanyInfo1.Get;
			  CompanyInfo1.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Right:
			begin
			  CompanyInfo2.Get;
			  CompanyInfo2.CalcFields(Picture);
			end;
		end;
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if not CurrReport.UseRequestPage then
		  InitLogInteraction;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Salesperson';
		Text001: label 'Total %1';
		Text002: label 'Total %1 Incl. VAT';
		Text003: label 'COPY';
		Text004: label 'Sales - Invoice %1';
		Text005: label 'Page %1';
		Text006: label 'Total %1 Excl. VAT';
		GLSetup: Record "General Ledger Setup";
		ShipmentMethod: Record "Shipment Method";
		PaymentTerms: Record "Payment Terms";
		SalesPurchPerson: Record "Salesperson/Purchaser";
		CompanyInfo: Record "Company Information";
		CompanyInfo1: Record "Company Information";
		CompanyInfo2: Record "Company Information";
		SalesSetup: Record "Sales & Receivables Setup";
		Cust: Record Customer;
		VATAmountLine: Record "VAT Amount Line" temporary;
		PostedDocDim1: Record "Dimension Set Entry";
		PostedDocDim2: Record "Dimension Set Entry";
		RespCenter: Record "Responsibility Center";
		Language: Record Language;
		CurrExchRate: Record "Currency Exchange Rate";
		SalesInvCountPrinted: Codeunit "Sales Inv.-Printed";
		FormatAddr: Codeunit "Format Address";
		SegManagement: Codeunit SegManagement;
		SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
		PostedShipmentDate: Date;
		CustAddr: array [8] of Text[50];
		CustAddrdf: array [8] of Text[50];
		ShipToAddr: array [8] of Text[50];
		CompanyAddr: array [8] of Text[50];
		OrderNoText: Text[30];
		SalesPersonText: Text[30];
		VATNoText: Text[30];
		ReferenceText: Text[30];
		TotalText: Text[50];
		TotalExclVATText: Text[50];
		TotalInclVATText: Text[50];
		MoreLines: Boolean;
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		CopyText: Text[30];
		ShowShippingAddr: Boolean;
		i: Integer;
		NextEntryNo: Integer;
		FirstValueEntryNo: Integer;
		DimText: Text[120];
		OldDimText: Text[75];
		ShowInternalInfo: Boolean;
		Continue: Boolean;
		LogInteraction: Boolean;
		VALVATBaseLCY: Decimal;
		VALVATAmountLCY: Decimal;
		VALSpecLCYHeader: Text[80];
		Text007: label 'VAT Amount Specification in ';
		Text008: label 'Local Currency';
		VALExchRate: Text[50];
		Text009: label 'Exchange rate: %1/%2';
		CalculatedExchRate: Decimal;
		Text010: label 'Sales - Prepayment Invoice %1';
		Text1100000: label 'Total %1 Incl. VAT+EC';
		Text1100001: label 'Total %1 Excl. VAT+EC';
		VATPostingSetup: Record "VAT Posting Setup";
		PaymentMethod: Record "Payment Method";
		dto: Code[10];
		RecBC: Record "Customer Bank Account";
		cuenta: Code[20];
		MaxVto: Decimal;
		NumVto: Decimal;
		NumVtoExtra: Decimal;
		DocCartera: Record "Cartera Doc.";
		TextoExtra: Text[100];
		FechaVto: array [12] of Date;
		ImpVto: array [12] of Decimal;
		ImporExtra: Decimal;
		basef: Decimal;
		ivaf: Decimal;
		totalf: Decimal;
		centro: Code[10];
		RecClie: Record Customer;
		RecClie2: Record Customer;
		codean: Code[20];
		RecItem: Record Item;
		nalbaran: Code[20];
		Rec110: Record "Sales Shipment Header";
		RecTVP: Record "Sales Price";
		INFOLINEA: Text[250];
		PV: Decimal;
		BF: Decimal;
		PV2: Decimal;
		beneficio: Decimal;
		DETALLEPVP: Boolean;
		precioreco: Decimal;
		RecSP: Record "Sales Price";
		Table113: Record "Sales Invoice Line";

	procedure InitLogInteraction()
	begin
		LogInteraction := SegManagement.FindInteractTmplCode(4) <> '';
	end;

	procedure FindPostedShipmentDate(): Date
	var
		SalesShipmentHeader: Record "Sales Shipment Header";
		SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
	begin
		NextEntryNo := 1;
		if "Sales Invoice Line"."Shipment No." <> '' then
		  if SalesShipmentHeader.Get("Sales Invoice Line"."Shipment No.") then
			exit(SalesShipmentHeader."Posting Date");
		if "Sales Invoice Header"."Order No."='' then
		  exit("Sales Invoice Header"."Posting Date");
		case "Sales Invoice Line".Type of
		  "Sales Invoice Line".Type::Item:
			GenerateBufferFromValueEntry("Sales Invoice Line");
		  "Sales Invoice Line".Type::"G/L Account","Sales Invoice Line".Type::Resource,
		  "Sales Invoice Line".Type::"Charge (Item)","Sales Invoice Line".Type::"Fixed Asset":
			 GenerateBufferFromShipment("Sales Invoice Line");
		  "Sales Invoice Line".Type::" ":
			  exit(0D);
		end;
		SalesShipmentBuffer.Reset;
		SalesShipmentBuffer.SetRange("Document No.","Sales Invoice Line"."Document No.");
		SalesShipmentBuffer.SetRange("Line No." ,"Sales Invoice Line"."Line No.");
		if SalesShipmentBuffer.Find('-') then begin
		  SalesShipmentBuffer2 := SalesShipmentBuffer;
			if SalesShipmentBuffer.Next = 0 then begin
			  SalesShipmentBuffer.Get(
				SalesShipmentBuffer2."Document No.",SalesShipmentBuffer2."Line No.",SalesShipmentBuffer2."Entry No.");
			  SalesShipmentBuffer.Delete;
			  exit(SalesShipmentBuffer2."Posting Date");;
			end ;
		   SalesShipmentBuffer.CalcSums(Quantity);
		   if SalesShipmentBuffer.Quantity <> "Sales Invoice Line".Quantity then begin
			 SalesShipmentBuffer.DeleteAll;
			 exit("Sales Invoice Header"."Posting Date");
		   end;
		end else
		  exit("Sales Invoice Header"."Posting Date");
	end;

	procedure GenerateBufferFromValueEntry(SalesInvoiceLine2: Record "Sales Invoice Line")
	var
		ValueEntry: Record "Value Entry";
		ItemLedgerEntry: Record "Item Ledger Entry";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
		TotalQuantity := SalesInvoiceLine2."Quantity (Base)";
		ValueEntry.SetCurrentkey("Document No.");
		ValueEntry.SetRange("Document No.",SalesInvoiceLine2."Document No.");
		ValueEntry.SetRange("Posting Date","Sales Invoice Header"."Posting Date");
		ValueEntry.SetRange("Item Charge No.",'');
		ValueEntry.SetFilter("Entry No.",'%1..',FirstValueEntryNo);
		if ValueEntry.Find('-') then
		  repeat
			if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then begin
			  if SalesInvoiceLine2."Qty. per Unit of Measure" <> 0 then
				Quantity := ValueEntry."Invoiced Quantity" / SalesInvoiceLine2."Qty. per Unit of Measure"
			  else
				Quantity := ValueEntry."Invoiced Quantity";
			  AddBufferEntry(
				SalesInvoiceLine2,
				-Quantity,
				ItemLedgerEntry."Posting Date");
			  TotalQuantity := TotalQuantity + ValueEntry."Invoiced Quantity";
			end;
			FirstValueEntryNo := ValueEntry."Entry No." + 1;
		  until (ValueEntry.Next = 0) or (TotalQuantity = 0);
	end;

	procedure GenerateBufferFromShipment(SalesInvoiceLine: Record "Sales Invoice Line")
	var
		SalesInvoiceHeader: Record "Sales Invoice Header";
		SalesInvoiceLine2: Record "Sales Invoice Line";
		SalesShipmentHeader: Record "Sales Shipment Header";
		SalesShipmentLine: Record "Sales Shipment Line";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
		TotalQuantity := 0;
		SalesInvoiceHeader.SetCurrentkey("Order No.");
		SalesInvoiceHeader.SetFilter("No.",'..%1',"Sales Invoice Header"."No.");
		SalesInvoiceHeader.SetRange("Order No.","Sales Invoice Header"."Order No.");
		if SalesInvoiceHeader.Find('-') then
		  repeat
			SalesInvoiceLine2.SetRange("Document No.",SalesInvoiceHeader."No.");
			SalesInvoiceLine2.SetRange("Line No.",SalesInvoiceLine."Line No.");
			SalesInvoiceLine2.SetRange(Type,SalesInvoiceLine.Type);
			SalesInvoiceLine2.SetRange("No.",SalesInvoiceLine."No.");
			SalesInvoiceLine2.SetRange("Unit of Measure Code",SalesInvoiceLine."Unit of Measure Code");
			if SalesInvoiceLine2.Find('-') then
			  repeat
				TotalQuantity := TotalQuantity + SalesInvoiceLine2.Quantity;
			  until SalesInvoiceLine2.Next = 0;
		  until SalesInvoiceHeader.Next = 0;
		SalesShipmentLine.SetCurrentkey("Order No.","Order Line No.");
		SalesShipmentLine.SetRange("Order No.","Sales Invoice Header"."Order No.");
		SalesShipmentLine.SetRange("Order Line No.",SalesInvoiceLine."Line No.");
		SalesShipmentLine.SetRange("Line No.",SalesInvoiceLine."Line No.");
		SalesShipmentLine.SetRange(Type,SalesInvoiceLine.Type);
		SalesShipmentLine.SetRange("No.",SalesInvoiceLine."No.");
		SalesShipmentLine.SetRange("Unit of Measure Code",SalesInvoiceLine."Unit of Measure Code");
		SalesShipmentLine.SetFilter(Quantity,'<>%1',0);
		if SalesShipmentLine.Find('-') then
		  repeat
			if "Sales Invoice Header"."Get Shipment Used" then
			  CorrectShipment(SalesShipmentLine);
			if Abs(SalesShipmentLine.Quantity) <= Abs(TotalQuantity - SalesInvoiceLine.Quantity) then
			  TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity
			else begin
			  if Abs(SalesShipmentLine.Quantity)  > Abs(TotalQuantity) then
				SalesShipmentLine.Quantity := TotalQuantity;
			  Quantity :=
				SalesShipmentLine.Quantity - (TotalQuantity - SalesInvoiceLine.Quantity);
			  TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity;
			  SalesInvoiceLine.Quantity := SalesInvoiceLine.Quantity - Quantity;
			  if SalesShipmentHeader.Get(SalesShipmentLine."Document No.") then
				begin
				  AddBufferEntry(
					SalesInvoiceLine,
					Quantity,
					SalesShipmentHeader."Posting Date");
				end;
			end;
		  until (SalesShipmentLine.Next = 0) or (TotalQuantity = 0);
	end;

	procedure CorrectShipment(var SalesShipmentLine: Record "Sales Shipment Line")
	var
		SalesInvoiceLine: Record "Sales Invoice Line";
	begin
		SalesInvoiceLine.SetCurrentkey("Shipment No.","Shipment Line No.");
		SalesInvoiceLine.SetRange("Shipment No.",SalesShipmentLine."Document No.");
		SalesInvoiceLine.SetRange("Shipment Line No.",SalesShipmentLine."Line No.");
		if SalesInvoiceLine.Find('-') then
		   repeat
			  SalesShipmentLine.Quantity := SalesShipmentLine.Quantity - SalesInvoiceLine.Quantity;
		   until SalesInvoiceLine.Next = 0;
	end;

	procedure AddBufferEntry(SalesInvoiceLine: Record "Sales Invoice Line";QtyOnShipment: Decimal;PostingDate: Date)
	begin
		SalesShipmentBuffer.SetRange("Document No.",SalesInvoiceLine."Document No.");
		SalesShipmentBuffer.SetRange("Line No.",SalesInvoiceLine."Line No.");
		SalesShipmentBuffer.SetRange("Posting Date",PostingDate);
		if SalesShipmentBuffer.Find('-') then begin
		  SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity + QtyOnShipment;
		  SalesShipmentBuffer.Modify;
		  exit;
		end;
		with SalesShipmentBuffer do begin
		  "Document No." := SalesInvoiceLine."Document No.";
		  "Line No." := SalesInvoiceLine."Line No.";
		  "Entry No." := NextEntryNo;
		  Type := SalesInvoiceLine.Type;
		  "No." := SalesInvoiceLine."No.";
		  Quantity := QtyOnShipment;
		 "Posting Date" := PostingDate;
		  Insert;
		  NextEntryNo := NextEntryNo + 1
		end;
	end;

	local procedure DocumentCaption(): Text[250]
	begin
		if "Sales Invoice Header"."Prepayment Invoice" then
		  exit(Text010);
		exit(Text004);
	end;

	procedure GetCarteraInvoice(): Boolean
	var
		CustLedgEntry: Record "Cust. Ledger Entry";
	begin
		with CustLedgEntry do begin
		  SetCurrentkey("Document No.","Document Type","Customer No.");
		  SetRange("Document Type","document type"::Invoice);
		  SetRange("Document No.","Sales Invoice Header"."No.");
		  SetRange("Customer No.","Sales Invoice Header"."Bill-to Customer No.");
		  SetRange("Posting Date","Sales Invoice Header"."Posting Date");
		  if Find('-') then
			if CustLedgEntry."Document Situation" = CustLedgEntry."document situation"::" " then
			  exit(false)
			else
			  exit(true)
		  else
			exit(false);
		end;
	end;

	procedure Calculavto()
	begin
		MaxVto := 3;
		for NumVto := 1 to MaxVto do begin
		  FechaVto[NumVto] := 0D;
		  ImpVto[NumVto] := 0;
		end;
		NumVto := 1;
		NumVtoExtra := 0;
		ImporExtra := 0;
		DocCartera.SetCurrentkey(Type,"Document No.");
		DocCartera.SetRange(Type,DocCartera.Type::Receivable);
		DocCartera.SetRange("Document No.","Sales Invoice Header"."No.");
		if DocCartera.Find('-') then
		  repeat
			if NumVto > MaxVto then begin
			  ImporExtra := ImporExtra + DocCartera."Remaining Amount";
			  NumVtoExtra := NumVtoExtra + 1;
			end else begin
			  FechaVto[NumVto] := DocCartera."Due Date";
			  ImpVto[NumVto] := DocCartera."Remaining Amount";
			  NumVto := NumVto + 1;
			end;
		  until DocCartera.Next = 0
		else begin
		  FechaVto[NumVto] := "Sales Invoice Header"."Due Date";
		  "Sales Invoice Header".CalcFields("Amount Including VAT");
		  ImpVto[NumVto] := "Sales Invoice Header"."Amount Including VAT";
		end;
		if NumVtoExtra > 0 then
		  TextoExtra := 'Más ' + Format(NumVtoExtra) + ' vencimientos que suman un total de:'
		else
		  TextoExtra := '';
	end;

	local procedure OnPreSectionPageLoop_Header2(var PageLoop : Record Integer);
	begin
		with PageLoop do begin
		  ReportForNav.ShowOutput(RecClie."Grupo clientes"<>'G28');
		end;
	end;
	local procedure OnPreSectionPageLoop_Header3(var PageLoop : Record Integer);
	begin
		with PageLoop do begin
		  ReportForNav.ShowOutput(RecClie."Grupo clientes"='G28');
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body4(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number = 1);
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body5(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number > 1);
		end;
	end;
	local procedure OnPreSectionTable113_Header6(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(GetCarteraInvoice);
		end;
	end;
	local procedure OnPreSectionTable113_Header7(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(DETALLEPVP=true);
		end;
	end;
	local procedure OnPreSectionTable113_Header8(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(DETALLEPVP=false);
		end;
	end;
	local procedure OnPreSectionTable113_Body10(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(Type = 0);
		end;
	end;
	local procedure OnPreSectionTable113_Body11(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(DETALLEPVP=true);
		end;
	end;
	local procedure OnPreSectionTable113_Body12(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(Type > 0);
		  ReportForNav.ShowOutput(DETALLEPVP=false);
		end;
	end;
	local procedure OnPreSectionTable113_Footer15(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput("Inv. Discount Amount" <> 0);
		end;
	end;
	local procedure OnPreSectionTable113_Footer16(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput("Pmt. Disc. Given Amount" <> 0);
		end;
	end;
	local procedure OnPreSectionTable113_Footer18(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(not "Sales Invoice Header"."Prices Including VAT");
		end;
	end;
	local procedure OnPreSectionTable113_Footer19(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput(
			"Sales Invoice Header"."Prices Including VAT" and
			("Amount Including VAT" <> Amount) and
			("Sales Invoice Header"."VAT Base Discount %" <> 0));
		end;
	end;
	local procedure OnPreSectionTable113_Footer20(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput("Sales Invoice Header"."Prices Including VAT" and
		  (VATAmountLine."VAT Calculation Type" <> VATAmountLine."vat calculation type"::"Reverse Charge VAT"));
		end;
	end;
	local procedure OnPreSectionTable113_Footer21(var "Sales Invoice Line" : Record "Sales Invoice Line");
	begin
		with Table113 do begin
		  ReportForNav.ShowOutput("Sales Invoice Header"."Prices Including VAT" and
		  (VATAmountLine."VAT Calculation Type" = VATAmountLine."vat calculation type"::"Reverse Charge VAT"));
		end;
	end;
	local procedure OnPreSectionVATCounter_Body26(var VATCounter : Record Integer);
	begin
		with VATCounter do begin
		  if VATAmountLine."VAT Amount" = 0 then
			VATAmountLine."VAT %" := 0;
		  if VATAmountLine."EC Amount" = 0 then
			VATAmountLine."EC %" := 0;
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50078_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50078;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
