
Report 50150 "Aviso dto. abono en fac COPIA"
{
    UseRequestPage = true;
    RDLCLayout = './Layouts/Avisodto.abonoenfacCOPIA.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Gen. Journal Line"; "Gen. Journal Line")
        {
            DataItemTableView = sorting("Account Type", "Account No.", "Applies-to Doc. Type", "Applies-to Doc. No.") where("Applies-to Doc. No." = filter(<> ''));
            PrintOnlyIfDetail = true;
            RequestFilterFields = "Account Type", "Account No.";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(HAGENESPANA; 'HAGEN ESPAÑA')
            {
            }
            column(AccountNo; "Gen. Journal Line"."Account No.")
            {
            }
            column(DirClie2; DirClie[2])
            {
            }
            column(DirClie7; DirClie[7])
            {
            }
            column(DirClie6; DirClie[6])
            {
            }
            column(DirClie5; DirClie[5])
            {
            }
            column(VATRegistrationNo_Clie; Clie."VAT Registration No.")
            {
            }
            column(DirClie4; DirClie[4])
            {
            }
            column(DirClie3; DirClie[3])
            {
            }
            column(DirClie1; DirClie[1])
            {
            }
            column(Silla__FORMAT_TODAY_0_4; 'Silla, ' + Format(Today, 0, 4))
            {
            }
            /////-column(Pagina_FORMAT_ReportForNavPageNo; 'Página ' + Format(pagen  ReportForNav.PageNo))
            /////-{
            /////-}
            column(TxtFooter2; TxtFooter2)
            {
            }
            column(TxtFooter1; TxtFooter1)
            {
            }
            column(infoempName; infoemp.Name)
            {
            }
            dataitem("Cust. Ledger Entry"; "Cust. Ledger Entry")
            {
                DataItemLink = "Document No." = field("Applies-to Doc. No."), "Bill No." = field("Applies-to Bill No."), "Document Type" = field("Applies-to Doc. Type");
                DataItemTableView = sorting("Document Type", "Document No.", "Customer No.") where(Open = const(true));
                column(ReportForNavId_17; 17) { } // Autogenerated by ForNav - Do not delete
                column(DueDate; "Cust. Ledger Entry"."Due Date")
                {
                }
                column(RemainingAmt_LCY_; "Remaining Amt. (LCY)")
                {
                    AutoFormatType = 1;
                }
                column(TxtDesc; TxtDesc)
                {
                }
                column(DocumentNo; "Cust. Ledger Entry"."Document No.")
                {
                }
                column(DocumentType; "Cust. Ledger Entry"."Document Type")
                {
                }
                column(PostingDate; "Cust. Ledger Entry"."Posting Date")
                {
                }
                trigger OnAfterGetRecord();
                begin
                    total := total + "Cust. Ledger Entry"."Remaining Amt. (LCY)";
                end;

            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Account No.");
                SetRange("Journal Template Name", 'CARTERA');
                SetRange("Journal Batch Name", 'DTO-ABO');
                total := 0;
            end;

            trigger OnAfterGetRecord();
            begin
                for i := 1 to 8
                do DirClie[i] := '';
                Clie.Init;
                if "Gen. Journal Line"."Account Type" = "Gen. Journal Line"."account type"::Customer then begin
                    if Clie.Get("Gen. Journal Line"."Account No.") then;
                    DirecPago.Reset;
                    DirecPago.SetRange("Customer No.", "Gen. Journal Line"."Account No.");
                    /*
                    IF DirecPago.FIND('-') THEN
                  ///	FormatDire.SalesHeaderBillTo(DirClie,DirecPago)
                    ELSE
                    */
                    if Clie.Get("Gen. Journal Line"."Account No.") then FormatDire.Customer(DirClie, Clie);
                end;

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        /*
		infoemp.GET;
		confcar.FIND('-');
		confcar.TESTFIELD(confcar."Sec. diario descuento abonos");
		IF NOT (SDG.GET('CARTERA',confcar."Sec. diario descuento abonos")) THEN
		  ERROR('Falta crear la sección del diario de Cartera '+confcar."Sec. diario descuento abonos");
		SDG.TESTFIELD(SDG."No. Series");
		*/


    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
    end;

    var
        "Page": label 'página';
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        infoemp: Record "Company Information";
        confcar: Record "Cartera Setup";
        SDG: Record "Gen. Journal Batch";
        total: Decimal;
        LDG: Record "Gen. Journal Line";
        TxtFooter1: Text[200];
        TxtFooter2: Text[200];
        DirClie: array[8] of Text[50];
        FormatDire: Codeunit "Format Address";
        Clie: Record Customer;
        Prove: Record Vendor;
        i: Integer;
        TxtDesc: Text[50];
        DirecPago: Record "Customer Pmt. Address";

    local procedure OnPreSectionTable81_Header1(var "Gen. Journal Line": Record "Gen. Journal Line");
    begin
        with "Gen. Journal Line" do begin
            FooterPrinted := false;
        end;
    end;

    local procedure OnPreSectionTable81_GroupFooter2(var "Gen. Journal Line": Record "Gen. Journal Line");
    begin
        LDG.Reset;
        LDG.SetRange("Journal Template Name", 'CARTERA');
        LDG.SetRange("Journal Batch Name", 'DTO-ABO');
        LDG.SetRange("Account Type", "Gen. Journal Line"."Account Type");
        LDG.SetRange("Account No.", "Gen. Journal Line"."Account No.");
        LDG.SetRange("Applies-to Doc. No.", '');
        if not LDG.Find('-') then
            LDG.Init;
        if LDG."Amount (LCY)" <> 0 then begin
            TxtFooter1 := 'Lo que arroja un saldo a n/favor de ' + Format(LDG."Amount (LCY)") + ' ░';
            TxtFooter2 := 'por lo que se pone un giro en circulación al vencimiento del ' + Format(LDG."Due Date");
        end else begin
            if total < 0 then begin
                TxtFooter1 := 'Lo que arroja un saldo a s/favor de ' + Format(-total) + ' ░';
                TxtFooter2 := '';
            end else begin
                TxtFooter1 := 'Se le compensan las citadas facturas y abonos quedando saldado el importe pendiente.';
                TxtFooter2 := '';
            end;
        end;

        total := 0;
    end;

    local procedure OnPreSectionTable21_Body3(var "Cust. Ledger Entry": Record "Cust. Ledger Entry");
    begin
        with "Cust. Ledger Entry" do begin
            TxtDesc := "Cust. Ledger Entry".Description;
            if "Cust. Ledger Entry"."Document Type" = "Cust. Ledger Entry"."document type"::"Credit Memo" then
                TxtDesc := 'Abono';
        end;
    end;

    var


        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

}
