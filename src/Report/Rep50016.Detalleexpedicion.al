#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50016_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50016){}   
		type("System.IO.Path"; System_IO_Path50016) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50016 "_Detalle expedicion"
{
	Caption = 'Detalle expedicion';
	RDLCLayout = './Layouts/_Detalleexpedicion.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Header";Table50024)
		{
			DataItemTableView = sorting("Document Type","Nº expedición") where("Document Type"=const(Order));
			RequestFilterFields = "No.","Sell-to Customer No.";
			RequestFilterHeading = 'Sales Order';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			dataitem(PageLoop;Integer)
			{
				DataItemTableView = sorting(Number) where(Number=const(1));
				column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
				column(SalesHeaderShip_toAddress2; "Sales Header"."Ship-to Address 2")
				{
				}
				column(SearchName_RecCusto; RecCusto."Search Name")
				{
				}
				column(SalesHeaderYourReference; "Sales Header"."Your Reference")
				{
				}
				column(TODAY; Today)
				{
				}
				column(TIME; Time)
				{
				}
				column(SalesHeaderNoexpedicion; "Sales Header"."Nº expedición")
				{
				}
				column(TODAY_0_4; Format(Today,0,4))
				{
				}
				column(SalesHeaderShip_toCountry_RegionCode; "Sales Header"."Ship-to Country/Region Code")
				{
				}
				column(SalesHeaderShip_toCounty; "Sales Header"."Ship-to County")
				{
				}
				column(SalesHeaderShip_toPostCode; "Sales Header"."Ship-to Post Code")
				{
				}
				column(SalesHeaderShip_toCity; "Sales Header"."Ship-to City")
				{
				}
				column(SalesHeaderShip_toAddress; "Sales Header"."Ship-to Address")
				{
				}
				column(SalesHeaderShip_toName2; "Sales Header"."Ship-to Name 2")
				{
				}
				column(SalesHeaderShip_toName; "Sales Header"."Ship-to Name")
				{
				}
				column(COMPANYNAME; COMPANYNAME)
				{
				}
				column(ReportForNavPageNo; Format(ReportForNav.PageNo))
				{
				}
				column(USERID; UserId)
				{
				}
				column(SalesHeaderNo; "Sales Header"."No.")
				{
				}
				column(TOTAART; TOTAART)
				{
				}
				dataitem("Sales Line";Table50026)
				{
					DataItemLink = "Document Type"=field("Document Type"),"Document No."=field("No.");
					DataItemLinkReference = "Sales Header";
					DataItemTableView = sorting("Document Type","Document No.","Line No.");
					column(ReportForNavId_22; 22) {} // Autogenerated by ForNav - Do not delete
					column(Quantity; Quantity)
					{
					}
					column(Description; Description)
					{
					}
					column(codprod; codprod)
					{
					}
					column(TOTAART2; TOTAART)
					{
					}
					trigger OnPreDataItem();
					begin
						if PrintToExcel then
						  MakeWOLineHeader;
					end;
					
					trigger OnAfterGetRecord();
					begin
						if PrintToExcel then
						  MakeWOLine;
						STOCK:=0;
						ESTANTE:='';
						if ("Sales Line"."Estado linea"=4) and ("Sales Line"."Outstanding Quantity"=0) then begin
							 CurrReport.Skip;
						end;
						if RecItem.Get("Sales Line"."No.") then begin
							 RecItem.CalcFields(RecItem.Inventory);
							 STOCK:=RecItem.Inventory;
							 ESTANTE:=RecItem."Shelf/Bin No.";
						end;
						if STOCK<=0 then begin
							 "Sales Line".Validate("Sales Line"."Qty. to Ship",0);
							 "Sales Line".Modify;
						end;
						codprod:="Sales Line"."No.";
						if "Sales Line"."Variant Code"<>'' then begin
							 codprod:="Sales Line"."Variant Code";
						end;
						TOTAART:=TOTAART+"Sales Line".Quantity;
					end;
					
					trigger OnPostDataItem();
					begin
						if PrintToExcel and not ("Sales Line".IsEmpty) then begin
						  ExcelBuf.EndRange;
						  ExcelBuf.CreateRange('WorkOrderLineRange');
						end;
					end;
					
				}
				dataitem("Extra Lines";Integer)
				{
					DataItemTableView = sorting(Number) where(Number=const(1));
					column(ReportForNavId_26; 26) {} // Autogenerated by ForNav - Do not delete
					trigger OnPreDataItem();
					begin
						if PrintToExcel then
						  MakeWOExtraLineHeader;
					end;
					
					trigger OnPostDataItem();
					begin
						if PrintToExcel and not ("Sales Line".IsEmpty) then begin
						  ExcelBuf.EndRange;
						  ExcelBuf.CreateRange('WorkOrderExtraLineRange');
						  ExcelBuf.NewRow;
						  ExcelBuf.NewRow;
						  ExcelBuf.NewRow;
						  ExcelBuf.NewRow;
						end;
					end;
					
				}
			}
			trigger OnAfterGetRecord();
			begin
				CompanyInfo.Get;
				TOTAART:=0;
				FormatAddr.Company(InfoEmpresa,CompanyInfo);
				"Sales Header"."Nº copias solicitud trabajo":="Sales Header"."Nº copias solicitud trabajo"+1;
				"Sales Header".Modify;
				if PrintToExcel then
				  MakeWOHeader;
				nombreprepara:='';
				if RecMulti.Get(14,"Sales Header".Preparador) then begin
					 nombreprepara:=RecMulti.Descripción;
				end;
				TELEFONO:='';
				if RecCusto.Get("Sales Header"."Sell-to Customer No.") then begin
					 TELEFONO:=RecCusto."Phone No.";
				end;
				Recvende.Init;
				if Recvende.Get("Sales Header"."Salesperson Code") then begin
				end;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(PrintToExcel;PrintToExcel)
					{
						ApplicationArea = Basic;
						Caption = 'Print to Excel';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if PrintToExcel then
		  ExcelBuf.CreateBook;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Work Order';
		Text001: label 'Sales Order No.';
		Text002: label 'Quantity used during work (Posted with the Sales Order)';
		Text003: label 'Quantity Used';
		Text004: label 'Comments';
		Text005: label 'Extra Item/Resource used during work (Posted with Item or Resource Journals)';
		ExcelBuf: Record "Excel Buffer" temporary;
		FormatAddr: Codeunit "Format Address";
		CustAddr: array [8] of Text[50];
		InfoEmpresa: array [8] of Text[30];
		PrintToExcel: Boolean;
		Text006: label 'Date';
		ESTANTE: Code[20];
		RecItem: Record Item;
		STOCK: Decimal;
		CompanyInfo: Record "Company Information";
		nombreprepara: Text[30];
		RecMulti: Record UnknownRecord50005;
		TELEFONO: Text[30];
		RecCusto: Record Customer;
		Recvende: Record "Salesperson/Purchaser";
		codprod: Code[30];
		TOTAART: Integer;

	local procedure MakeWOHeader()
	begin
	end;

	local procedure MakeWOLineHeader()
	var
		HeaderLineNo: Integer;
	begin
	end;

	local procedure MakeWOLine()
	begin
	end;

	local procedure MakeWOCommentLineHeader()
	begin
	end;

	local procedure MakeWOCommentLine()
	begin
	end;

	local procedure MakeWOExtraLineHeader()
	begin
	end;

	local procedure OnPreSectionPageLoop_Header1(var PageLoop : Record Integer);
	begin
		with PageLoop do begin
		  if PrintToExcel then
			ReportForNav.ShowOutput(false);
		end;
	end;
	local procedure OnPreSectionSalesLine_Header3(var "Sales Line" : Record Table50026);
	begin
		with "Sales Line" do begin
		  if PrintToExcel then
			ReportForNav.ShowOutput(false);
		end;
	end;
	local procedure OnPreSectionSalesLine_Body4(var "Sales Line" : Record Table50026);
	begin
		with "Sales Line" do begin
		  if PrintToExcel then
			ReportForNav.ShowOutput(false);
		end;
	end;
	local procedure OnPreSectionSalesLine_TransFooter5(var "Sales Line" : Record Table50026);
	begin
		with "Sales Line" do begin
		  if PrintToExcel then
			ReportForNav.ShowOutput(false);
		end;
	end;
	local procedure OnPreSectionExtraLines_Header6(var "Extra Lines" : Record Integer);
	begin
		with "Extra Lines" do begin
		  if PrintToExcel then
			ReportForNav.ShowOutput(false);
		  if "Sales Line".IsEmpty then
			ReportForNav.ShowOutput(false);
		end;
	end;
	local procedure OnPreSectionExtraLines_TransFooter7(var "Extra Lines" : Record Integer);
	begin
		with "Extra Lines" do begin
		  if PrintToExcel then
			ReportForNav.ShowOutput(false);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50016_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50016;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
