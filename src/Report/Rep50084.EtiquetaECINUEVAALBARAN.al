#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50084_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50084){}   
		type("System.IO.Path"; System_IO_Path50084) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50084 "Etiqueta ECI NUEVA ALBARAN"
{
	Caption = 'Etiqueta ECI NUEVA';
	RDLCLayout = './Layouts/EtiquetaECINUEVAALBARAN.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Header";"Sales Shipment Header")
		{
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.","Sell-to Customer No.";
			RequestFilterHeading = 'Sales Order';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			dataitem("Sales Line";"Sales Shipment Line")
			{
				DataItemLink = "Document No."=field("No.");
				column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
				column(V__dcentro__; '*'+dcentro+'*')
				{
				}
				column(SalesHeaderNoexpedicion; "Sales Header"."Nº expedición")
				{
				}
				column(nueva1; nueva1)
				{
				}
				column(EncodeBarcode128_nueva; EncodeBarcode128(nueva))
				{
				}
				column(Cantidad_; 'Cantidad:')
				{
				}
				column(SalesLineQuantity; "Sales Line".Quantity)
				{
				}
				column(SalesLineNo; "Sales Line"."No.")
				{
				}
				column(CODART_; 'COD.ART:')
				{
				}
				column(SalesHeaderYourReference; "Sales Header"."Your Reference")
				{
				}
				column(REFECI_; 'REF. ECI:')
				{
				}
				column(DESCODBAR; DESCODBAR)
				{
				}
				column(EncodeBarcode128_CODBAR; EncodeBarcode128(CODBAR))
				{
				}
				column(NALBA; NALBA)
				{
				}
				column(ALBARAN; 'ALBARAN')
				{
				}
				column(dcentro1; dcentro1)
				{
				}
				column(PEDIDO; 'PEDIDO')
				{
				}
				column(V219_00; '219-00')
				{
				}
				column(DPTOPVENTA; 'DPTO.P.VENTA')
				{
				}
				column(NBUL___FORMAT_SUNABUL; Format(NBUL)+' / '+Format(SUNABUL))
				{
				}
				column(CENTRO; CENTRO)
				{
				}
				column(SalesHeaderSell_toCounty; "Sales Header"."Sell-to County")
				{
				}
				column(SalesHeaderShip_toPostCode__SalesHeaderSell_toCity; "Sales Header"."Ship-to Post Code"+'   '+"Sales Header"."Sell-to City")
				{
				}
				column(SalesHeaderSell_toAddress; "Sales Header"."Sell-to Address")
				{
				}
				column(SalesHeaderSell_toCustomerName; "Sales Header"."Sell-to Customer Name")
				{
				}
				column(SalesHeaderShip_toCounty; "Sales Header"."Ship-to County")
				{
				}
				column(SalesHeaderShip_toName; "Sales Header"."Ship-to Name")
				{
				}
				column(SalesHeaderShip_toAddress; "Sales Header"."Ship-to Address")
				{
				}
				column(SalesHeaderShip_toPostCode__SalesHeaderShip_toCity; "Sales Header"."Ship-to Post Code"+'   '+"Sales Header"."Ship-to City")
				{
				}
				trigger OnAfterGetRecord();
				begin
					NBUL:=NBUL+1;
					contador:=IncStr(contador);
					nueva:='3'+'1973974'+contador;
					nueva1:='(00) '+'3'+'1973974'+contador;
					XX:=0;
					repeat
						 XX:=XX+1;
						 DIG1[XX]:=CopyStr(nueva,XX,1);
						 Evaluate(DIG2[XX],DIG1[XX]);
					until XX=17;
					SUMA1:=DIG2[17]*3+
						   DIG2[16]*1+
						   DIG2[15]*3+
						   DIG2[14]*1+
						   DIG2[13]*3+
						   DIG2[12]*1+
						   DIG2[11]*3+
						   DIG2[10]*1+
						   DIG2[9]*3+
						   DIG2[8]*1+
						   DIG2[7]*3+
						   DIG2[6]*1+
						   DIG2[5]*3+
						   DIG2[4]*1+
						   DIG2[3]*3+
						   DIG2[2]*1+
						   DIG2[1]*3;
					SUMA2:=ROUND(SUMA1,10,'>');
					RESTO:=SUMA2-SUMA1;
					dc:=Format(RESTO);
					/// MESSAGE(' %1 %2 %3 %4 %5',nueva,nueva1,SUMA1,SUMA2,RESTO);
					nueva:='00'+'3'+'1973974'+contador+dc;
					nueva1:='(00) '+'3'+'1973974'+contador+dc;
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				CompanyInfo.Get;
				FormatAddr.SalesShptShipTo(CustAddr,"Sales Header");
				FormatAddr.Company(InfoEmpresa,CompanyInfo);
				CODIGO:='1001201230400263080001';
				nombreprepara:='';
				TELEFONO:='';
				if RecCusto.Get("Sales Header"."Sell-to Customer No.") then begin
					 TELEFONO:=RecCusto."Phone No.";
				end;
				transport:='';
				if RecTra.Get("Sales Header"."Shipping Agent Code") then begin
					 transport:=RecTra.Name;
				end;
				vendedor:='';
				if RecVende.Get("Sales Header"."Salesperson Code") then begin
					 vendedor:=RecVende.Name;
				end;
				tlinea:=0;
				;
				Rec37.SetRange(Rec37."Document No.","No.");
				if Rec37.FindFirst then repeat
					 if Rec37.Quantity>0 then begin
						  tlinea:=tlinea+1;
					 end;
				until Rec37.Next = 0;
				CENTRO1:='01';
				if RecEAD.Get("Sales Header"."Sell-to Customer No.","Sales Header"."Ship-to Code") then begin
					 CENTRO1:=RecEAD."Cod. entrega ECI";
				end;
				CENTRO:=RecCusto."Centro ECI";
				DPTO:='21900';
				NPEDIDO:=CopyStr("Sales Header"."Your Reference",1,8);
				/////NALBA:=COPYSTR("Sales Header"."Order No.",2,3)+COPYSTR("Sales Header"."Order No.",6,4);
				NALBA:=CopyStr("Sales Header"."Order No.",3,2)+CopyStr("Sales Header"."Order No.",6,5);
				contador:='00'+NALBA;
				CODBAR:='98'+DPTO+NPEDIDO+NALBA;
				DESCODBAR:='(98) '+DPTO+NPEDIDO+NALBA;
				dcentro:='90'+CENTRO1+CENTRO;
				dcentro1:='(91) '+CENTRO1+CENTRO;
				SUNABUL:=0;
				REC371.Reset;
				REC371.SetRange(REC371."Document No.","Sales Header"."No.");
				if REC371.FindFirst then repeat
					 if RecItem.Get(REC371."No.") then begin
						  if RecItem."Unidad expedicion ECI"<>0 then begin
							   SUNABUL:=SUNABUL+ROUND(REC371.Quantity/RecItem."Unidad expedicion ECI",1);
						  end;
					 end;
				until REC371.Next=0;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Work Order';
		Text001: label 'Sales Order No.';
		Text002: label 'Quantity used during work (Posted with the Sales Order)';
		Text003: label 'Quantity Used';
		Text004: label 'Comments';
		Text005: label 'Extra Item/Resource used during work (Posted with Item or Resource Journals)';
		ExcelBuf: Record "Excel Buffer" temporary;
		FormatAddr: Codeunit "Format Address";
		CustAddr: array [8] of Text[50];
		InfoEmpresa: array [8] of Text[30];
		PrintToExcel: Boolean;
		Text006: label 'Date';
		ESTANTE: Code[20];
		RecItem: Record Item;
		STOCK: Decimal;
		CompanyInfo: Record "Company Information";
		nombreprepara: Text[30];
		RecMulti: Record UnknownRecord50005;
		TELEFONO: Text[30];
		RecCusto: Record Customer;
		transport: Text[30];
		RecTra: Record "Shipping Agent";
		vendedor: Text[30];
		RecVende: Record "Salesperson/Purchaser";
		RecLC: Record "Sales Comment Line";
		Tex: array [4] of Text[255];
		conta: Integer;
		Rec37: Record "Sales Shipment Line";
		REC371: Record "Sales Shipment Line";
		tlinea: Decimal;
		CODIGO: Code[80];
		codebar: Code[23];
		ok: Integer;
		C1: Code[2];
		CENTRO: Code[4];
		DPTO: Code[5];
		NPEDIDO: Code[8];
		NALBA: Code[7];
		CODBAR: Code[28];
		DESCODBAR: Code[50];
		NBUL: Integer;
		TOTALBUL: Integer;
		prod: Record Item;
		RecEAD: Record "Ship-to Address";
		CENTRO1: Code[2];
		dcentro: Code[20];
		dcentro1: Code[20];
		nueva: Code[30];
		nueva1: Code[30];
		cantidad: Decimal;
		contador: Code[9];
		dc: Code[1];
		DIG1: array [17] of Code[1];
		DIG2: array [17] of Integer;
		SUMA1: Integer;
		XX: Integer;
		SUMA2: Integer;
		RESTO: Integer;
		SUNABUL: Decimal;

	procedure EncodeBarcode128(pText: Text[250]) RetVal: Text[250]
	var
		Checksum: Integer;
		i: Integer;
		currentchar: Char;
		StartChar: Char;
		StopChar: Char;
		ChecksumChar: Char;
	begin
		// How to encode a 128 barcode:
		//
		// Each character has a value ranging from 0 to 105. This value is used to calculate the check
		// character for each symbol.
		//
		// The check character is a Modulus 103 Checksum that is calculated by summing the start code
		// value plus the product of each character position (most significant character position equals 1)
		// and the character value of the character at that position. This sum is divided by 103. The
		// remainder of the answer is the value of the Check Character (which can be looked up from the
		// table). Every encoded character is included except the Stop and Check Character.
		//
		//
		// Example: BarCode 1
		// Message : Start B   B   a   r   C   o   d   e	  1
		// Value	  104	  34  65  82  35  79  68  69  0  17
		// Position:   -	   1   2   3   4   5   6   7   8  9
		// Calculate Total: 104 + (34x1) + (65x2) + (82x3) + (35x4) + (79x5) +
		//				  (68x6) + (69x7) + (0x8) + (17x9) = 2093
		// 2093/103 = 20 remainder 33
		// 33 = A
		// Final message: (Start B)BarCode 1(A)(STOP)
		StartChar:='┌';
		StopChar:='▄';
		Checksum:=104;
		for i:=1 to StrLen(pText) do begin
		  currentchar:=pText[i];
		  Checksum := Checksum +(i*(currentchar-32));
		end;
		ChecksumChar:= Checksum MOD 103;
		ChecksumChar:= ChecksumChar+32;
		// convert SPACE to ALT+0128
		pText:=ConvertStr(pText,' ','░');
		RetVal:=StrSubstNo('%1%2%3%4',StartChar,pText,ChecksumChar,StopChar);
		exit(RetVal);
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50084_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50084;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
