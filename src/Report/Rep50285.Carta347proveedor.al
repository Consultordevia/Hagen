
Report 50285 "Carta 347 proveedor"
{
    RDLCLayout = './Layouts/Carta347proveedor.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Vendor; Vendor)
        {
            CalcFields = "Inv. Amounts (LCY)", "Cr. Memo Amounts (LCY)";
            DataItemTableView = sorting("VAT Registration No.") where("VAT Registration No." = filter(<> ''));
            RequestFilterFields = "VAT Registration No.";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(CompanyAddr_2; CompanyAddr[2])
            {
            }
            column(CompanyAddr_1; CompanyAddr[1])
            {
            }
            column(CompanyAddr_5; CompanyAddr[5])
            {
            }
            column(CompanyAddr_4; CompanyAddr[4])
            {
            }
            column(CompanyAddr_3; CompanyAddr[3])
            {
            }
            column(CompanyInfo_Phone_No_; CompanyInfo."Phone No.")
            {
            }
            column(CompanyInfo_VAT_Registration_No_; CompanyInfo."VAT Registration No.")
            {
            }
            column(CompanyInfo_Fax_No_; CompanyInfo."Fax No.")
            {
            }
            column(ConfConLCYCode; ConfCon."LCY Code")
            {
            }
            column(InvAmounts_LCY__CrMemoAmounts_LCY_; "Inv. Amounts (LCY)" - "Cr. Memo Amounts (LCY)")
            {
                AutoFormatExpression = Vendor."Currency Code";
                AutoFormatType = 1;
            }
            column(IMP4; IMP4)
            {
                AutoFormatExpression = Vendor."Currency Code";
                AutoFormatType = 1;
            }
            column(IMP3; IMP3)
            {
                AutoFormatExpression = Vendor."Currency Code";
                AutoFormatType = 1;
            }
            column(Dichoimportesalvoerrorquerogamosnosconfirmenantesdelproximod; 'Dicho importe salvo error que rogamos nos confirmen antes del próximo día ' + Format(FechaConfirm) + ', será el que')
            {
            }
            column(IMP2; IMP2)
            {
                AutoFormatExpression = Vendor."Currency Code";
                AutoFormatType = 1;
            }
            column(IMP1; IMP1)
            {
                AutoFormatExpression = Vendor."Currency Code";
                AutoFormatType = 1;
            }
            column(deoperacionesrealizadasconUds_duranteelpasadoano_FORMAT_Desd; 'de operaciones realizadas con Uds., durante el pasado año ' + Format(DesdeFecha, 0, '<Year4>') + ' asciende a la cantidad de :')
            {
            }
            column(Algemesia_FORMAT_WORKDATE_0_4; 'Algemesi a ' + Format(WorkDate, 0, 4))
            {
            }
            column(County; Vendor.County)
            {
            }
            column(PostCode__City; "Post Code" + ' ' + City)
            {
            }
            column(Address2; Vendor."Address 2")
            {
            }
            column(Address; Vendor.Address)
            {
            }
            column(Name; Vendor.Name)
            {
            }
            column(VATRegistrationNo; Vendor."VAT Registration No.")
            {
            }
            column(RecIEName; RecIE.Name)
            {
            }
            trigger OnPreDataItem();
            begin
                SetRange("Date Filter", DesdeFecha, HastFec);
                RecIE.Get;
            end;

            trigger OnAfterGetRecord();
            begin
                if CODCIF <> Vendor."VAT Registration No." then begin
                    IMP1 := 0;
                    IMP2 := 0;
                    IMP3 := 0;
                    IMP4 := 0;
                    CODCIF := Vendor."VAT Registration No.";
                end;
                SetRange("Date Filter", DesdeFecha, HastFec);
                ImpVentas := ("Inv. Amounts (LCY)" - "Cr. Memo Amounts (LCY)");
                if ImpVentas <= ImpMin then
                    CurrReport.Skip;
                RecClie.Reset;
                RecClie.Get(Vendor."No.");
                RecClie.SetRange(RecClie."Date Filter", 20110101D, 20110331D);
                RecClie.CalcFields(RecClie."Inv. Amounts (LCY)", RecClie."Cr. Memo Amounts (LCY)");
                IMP1 := IMP1 + (RecClie."Inv. Amounts (LCY)" - RecClie."Cr. Memo Amounts (LCY)");
                RecClie.Reset;
                RecClie.Get(Vendor."No.");
                RecClie.SetRange(RecClie."Date Filter", 20110401D, 20110630D);
                RecClie.CalcFields(RecClie."Inv. Amounts (LCY)", RecClie."Cr. Memo Amounts (LCY)");
                IMP2 := IMP2 + (RecClie."Inv. Amounts (LCY)" - RecClie."Cr. Memo Amounts (LCY)");
                RecClie.Reset;
                RecClie.Get(Vendor."No.");
                RecClie.SetRange(RecClie."Date Filter", 20110701D, 20110930D);
                RecClie.CalcFields(RecClie."Inv. Amounts (LCY)", RecClie."Cr. Memo Amounts (LCY)");
                IMP3 := IMP3 + (RecClie."Inv. Amounts (LCY)" - RecClie."Cr. Memo Amounts (LCY)");
                RecClie.Reset;
                RecClie.Get(Vendor."No.");
                RecClie.SetRange(RecClie."Date Filter", 20111001D, 20111231D);
                RecClie.CalcFields(RecClie."Inv. Amounts (LCY)", RecClie."Cr. Memo Amounts (LCY)");
                IMP4 := IMP4 + (RecClie."Inv. Amounts (LCY)" - RecClie."Cr. Memo Amounts (LCY)");
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(DesdeFecha; DesdeFecha)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Desde fecha';
                    }
                    field(HastFec; HastFec)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Hasta fecha';
                    }
                    field(ImpMin; ImpMin)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Importe mayor que';
                    }
                    field(FechaConfirm; FechaConfirm)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Fecha de confirmación de error';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

        trigger OnOpenPage()
        begin
            if ImpMin = 0 then
                ImpMin := 3005.06;
        end;

    }

    trigger OnInitReport()
    begin
    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        if (DesdeFecha = 0D) or (HastFec = 0D) or (FechaConfirm = 0D) then
            Error('Indique la fecha inicial, final y confirmación de error.');
        Filtros := 'De ' + Format(DesdeFecha) + ' a ' + Format(HastFec) +
                   ', Importe >= ' + Format(ImpMin);
        ConfCon.Find('-');
        CompanyInfo.Get;
        CompanyInfo.CalcFields(CompanyInfo.Picture);
        FormatAddr.Company(CompanyAddr, CompanyInfo);
    end;

    var
        DesdeFecha: Date;
        HastFec: Date;
        ImpMin: Decimal;
        Filtros: Text[100];
        ConfCon: Record "General Ledger Setup";
        FechaConfirm: Date;
        ImpVentas: Decimal;
        RecIE: Record "Company Information";
        IMP1: Decimal;
        IMP2: Decimal;
        IMP3: Decimal;
        IMP4: Decimal;
        RecClie: Record Vendor;
        CODCIF: Code[20];
        CompanyInfo: Record "Company Information";
        CompanyAddr: array[8] of Text[60];
        FormatAddr: Codeunit "Format Address";
        FooterPrinted: Boolean;
        LastFieldNo: Integer;

    local procedure OnPreSectionTable23_GroupHeader1(var Vendor: Record Vendor);
    begin
        with Vendor do begin
            /////-ShowOutput := FooterPrinted;
            FooterPrinted := false;
        end;
    end;

    local procedure OnPreSectionTable23_Body2(var Vendor: Record Vendor);
    begin
        with Vendor do begin
            /////-ReportForNav.ShowOutput((Vendor."Inv. Amounts (LCY)" - Vendor."Cr. Memo Amounts (LCY)") >= ImpMin );
        end;
    end;

    local procedure OnPreSectionTable23_GroupFooter3(var Vendor: Record Vendor);
    begin
        with Vendor do begin
            if not FooterPrinted then
                /////-LastFieldNo := ReportForNav.TotalsCausedBy;
                /////-ReportForNav.ShowOutput := not FooterPrinted;
                FooterPrinted := true;
            /////-ReportForNav.ShowOutput(("Inv. Amounts (LCY)"-"Cr. Memo Amounts (LCY)")>ImpMin);
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNavOpenDesigner: Boolean;
        ReportForNavAllowDesign: Boolean;


}