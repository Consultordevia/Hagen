#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50022_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50022){}   
		type("System.IO.Path"; System_IO_Path50022) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50022 Albaran
{
	Caption = 'Sales - Shipment';
	RDLCLayout = './Layouts/Albaran.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Shipment Header";"Sales Shipment Header")
		{
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.","Sell-to Customer No.","No. Printed";
			RequestFilterHeading = 'Posted Sales Shipment';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number=const(1));
					column(ReportForNavId_3; 3) {} // Autogenerated by ForNav - Do not delete
					column(Nopedido__SalesShipmentHeaderOrderNo; 'Nº pedido: '+"Sales Shipment Header"."Order No.")
					{
					}
					column(Noexpedicion__SalesShipmentHeaderNoexpedicion; 'Nº expedición: '+"Sales Shipment Header"."Nº expedición")
					{
					}
					column(SearchName_RecClie; RecClie."Search Name")
					{
					}
					column(PhoneNo_RecClie; RecClie."Phone No.")
					{
					}
					column(RecTraName; RecTra.Name)
					{
					}
					column(Transportista; 'Transportista')
					{
					}
					column(SalesShipmentHeaderShipmentDate; "Sales Shipment Header"."Shipment Date")
					{
					}
					column(CompanyAddr6; CompanyAddr[6])
					{
					}
					column(CompanyAddr5; CompanyAddr[5])
					{
					}
					column(ShipToAddr8; ShipToAddr[8])
					{
					}
					column(ShipToAddr7; ShipToAddr[7])
					{
					}
					column(SalesShipmentHeaderYourReference; "Sales Shipment Header"."Your Reference")
					{
					}
					column(ReferenceText; ReferenceText)
					{
					}
					column(SalesShipmentHeaderNo; "Sales Shipment Header"."No.")
					{
					}
					column(SalesPurchPersonName; SalesPurchPerson.Name)
					{
					}
					column(SalesPersonText; SalesPersonText)
					{
					}
					column(SalesShipmentHeaderDocumentDate_0_4; Format("Sales Shipment Header"."Document Date",0,4))
					{
					}
					column(SalesShipmentHeaderSell_toCustomerNo; "Sales Shipment Header"."Sell-to Customer No.")
					{
					}
					column(CompanyInfoBankAccountNo; CompanyInfo."Bank Account No.")
					{
					}
					column(CompanyInfoBankName; CompanyInfo."Bank Name")
					{
					}
					column(CompanyInfoGiroNo; CompanyInfo."Giro No.")
					{
					}
					column(CompanyInfoVATRegistrationNo; CompanyInfo."VAT Registration No.")
					{
					}
					column(CompanyInfoFaxNo; CompanyInfo."Fax No.")
					{
					}
					column(ShipToAddr6; ShipToAddr[6])
					{
					}
					column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
					{
					}
					column(ShipToAddr5; ShipToAddr[5])
					{
					}
					column(CompanyAddr4; CompanyAddr[4])
					{
					}
					column(ShipToAddr4; ShipToAddr[4])
					{
					}
					column(CompanyAddr3; CompanyAddr[3])
					{
					}
					column(ShipToAddr3; ShipToAddr[3])
					{
					}
					column(CompanyAddr2; CompanyAddr[2])
					{
					}
					column(ShipToAddr2; ShipToAddr[2])
					{
					}
					column(CompanyAddr1; CompanyAddr[1])
					{
					}
					column(ShipToAddr1; ShipToAddr[1])
					{
					}
					column(STRSUBSTNO_Text003_FORMAT_ReportForNavPageNo_; StrSubstNo(Text003,Format(ReportForNav.PageNo)))
					{
					}
					column(STRSUBSTNO_Text002_CopyText; StrSubstNo(Text002,CopyText))
					{
					}
					column(CompanyInfoPicture; CompanyInfo.Picture)
					{
					}
					column(CompanyInfo1Picture; CompanyInfo1.Picture)
					{
					}
					column(CompanyInfo2Picture; CompanyInfo2.Picture)
					{
					}
					dataitem(DimensionLoop1;Integer)
					{
						DataItemLinkReference = SalesShipmentHeader;
						DataItemTableView = sorting(Number) where(Number=filter(1..));
						column(ReportForNavId_43; 43) {} // Autogenerated by ForNav - Do not delete
						column(DimText; DimText)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowInternalInfo then
							  CurrReport.Break;
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then begin
							  if not PostedDocDim1.Find('-') then
								CurrReport.Break;
							end else
							  if not Continue then
								CurrReport.Break;
							Clear(DimText);
							Continue := false;
							repeat
							  OldDimText := DimText;
							  if DimText = '' then
								DimText := StrSubstNo(
								  '%1 - %2',PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code")
							  else
								DimText :=
								  StrSubstNo(
									'%1; %2 - %3',DimText,
									PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code");
							  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
								DimText := OldDimText;
								Continue := true;
								exit;
							  end;
							until (PostedDocDim1.Next = 0);
						end;
						
					}
					dataitem("Sales Shipment Line";"Sales Shipment Line")
					{
						DataItemLink = "Document No."=field("No.");
						DataItemLinkReference = SalesShipmentHeader;
						DataItemTableView = sorting("Document No.","Line No.");
						column(ReportForNavId_45; 45) {} // Autogenerated by ForNav - Do not delete
						column(Description; "Sales Shipment Line".Description)
						{
						}
						column(beneficio; beneficio)
						{
						}
						column(precioreco; precioreco)
						{
						}
						column(Quantity; "Sales Shipment Line".Quantity)
						{
						}
						column(No; "Sales Shipment Line"."No.")
						{
						}
						dataitem(DimensionLoop2;Integer)
						{
							DataItemTableView = sorting(Number) where(Number=filter(1..));
							column(ReportForNavId_51; 51) {} // Autogenerated by ForNav - Do not delete
							column(DimText3; DimText)
							{
							}
							trigger OnPreDataItem();
							begin
								if not ShowInternalInfo then
								  CurrReport.Break;
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then begin
								  if not PostedDocDim2.Find('-') then
									CurrReport.Break;
								end else
								  if not Continue then
									CurrReport.Break;
								Clear(DimText);
								Continue := false;
								repeat
								  OldDimText := DimText;
								  if DimText = '' then
									DimText := StrSubstNo(
									  '%1 - %2',PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code")
								  else
									DimText :=
									  StrSubstNo(
										'%1; %2 - %3',DimText,
										PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code");
								  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
									DimText := OldDimText;
									Continue := true;
									exit;
								  end;
								until (PostedDocDim2.Next = 0);
							end;
							
						}
						trigger OnPreDataItem();
						begin
							MoreLines := Find('+');
							while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) do
							  MoreLines := Next(-1) <> 0;
							if not MoreLines then
							  CurrReport.Break;
							SetRange("Line No.",0,"Line No.");
						end;
						
						trigger OnAfterGetRecord();
						begin
							if "Sales Shipment Line".Quantity=0 then begin
								 CurrReport.Skip;
							end;
							if "Sales Shipment Line"."NO imprimir en albaran" then begin
								 CurrReport.Skip;
							end;
							if "Sales Shipment Header"."Usuario alta"='USERNWS' then begin
								 if "Sales Shipment Line"."Precio base"=0 then begin
									  "Sales Shipment Line"."Precio base":="Sales Shipment Line"."Unit Price";
								 end;
							end;
							if not ShowCorrectionLines and Correction then
							  CurrReport.Skip;
							PostedDocDim2.SetRange("Dimension Set ID", "Sales Shipment Line"."Dimension Set ID");
							precioreco:=0;
							if RecItem.Get("Sales Shipment Line"."No.") then begin
								 precioreco:=RecItem."Precio recomendado";
							end;
							RecTVP.Reset;
							RecTVP.SetRange(RecTVP."Item No.","Sales Shipment Line"."No.");
							RecTVP.SetRange(RecTVP."Sales Code","Sales Shipment Line"."Customer Price Group");
							if RecTVP.FindFirst then begin
								 precioreco:=RecTVP."Precio recomendado";
							end;
							///MESSAGE('%1',"Sales Shipment Line"."VAT Base Amount");
							beneficio:=0;
							if "Sales Shipment Line".Quantity<>0 then begin
								 if precioreco<>0 then begin
									  beneficio:=("Sales Shipment Line"."Item Charge Base Amount"/"Sales Shipment Line".Quantity)/precioreco*100;
								 end;
							end;
						end;
						
						trigger OnPostDataItem();
						begin
							// Item Tracking:
							/////IF ShowLotSN THEN
							  /////TrackingSpecCount := ItemTrackingMgt.RetrieveDocumentItemTracking(TrackingSpecBuffer,"Sales Shipment Header"."No.",
								/////DATABASE::"Sales Shipment Header",0);
						end;
						
					}
					dataitem(Total;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_53; 53) {} // Autogenerated by ForNav - Do not delete
					}
					dataitem(Total2;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_54; 54) {} // Autogenerated by ForNav - Do not delete
						column(SalesShipmentHeaderBill_toCustomerNo; "Sales Shipment Header"."Bill-to Customer No.")
						{
						}
						column(CustAddr8; CustAddr[8])
						{
						}
						column(CustAddr7; CustAddr[7])
						{
						}
						column(CustAddr6; CustAddr[6])
						{
						}
						column(CustAddr5; CustAddr[5])
						{
						}
						column(CustAddr4; CustAddr[4])
						{
						}
						column(CustAddr3; CustAddr[3])
						{
						}
						column(CustAddr2; CustAddr[2])
						{
						}
						column(CustAddr1; CustAddr[1])
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowCustAddr then
							  CurrReport.Break;
						end;
						
					}
					dataitem(ItemTrackingLine;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_64; 64) {} // Autogenerated by ForNav - Do not delete
						column(TrackingSpecBufferQuantity_Base_; TrackingSpecBuffer."Quantity (Base)")
						{
						}
						column(TrackingSpecBufferSerialNo; TrackingSpecBuffer."Serial No.")
						{
						}
						column(TrackingSpecBufferLotNo; TrackingSpecBuffer."Lot No.")
						{
						}
						column(TrackingSpecBufferDescription; TrackingSpecBuffer.Description)
						{
						}
						column(TrackingSpecBufferItemNo; TrackingSpecBuffer."Item No.")
						{
						}
						dataitem(TotalItemTracking;Integer)
						{
							DataItemTableView = sorting(Number) where(Number=const(1));
							column(ReportForNavId_70; 70) {} // Autogenerated by ForNav - Do not delete
							column(TotalQty; TotalQty)
							{
							}
						}
						trigger OnPreDataItem();
						begin
							if TrackingSpecCount = 0 then
							  CurrReport.Break;
							ReportForNav.NewPageWithoutTransportTotals;
							SetRange(Number,1,TrackingSpecCount);
							TrackingSpecBuffer.SetCurrentkey("Source ID","Source Type","Source Subtype","Source Batch Name",
							  "Source Prod. Order Line","Source Ref. No.");
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then
							  TrackingSpecBuffer.FindSet
							else
							  TrackingSpecBuffer.Next;
							ShowTotal := false;
							if ItemTrackingAppendix.IsStartNewGroup(TrackingSpecBuffer) then
							  ShowTotal := true;
						end;
						
					}
					trigger OnPreDataItem();
					begin
						// Item Tracking:
						if ShowLotSN then begin
						  TrackingSpecCount := 0;
						  OldRefNo := 0;
						  ShowGroup := false;
						end;
					end;
					
				}
				trigger OnPreDataItem();
				begin
					NoOfLoops := 1 + Abs(NoOfCopies);
					CopyText := '';
					SetRange(Number,1,NoOfLoops);
				end;
				
				trigger OnAfterGetRecord();
				begin
					if Number > 1 then
					  CopyText := Text001;
					
					TotalQty := 0;		   // Item Tracking
				end;
				
				trigger OnPostDataItem();
				begin
					if not CurrReport.Preview then
					  ShptCountPrinted.Run("Sales Shipment Header");
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				CurrReport.Language := Language.GetLanguageID("Language Code");
				if RespCenter.Get("Responsibility Center") then begin
				  FormatAddr.RespCenter(CompanyAddr,RespCenter);
				  CompanyInfo."Phone No." := RespCenter."Phone No.";
				  CompanyInfo."Fax No." := RespCenter."Fax No.";
				end else begin
				  FormatAddr.Company(CompanyAddr,CompanyInfo);
				end;
				PostedDocDim1.SetRange("Dimension Set ID", "Sales Shipment Header"."Dimension Set ID");
				DETALLEPVP:=false;
				if RecClie.Get("Sales Shipment Header"."Sell-to Customer No.") then begin
					 DETALLEPVP:=RecClie."Factura con PVP";
				end;
				if "Salesperson Code" = '' then begin
				  SalesPurchPerson.Init;
				  SalesPersonText := '';
				end else begin
				  SalesPurchPerson.Get("Salesperson Code");
				  SalesPersonText := Text000;
				end;
				if "Your Reference" = '' then
				  ReferenceText := ''
				else
				  ReferenceText := FieldCaption("Your Reference");
				FormatAddr.SalesShptShipTo(ShipToAddr,"Sales Shipment Header");
				FormatAddr.SalesShptBillTo(CustAddr,ShipToAddr,"Sales Shipment Header");
				ShowCustAddr := "Bill-to Customer No." <> "Sell-to Customer No.";
				for i := 1 to ArrayLen(CustAddr) do
				  if CustAddr[i] <> ShipToAddr[i] then
					ShowCustAddr := true;
				/*
				IF LogInteraction THEN
				  IF NOT CurrReport.PREVIEW THEN
					SegManagement.LogDocument(
					  5,"No.",0,0,DATABASE::Customer,"Sell-to Customer No.","Salesperson Code",
					  "Campaign No.","Posting Description",'');
				 */
				RecTra.Init;
				if RecTra.Get("Sales Shipment Header"."Shipping Agent Code") then begin
				end;
				RecClie.Init;
				if RecClie.Get("Sales Shipment Header"."Sell-to Customer No.") then begin
				end;
				/*
				IF USERID='20' THEN BEGIN
					 RecFP.GET("Sales Shipment Header"."Payment Method Code");
					 IF NOT RecFP.Reembolso THEN BEGIN
						  IF "Sales Shipment Header"."Shipping Agent Code"='DHL' THEN BEGIN
							   Rec110.RESET;
							   Rec110.SETRANGE(Rec110."No.","Sales Shipment Header"."No.");
							   IF Rec110.FINDFIRST THEN BEGIN
									CUEXP.EtiDHL2(Rec110);
							   END;
						  END;
						  IF "Sales Shipment Header"."Shipping Agent Code"='SEUR' THEN BEGIN
							   Rec110.RESET;
							   Rec110.SETRANGE(Rec110."No.","Sales Shipment Header"."No.");
							   IF Rec110.FINDFIRST THEN BEGIN
									CUEXP.EtiSEUR(Rec110);
							   END;
						  END;
					 END;
				END;
				 */
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies;NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowInternalInfo;ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
					field(LogInteraction;LogInteraction)
					{
						ApplicationArea = Basic;
						Caption = 'Log Interaction';
					}
					field("Show Correction Lines";ShowCorrectionLines)
					{
						ApplicationArea = Basic;
						Caption = 'Show Correction Lines';
					}
					field(ShowLotSN;ShowLotSN)
					{
						ApplicationArea = Basic;
						Caption = 'Show Serial/Lot Number Appendix';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			InitLogInteraction;
			; // TODO RequestRequestOptionsPage.LogInteraction.ENABLED(LogInteraction);
		end;

	}

	trigger OnInitReport()
	begin
		
		CompanyInfo.Get;
		SalesSetup.Get;
		case SalesSetup."Logo Position on Documents" of
		  SalesSetup."logo position on documents"::"No Logo":;
		  SalesSetup."logo position on documents"::Left:
			begin
			  CompanyInfo.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Center:
			begin
			  CompanyInfo1.Get;
			  CompanyInfo1.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Right:
			begin
			  CompanyInfo2.Get;
			  CompanyInfo2.CalcFields(Picture);
			end;
		end;
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if not CurrReport.UseRequestPage then
		  InitLogInteraction;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Salesperson';
		Text001: label 'COPY';
		Text002: label 'Sales - Shipment %1';
		Text003: label 'Page %1';
		SalesPurchPerson: Record "Salesperson/Purchaser";
		CompanyInfo: Record "Company Information";
		CompanyInfo1: Record "Company Information";
		CompanyInfo2: Record "Company Information";
		SalesSetup: Record "Sales & Receivables Setup";
		PostedDocDim1: Record "Dimension Set Entry";
		PostedDocDim2: Record "Dimension Set Entry";
		Language: Record Language;
		TrackingSpecBuffer: Record "Tracking Specification" temporary;
		ShptCountPrinted: Codeunit "Sales Shpt.-Printed";
		SegManagement: Codeunit SegManagement;
		ItemTrackingMgt: Codeunit "Item Tracking Management";
		RespCenter: Record "Responsibility Center";
		ItemTrackingAppendix: Report "Item Tracking Appendix";
		CustAddr: array [8] of Text[50];
		ShipToAddr: array [8] of Text[50];
		CompanyAddr: array [8] of Text[50];
		SalesPersonText: Text[20];
		ReferenceText: Text[30];
		MoreLines: Boolean;
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		TrackingSpecCount: Integer;
		OldRefNo: Integer;
		OldNo: Code[20];
		CopyText: Text[30];
		ShowCustAddr: Boolean;
		i: Integer;
		FormatAddr: Codeunit "Format Address";
		DimText: Text[120];
		OldDimText: Text[75];
		ShowInternalInfo: Boolean;
		Continue: Boolean;
		LogInteraction: Boolean;
		ShowCorrectionLines: Boolean;
		ShowLotSN: Boolean;
		ShowTotal: Boolean;
		ShowGroup: Boolean;
		TotalQty: Decimal;
		NewPage: Boolean;
		precioreco: Decimal;
		RecItem: Record Item;
		beneficio: Decimal;
		RecTra: Record "Shipping Agent";
		RecClie: Record Customer;
		RecTVP: Record "Sales Price";
		Rec110: Record "Sales Shipment Header";
		CUEXP: Codeunit UnknownCodeunit50010;
		RecFP: Record "Payment Method";
		INFOLINEA: Text[250];
		PV: Decimal;
		BF: Decimal;
		PV2: Decimal;
		DETALLEPVP: Boolean;
		Table111: Record "Sales Shipment Line";

	procedure InitLogInteraction()
	begin
		LogInteraction := SegManagement.FindInteractTmplCode(5) <> '';
	end;

	local procedure OnPreSectionPageLoop_Header1(var PageLoop : Record Integer);
	begin
		with PageLoop do begin
		  ReportForNav.ShowOutput(ShowLotSN and (TrackingSpecCount > 0));
		  NewPage := false;
		  if ShowLotSN and (TrackingSpecCount > 0) then
			NewPage := true;
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body3(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number = 1);
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body4(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number > 1);
		end;
	end;
	local procedure OnPreSectionTable111_Body6(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput(Type = 0);
		end;
	end;
	local procedure OnPreSectionTable111_Body7(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((Type = Type::"G/L Account") and (not ShowInternalInfo));
		end;
	end;
	local procedure OnPreSectionTable111_Body8(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput(
			(Type = Type::Item) or
			(Type = Type::"Fixed Asset") or
			((Type = Type::"G/L Account") and ShowInternalInfo));
		end;
	end;
	local procedure OnPreSectionTable111_Body9(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput(Type = Type::Resource);
		end;
	end;
	local procedure OnPreSectionDimensionLoop2_Body10(var DimensionLoop2 : Record Integer);
	begin
		with DimensionLoop2 do begin
		  ReportForNav.ShowOutput(Number = 1);
		end;
	end;
	local procedure OnPreSectionDimensionLoop2_Body11(var DimensionLoop2 : Record Integer);
	begin
		with DimensionLoop2 do begin
		  ReportForNav.ShowOutput(Number > 1);
		end;
	end;
	local procedure OnPreSectionTotal2_Body13(var Total2 : Record Integer);
	begin
		with Total2 do begin
		  ReportForNav.ShowOutput :=
			"Sales Shipment Header"."Bill-to Customer No." <> "Sales Shipment Header"."Sell-to Customer No.";
		end;
	end;
	local procedure OnPreSectionItemTrackingLine_Header15(var ItemTrackingLine : Record Integer);
	begin
		with ItemTrackingLine do begin
		  ReportForNav.ShowOutput(ShowLotSN and NewPage);
		end;
	end;
	local procedure OnPostSectionItemTrackingLine_Header15(var ItemTrackingLine : Record Integer);
	begin
		with ItemTrackingLine do begin
		  NewPage := false;
		end;
	end;
	local procedure OnPreSectionItemTrackingLine_Body16(var ItemTrackingLine : Record Integer);
	begin
		with ItemTrackingLine do begin
		  ShowGroup := false;
		  if (TrackingSpecBuffer."Source Ref. No." <> OldRefNo) or
			 (TrackingSpecBuffer."Item No." <> OldNo) then begin
			OldRefNo := TrackingSpecBuffer."Source Ref. No.";
			OldNo := TrackingSpecBuffer."Item No.";
			TotalQty := 0;
		  end
		  else
			ShowGroup := true;
		  TotalQty += TrackingSpecBuffer."Quantity (Base)";
		  ReportForNav.ShowOutput(ShowLotSN and not ShowGroup);
		end;
	end;
	local procedure OnPreSectionItemTrackingLine_Body17(var ItemTrackingLine : Record Integer);
	begin
		with ItemTrackingLine do begin
		  ReportForNav.ShowOutput(ShowLotSN and ShowGroup);
		end;
	end;
	local procedure OnPreSectionTotalItemTracking_Body18(var TotalItemTracking : Record Integer);
	begin
		with TotalItemTracking do begin
		  ReportForNav.ShowOutput(ShowLotSN and ShowTotal);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50022_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50022;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
