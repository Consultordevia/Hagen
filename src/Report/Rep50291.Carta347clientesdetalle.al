#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50291_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50291){}   
		type("System.IO.Path"; System_IO_Path50291) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50291 "Carta 347 clientes detalle"
{
	RDLCLayout = './Layouts/Carta347clientesdetalle.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Customer;Customer)
		{
			CalcFields = "Inv. Amounts (LCY)","Cr. Memo Amounts (LCY)";
			DataItemTableView = sorting("VAT Registration No.") where("VAT Registration No."=filter(<>''));
			RequestFilterFields = "VAT Registration No.","No.";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(Ano__FORMAT_ANO_Importe__FORMAT_ImpMin; 'Año: '+Format(AÑO)+' Importe: '+Format(ImpMin))
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
			{
			}
			column(TODAY_0_4; Format(Today,0,4))
			{
			}
			column(USERID; UserId)
			{
			}
			column(Cliente; 'Cliente')
			{
			}
			column(V1oTrim; '1º Trim.')
			{
				AutoFormatType = 1;
			}
			column(V2oTrim; '2º Trim.')
			{
				AutoFormatType = 1;
			}
			column(V3oTrim; '3º Trim.')
			{
				AutoFormatType = 1;
			}
			column(V4oTrim; '4º Trim.')
			{
				AutoFormatType = 1;
			}
			column(Total; 'Total')
			{
				AutoFormatType = 1;
			}
			column(IMP4; IMP4)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP2; IMP2)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP3; IMP3)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP1; IMP1)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP1_IMP2_IMP3_IMP4; IMP1+IMP2+IMP3+IMP4)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(VATRegistrationNo__Name; "VAT Registration No."+' '+Name)
			{
			}
			column(TIMP1; TIMP1)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(TIMP2; TIMP2)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(TIMP3; TIMP3)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(TIMP4; TIMP4)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			column(TIMP1_TIMP2_TIMP3_TIMP4; TIMP1+TIMP2+TIMP3+TIMP4)
			{
				AutoFormatExpression = Customer."Currency Code";
				AutoFormatType = 1;
			}
			trigger OnPreDataItem();
			begin
				LastFieldNo := FieldNo("VAT Registration No.");
				SetRange("Date Filter",DESDE[1],HASTA[4]);
				RecIE.Get;
			end;
			
			trigger OnAfterGetRecord();
			begin
				if CODCIF<>Customer."VAT Registration No." then begin
					 IMP1:=0;
					 IMP2:=0;
					 IMP3:=0;
					 IMP4:=0;
					 CODCIF:=Customer."VAT Registration No.";
				end;
				SetRange("Date Filter",DESDE[1],HASTA[4]);
				ImpVentas := ("Inv. Amounts (LCY)" - "Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Customer."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[1],HASTA[1]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP1 := IMP1 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Customer."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[2],HASTA[2]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP2 := IMP2 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Customer."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[3],HASTA[3]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP3 := IMP3 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Customer."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[4],HASTA[4]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP4 := IMP4 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				if ("Inv. Amounts (LCY)"-"Cr. Memo Amounts (LCY)")>ImpMin then begin
				TIMP1:=TIMP1+IMP1;
				TIMP2:=TIMP2+IMP2;
				TIMP3:=TIMP3+IMP3;
				TIMP4:=TIMP4+IMP4;
				Clear(OutText);
				OutText :=
				  Format("VAT Registration No.")+'#'+
				  Format(Name)+'#'+
				  Format(IMP1)+'#'+
				  Format(IMP2)+'#'+
				  Format(IMP3)+'#'+
				  Format(IMP4)+'#'+
				  Format(IMP1+IMP2+IMP3+IMP4);
				OutFile.Write(OutText);
				end;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field("AÑO";AÑO)
					{
						ApplicationArea = Basic;
						Caption = 'Desde fecha';
					}
					field(ImpMin;ImpMin)
					{
						ApplicationArea = Basic;
						Caption = 'Importe mayor que';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			if ImpMin = 0 then
			  ImpMin := 3005.06;
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if (AÑO = 0)  then
		  Error('Indique el año.');
		DESDE[1]:=Dmy2date(1,1,AÑO);
		HASTA[1]:=Dmy2date(31,3,AÑO);
		DESDE[2]:=Dmy2date(1,4,AÑO);
		HASTA[2]:=Dmy2date(30,6,AÑO);
		DESDE[3]:=Dmy2date(1,7,AÑO);
		HASTA[3]:=Dmy2date(30,9,AÑO);
		DESDE[4]:=Dmy2date(1,10,AÑO);
		HASTA[4]:=Dmy2date(31,12,AÑO);
		Filtros := 'De ' + Format(DESDE[1]) + ' a ' + Format(HASTA[4]) +
				   ', Importe >= ' + Format(ImpMin);
		ConfCon.Find('-');
		CompanyInfo.Get;
		CompanyInfo.CalcFields(CompanyInfo.Picture);
		FormatAddr.Company(CompanyAddr,CompanyInfo);
		// CLEAR(FILE);
		OutFile.TextMode := true;
		OutFile.WriteMode := true;
		ExternalFile := 'c:\copia\347.txt';
		OutFile.Create(ExternalFile);
		Clear(OutText);
		OutText :=
		  Format('CIF/NIF')+'#'+
		  Format('Nombre')+'#'+
		  Format('1 trimestre')+'#'+
		  Format('2 trimestre')+'#'+
		  Format('3 trimestre')+'#'+
		  Format('4 trimestre')+'#'+
		  Format('Total');
		OutFile.Write(OutText);
		;ReportsForNavPre;
	end;
	var
		LastFieldNo: Integer;
		FooterPrinted: Boolean;
		Desdefecha: Date;
		FechaConfirm: Date;
		TImpVentas: Decimal;
		ImpVentas: Decimal;
		RecIE: Record "Company Information";
		ConfCon: Record "General Ledger Setup";
		HastFec: Date;
		ImpMin: Decimal;
		Filtros: Text[250];
		IMP1: Decimal;
		IMP2: Decimal;
		IMP3: Decimal;
		IMP4: Decimal;
		RecClie: Record Customer;
		CODCIF: Code[20];
		CompanyInfo: Record "Company Information";
		CompanyAddr: array [8] of Text[60];
		FormatAddr: Codeunit "Format Address";
		DESDE: array [4] of Date;
		HASTA: array [4] of Date;
		"AÑO": Integer;
		TIMP1: Decimal;
		TIMP2: Decimal;
		TIMP3: Decimal;
		TIMP4: Decimal;
		OutFile: File;
		ExternalFile: Text[1024];
		OutText: Text[1024];

	local procedure OnPreSectionCustomer_GroupHeader3(var Customer : Record Customer);
	begin
		with Customer do begin
		  ReportForNav.ShowOutput := FooterPrinted;
		  FooterPrinted := false;
		end;
	end;
	local procedure OnPreSectionCustomer_GroupHeader4(var Customer : Record Customer);
	begin
		with Customer do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = Customer.FieldNo("VAT Registration No.");
		end;
	end;
	local procedure OnPreSectionCustomer_GroupHeader5(var Customer : Record Customer);
	begin
		with Customer do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = LastFieldNo;
		end;
	end;
	local procedure OnPreSectionCustomer_GroupFooter7(var Customer : Record Customer);
	begin
		with Customer do begin
		  if not FooterPrinted then
			LastFieldNo := ReportForNav.TotalsCausedBy;
		  ReportForNav.ShowOutput := not FooterPrinted;
		  FooterPrinted := true;
		  ReportForNav.ShowOutput(("Inv. Amounts (LCY)"-"Cr. Memo Amounts (LCY)")>ImpMin);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50291_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50291;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
