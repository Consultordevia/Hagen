#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50043_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50043){}   
		type("System.IO.Path"; System_IO_Path50043) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50043 "Abono Venta PDF"
{
	Caption = 'Sales - Credit Memo';
	Permissions = TableData "Sales Shipment Buffer"=rimd;
	RDLCLayout = './Layouts/AbonoVentaPDF.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Cr.Memo Header";"Sales Cr.Memo Header")
		{
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.","Sell-to Customer No.","No. Printed";
			RequestFilterHeading = 'Posted Sales Credit Memo';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(CIF_CompanyInfoVATRegistrationNo; 'CIF. '+CompanyInfo."VAT Registration No.")
			{
			}
			column(TelEspana__34961200945TelPortugal__351308803400; 'Tel.España: +34 96 120 09 45  Tel.Portugal: +351 308 803 400')
			{
			}
			column(TextoLiq2; TextoLiq[2])
			{
			}
			column(TextoLiq1; TextoLiq[1])
			{
			}
			column(SalesCrMemoLineAmount_1; "Sales Cr.Memo Line".Amount*-1)
			{
				AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
				AutoFormatType = 1;
			}
			column(SalesCrMemoLineAmountIncludingVAT_1_SalesCrMemoLineAmount_1; "Sales Cr.Memo Line"."Amount Including VAT"*-1 - "Sales Cr.Memo Line".Amount*-1)
			{
				AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
				AutoFormatType = 1;
			}
			column(SalesCrMemoLineAmountIncludingVAT_1; "Sales Cr.Memo Line"."Amount Including VAT"*-1)
			{
				AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
				AutoFormatType = 1;
			}
			column(TotalInclVATText; TotalInclVATText)
			{
			}
			column(VATAmountLineVATAmountText; VATAmountLine.VATAmountText)
			{
			}
			column(TotalExclVATText; TotalExclVATText)
			{
			}
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_12; 12) {} // Autogenerated by ForNav - Do not delete
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number=const(1));
					column(ReportForNavId_13; 13) {} // Autogenerated by ForNav - Do not delete
					column(Nodocexterno__FORMAT_SalesCrMemoHeaderExternalDocumentNo; 'Nº doc. externo.:'+Format("Sales Cr.Memo Header"."External Document No."))
					{
					}
					column(ABONO; 'ABONO')
					{
					}
					column(CIF_CustVATRegistrationNo; 'C.I.F. '+Cust."VAT Registration No.")
					{
					}
					column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005,Format(ReportForNav.PageNo)))
					{
					}
					column(SearchName_Cust; Cust."Search Name")
					{
					}
					column(DireccionPostal; 'Dirección Postal')
					{
					}
					column(SalesCrMemoHeaderPostingDate; "Sales Cr.Memo Header"."Posting Date")
					{
					}
					column(CustAddr7; CustAddr[7])
					{
					}
					column(Fecha; 'Fecha')
					{
					}
					column(SalesCrMemoHeaderNo; "Sales Cr.Memo Header"."No.")
					{
					}
					column(SalesPurchPersonName; SalesPurchPerson.Name)
					{
					}
					column(SalesPersonText; SalesPersonText)
					{
					}
					column(SalesCrMemoHeaderBill_toCustomerNo; "Sales Cr.Memo Header"."Bill-to Customer No.")
					{
					}
					column(CustAddr6; CustAddr[6])
					{
					}
					column(CustAddr5; CustAddr[5])
					{
					}
					column(CustAddr4; CustAddr[4])
					{
					}
					column(CustAddr3; CustAddr[3])
					{
					}
					column(CustAddr2; CustAddr[2])
					{
					}
					column(CustAddr1; CustAddr[1])
					{
					}
					column(CustAddrdf7; CustAddrdf[7])
					{
					}
					column(CustAddrdf6; CustAddrdf[6])
					{
					}
					column(CustAddrdf5; CustAddrdf[5])
					{
					}
					column(CustAddrdf4; CustAddrdf[4])
					{
					}
					column(CustAddrdf3; CustAddrdf[3])
					{
					}
					column(CustAddrdf2; CustAddrdf[2])
					{
					}
					column(DireccionFiscal; 'Dirección Fiscal')
					{
					}
					column(CustAddrdf1; CustAddrdf[1])
					{
					}
					dataitem(DimensionLoop1;Integer)
					{
						DataItemLinkReference = SalesCrMemoHeader;
						DataItemTableView = sorting(Number) where(Number=filter(1..));
						column(ReportForNavId_41; 41) {} // Autogenerated by ForNav - Do not delete
						column(DimText; DimText)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowInternalInfo then
							  CurrReport.Break;
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then begin
							  if not PostedDocDim1.Find('-') then
								CurrReport.Break;
							end else
							  if not Continue then
								CurrReport.Break;
							Clear(DimText);
							Continue := false;
							repeat
							  OldDimText := DimText;
							  if DimText = '' then
								DimText := StrSubstNo(
								  '%1 %2',PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code")
							  else
								DimText :=
								  StrSubstNo(
									'%1, %2 %3',DimText,
									PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code");
							  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
								DimText := OldDimText;
								Continue := true;
								exit;
							  end;
							until (PostedDocDim1.Next = 0);
						end;
						
					}
					dataitem("Sales Cr.Memo Line";"Sales Cr.Memo Line")
					{
						DataItemLink = "Document No."=field("No.");
						DataItemLinkReference = SalesCrMemoHeader;
						DataItemTableView = sorting("Document No.","Line No.");
						column(ReportForNavId_43; 43) {} // Autogenerated by ForNav - Do not delete
						column(LineAmount; "Sales Cr.Memo Line"."Line Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Description; "Sales Cr.Memo Line".Description)
						{
						}
						column(CorrectedInvoiceNo; "Corrected Invoice No.")
						{
						}
						column(SalesCrMemoLineVATPct; "Sales Cr.Memo Line"."VAT %")
						{
						}
						column(LineAmount_1; "Line Amount"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(UnitPrice; "Sales Cr.Memo Line"."Unit Price")
						{
							AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
							AutoFormatType = 2;
						}
						column(Quantity_1; Quantity*-1)
						{
						}
						column(No; "Sales Cr.Memo Line"."No.")
						{
						}
						column(LineAmount3; "Sales Cr.Memo Line"."Line Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(InvDiscountAmount; -"Inv. Discount Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(PmtDiscGivenAmount; -"Pmt. Disc. Given Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(LineAmount_InvDiscountAmount_PmtDiscGivenAmount_AmountInclud; -("Line Amount" - "Inv. Discount Amount" -"Pmt. Disc. Given Amount" - "Amount Including VAT"))
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						dataitem("Sales Shipment Buffer";Integer)
						{
							DataItemTableView = sorting(Number);
							column(ReportForNavId_56; 56) {} // Autogenerated by ForNav - Do not delete
							column(SalesShipmentBufferQuantity; SalesShipmentBuffer.Quantity)
							{
								DecimalPlaces = 0:5;
							}
							column(SalesShipmentBufferPostingDate; SalesShipmentBuffer."Posting Date")
							{
							}
							trigger OnPreDataItem();
							begin
								SetRange(Number,1,SalesShipmentBuffer.Count);
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then
								  SalesShipmentBuffer.Find('-')
								else
								  SalesShipmentBuffer.Next;
							end;
							
						}
						dataitem(DimensionLoop2;Integer)
						{
							DataItemTableView = sorting(Number) where(Number=filter(1..));
							column(ReportForNavId_59; 59) {} // Autogenerated by ForNav - Do not delete
							column(DimText3; DimText)
							{
							}
							trigger OnPreDataItem();
							begin
								if not ShowInternalInfo then
								  CurrReport.Break;
								PostedDocDim2.SetRange("Dimension Set ID", "Sales Cr.Memo Line"."Dimension Set ID");
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then begin
								  if not PostedDocDim2.Find('-') then
									CurrReport.Break;
								end else
								  if not Continue then
									CurrReport.Break;
								Clear(DimText);
								Continue := false;
								repeat
								  OldDimText := DimText;
								  if DimText = '' then
									DimText := StrSubstNo(
									  '%1 %2',PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code")
								  else
									DimText :=
									  StrSubstNo(
										'%1, %2 %3',DimText,
										PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code");
								  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
									DimText := OldDimText;
									Continue := true;
									exit;
								  end;
								until (PostedDocDim2.Next = 0);
							end;
							
						}
						trigger OnPreDataItem();
						begin
							VATAmountLine.DeleteAll;
							SalesShipmentBuffer.Reset;
							SalesShipmentBuffer.DeleteAll;
							FirstValueEntryNo := 0;
							MoreLines := Find('+');
							while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
							  MoreLines := Next(-1) <> 0;
							if not MoreLines then
							  CurrReport.Break;
							SetRange("Line No.",0,"Line No.");
						end;
						
						trigger OnAfterGetRecord();
						begin
							SalesShipmentBuffer.DeleteAll;
							PostedReceiptDate := 0D;
							if Quantity <> 0 then
							  PostedReceiptDate := FindPostedShipmentDate;
							if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
							  "No." := '';
							if VATPostingSetup.Get("Sales Cr.Memo Line"."VAT Bus. Posting Group","Sales Cr.Memo Line"."VAT Prod. Posting Group") then begin
								VATAmountLine.Init;
								VATAmountLine."VAT Identifier" := "VAT Identifier";
								VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
								VATAmountLine."Tax Group Code" := "Tax Group Code";
								VATAmountLine."VAT %" := VATPostingSetup."VAT %";
								VATAmountLine."EC %" := VATPostingSetup."EC %";
								VATAmountLine."VAT Base" := "Sales Cr.Memo Line".Amount;
								VATAmountLine."Amount Including VAT" := "Sales Cr.Memo Line"."Amount Including VAT";
								VATAmountLine."Line Amount" := "Line Amount";
								VATAmountLine."Pmt. Disc. Given Amount" := "Pmt. Disc. Given Amount";
								VATAmountLine.SetCurrencyCode("Sales Cr.Memo Header"."Currency Code");
								if "Allow Invoice Disc." then
								  VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
								VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
								VATAmountLine."VAT Difference" := "VAT Difference";
								VATAmountLine."EC Difference" := "EC Difference";
								if "Sales Cr.Memo Header"."Prices Including VAT" then
								  VATAmountLine."Prices Including VAT" := true;
								VATAmountLine.InsertLine;
							end;
						end;
						
					}
					dataitem(VATCounter;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_61; 61) {} // Autogenerated by ForNav - Do not delete
						column(VATAmountLineECAmount; VATAmountLine."EC Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineInvoiceDiscountAmount_VATAmountLinePmtDiscGiven; VATAmountLine."Invoice Discount Amount" + VATAmountLine."Pmt. Disc. Given Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineInvDiscBaseAmount; VATAmountLine."Inv. Disc. Base Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineLineAmount; VATAmountLine."Line Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATAmount; VATAmountLine."VAT Amount")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVAT_ECBase; VATAmountLine."VAT Base")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineECPct; VATAmountLine."EC %")
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineECAmount_1; VATAmountLine."EC Amount"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATIdentifier; VATAmountLine."VAT Identifier")
						{
						}
						column(VATAmountLineInvoiceDiscountAmount_1_VATAmountLinePmtDiscGiv; VATAmountLine."Invoice Discount Amount"*-1  + VATAmountLine."Pmt. Disc. Given Amount"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineInvDiscBaseAmount_1; VATAmountLine."Inv. Disc. Base Amount"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineLineAmount_1; VATAmountLine."Line Amount"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATAmount_1; VATAmountLine."VAT Amount"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVAT_ECBase_1; VATAmountLine."VAT Base"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATPct; VATAmountLine."VAT %")
						{
							DecimalPlaces = 0:6;
						}
						column(VATAmountLineInvoiceDiscountAmount_1_VATAmountLinePmtDiscGi2; VATAmountLine."Invoice Discount Amount"*-1 + VATAmountLine."Pmt. Disc. Given Amount"*-1)
						{
							AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
							AutoFormatType = 1;
						}
						trigger OnPreDataItem();
						begin
							if (VATAmountLine.GetTotalVATAmount = 0) and (VATAmountLine."VAT %" + VATAmountLine."EC %" = 0) then
							  CurrReport.Break;
							SetRange(Number,1,VATAmountLine.Count);
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
						end;
						
					}
					dataitem(VATCounterLCY;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_78; 78) {} // Autogenerated by ForNav - Do not delete
						trigger OnPreDataItem();
						begin
							if (not GLSetup."Print VAT specification in LCY") or
							   ("Sales Cr.Memo Header"."Currency Code"  = '') or
							   (VATAmountLine.GetTotalVATAmount = 0) then
							  CurrReport.Break;
							SetRange(Number,1,VATAmountLine.Count);
							if GLSetup."LCY Code" = '' then
							  VALSpecLCYHeader := Text008 + Text009
							else
							  VALSpecLCYHeader := Text008 + Format(GLSetup."LCY Code");
							CurrExchRate.FindCurrency("Sales Cr.Memo Header"."Posting Date","Sales Cr.Memo Header"."Currency Code",1);
							CalculatedExchRate := ROUND(1 / "Sales Cr.Memo Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount",0.000001);
							VALExchRate := StrSubstNo(Text010,CalculatedExchRate,CurrExchRate."Exchange Rate Amount");
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
							VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Sales Cr.Memo Header"."Currency Factor");
							VALVATAmountLCY := ROUND(VATAmountLine."VAT Amount" / "Sales Cr.Memo Header"."Currency Factor");
						end;
						
					}
					dataitem(Total;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_79; 79) {} // Autogenerated by ForNav - Do not delete
					}
					dataitem(Total2;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_80; 80) {} // Autogenerated by ForNav - Do not delete
						trigger OnPreDataItem();
						begin
							if not ShowShippingAddr then
							  CurrReport.Break;
						end;
						
					}
				}
				trigger OnPreDataItem();
				begin
					NoOfLoops := Abs(NoOfCopies) + 1;
					CopyText := '';
					SetRange(Number,1,NoOfLoops);
				end;
				
				trigger OnAfterGetRecord();
				begin
					
					if Number > 1 then
					  CopyText := Text004;
				end;
				
				trigger OnPostDataItem();
				begin
					if not CurrReport.Preview then
					  SalesCrMemoCountPrinted.Run("Sales Cr.Memo Header");
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				
				if Exists('\\192.168.0.225\compartido\CABECERA.BMP') then begin
					 "Sales Cr.Memo Header"."Logo cabecera".Import('\\192.168.0.225\compartido\CABECERA.BMP',false);
				end;
				CurrReport.Language := Language.GetLanguageID("Language Code");
				CompanyInfo.Get;
				if RespCenter.Get("Responsibility Center") then begin
				  FormatAddr.RespCenter(CompanyAddr,RespCenter);
				  CompanyInfo."Phone No." := RespCenter."Phone No.";
				  CompanyInfo."Fax No." := RespCenter."Fax No.";
				end else begin
				  FormatAddr.Company(CompanyAddr,CompanyInfo);
				end;
				PostedDocDim1.SetRange("Dimension Set ID", "Sales Cr.Memo Header"."Dimension Set ID");
				if "Return Order No." = '' then
				  ReturnOrderNoText := ''
				else
				  ReturnOrderNoText := FieldCaption("Return Order No.");
				if "Salesperson Code" = '' then begin
				  SalesPurchPerson.Init;
				  SalesPersonText := '';
				end else begin
				  SalesPurchPerson.Get("Salesperson Code");
				  SalesPersonText := Text000;
				end;
				if "Your Reference" = '' then
				  ReferenceText := ''
				else
				  ReferenceText := FieldCaption("Your Reference");
				if "VAT Registration No." = '' then
				  VATNoText := ''
				else
				  VATNoText := FieldCaption("VAT Registration No.");
				if "Currency Code" = '' then begin
				  GLSetup.TestField("LCY Code");
				  TotalText := StrSubstNo(Text001,GLSetup."LCY Code");
				  TotalInclVATText := StrSubstNo(Text002,GLSetup."LCY Code");
				  TotalExclVATText := StrSubstNo(Text007,GLSetup."LCY Code");
				end else begin
				  TotalText := StrSubstNo(Text001,"Currency Code");
				  TotalInclVATText := StrSubstNo(Text002,"Currency Code");
				  TotalExclVATText := StrSubstNo(Text007,"Currency Code");
				end;
				FormatAddr.SalesCrMemoBillTo(CustAddr,"Sales Cr.Memo Header");
				if "Applies-to Doc. No." = '' then
				  AppliedToText := ''
				else
				  AppliedToText := StrSubstNo(Text003,"Applies-to Doc. Type","Applies-to Doc. No.");
				FormatAddr.SalesCrMemoShipTo(ShipToAddr,CustAddr,"Sales Cr.Memo Header");
				ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
				for i := 1 to ArrayLen(ShipToAddr) do
				  if ShipToAddr[i] <> CustAddr[i] then
					ShowShippingAddr := true;
				/*
				IF LogInteraction THEN
				  IF NOT CurrReport.PREVIEW THEN
					SegManagement.LogDocument(
					  6,"No.",0,0,DATABASE::Customer,"Sell-to Customer No.","Salesperson Code",
					  "Campaign No.","Posting Description",'');
				 */
				CustAddrdf[1]:=CustAddr[1];
				CustAddrdf[2]:=CustAddr[2];
				CustAddrdf[3]:=CustAddr[3];
				CustAddrdf[4]:=CustAddr[4];
				CustAddrdf[5]:=CustAddr[5];
				CustAddrdf[6]:=CustAddr[6];
				CustAddrdf[7]:=CustAddr[7];
				CustAddrdf[8]:=CustAddr[8];
				Cust.Get("Sales Cr.Memo Header"."Sell-to Customer No.");
				/*
				IF "Sales Cr.Memo Header"."Ship-to Code"<>'' THEN BEGIN
					 FormatAddr.SalesCrMemoShipTo(CustAddr,"Sales Cr.Memo Header");
				END;
				*/
				RecEAD.Reset;
				RecEAD.SetRange(RecEAD."Customer No.","Sales Cr.Memo Header"."Sell-to Customer No.");
				RecEAD.SetRange(RecEAD."Dirección postal",true);
				if RecEAD.FindFirst then begin
					 CustAddr[1]:=RecEAD.Name;
					 CustAddr[2]:=RecEAD."Name 2";
					 CustAddr[3]:=RecEAD.Address;
					 CustAddr[4]:=RecEAD."Address 2";
					 CustAddr[5]:=RecEAD."Post Code"+' '+RecEAD.City;
					 CustAddr[6]:=RecEAD.County;
				///	 CustAddr[7]:=
				///	 CustAddr[8]:=
				end;
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies;NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowInternalInfo;ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
					field(LogInteraction;LogInteraction)
					{
						ApplicationArea = Basic;
						Caption = 'Log Interaction';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			LogInteraction := SegManagement.FindInteractTmplCode(6) <> '';
			; // TODO RequestRequestOptionsPage.LogInteraction.ENABLED(LogInteraction);
		end;

	}

	trigger OnInitReport()
	begin
		GLSetup.Get;
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if not CurrReport.UseRequestPage then
		  InitLogInteraction;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Salesperson';
		Text001: label 'Total %1';
		Text002: label 'Total %1 Incl. VAT';
		Text003: label '(Applies to %1 %2)';
		Text004: label 'COPY';
		Text005: label 'Sales - Credit Memo %1';
		Text006: label 'Page %1';
		Text007: label 'Total %1 Excl. VAT';
		GLSetup: Record "General Ledger Setup";
		SalesPurchPerson: Record "Salesperson/Purchaser";
		CompanyInfo: Record "Company Information";
		VATAmountLine: Record "VAT Amount Line" temporary;
		PostedDocDim1: Record "Dimension Set Entry";
		PostedDocDim2: Record "Dimension Set Entry";
		Language: Record Language;
		SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
		CurrExchRate: Record "Currency Exchange Rate";
		SalesCrMemoCountPrinted: Codeunit "Sales Cr. Memo-Printed";
		FormatAddr: Codeunit "Format Address";
		CustAddrdf: array [8] of Text[80];
		SegManagement: Codeunit SegManagement;
		RespCenter: Record "Responsibility Center";
		CustAddr: array [8] of Text[80];
		ShipToAddr: array [8] of Text[80];
		CompanyAddr: array [8] of Text[80];
		ReturnOrderNoText: Text[30];
		SalesPersonText: Text[30];
		VATNoText: Text[30];
		ReferenceText: Text[30];
		AppliedToText: Text[40];
		TotalText: Text[50];
		TotalExclVATText: Text[50];
		TotalInclVATText: Text[50];
		MoreLines: Boolean;
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		CopyText: Text[30];
		ShowShippingAddr: Boolean;
		i: Integer;
		DimText: Text[120];
		OldDimText: Text[75];
		ShowInternalInfo: Boolean;
		Continue: Boolean;
		LogInteraction: Boolean;
		FirstValueEntryNo: Integer;
		PostedReceiptDate: Date;
		NextEntryNo: Integer;
		VALVATBaseLCY: Decimal;
		VALVATAmountLCY: Decimal;
		Text008: label 'VAT Amount Specification in ';
		Text009: label 'Local Currency';
		Text010: label 'Exchange rate: %1/%2';
		VALSpecLCYHeader: Text[80];
		VALExchRate: Text[50];
		CalculatedExchRate: Decimal;
		Text011: label 'Sales - Prepmt. Credit Memo %1';
		VATPostingSetup: Record "VAT Posting Setup";
		Text1100001: label 'Sales - Corrective invoice %1';
		Cust: Record Customer;
		RecEAD: Record "Ship-to Address";
		TextoLiq: array [12] of Text[100];
		Rec21: Record "Cust. Ledger Entry";
		DOCLIQ: Code[20];
		IMPPDTELIQ: Decimal;
		Table114: Record "Sales Cr.Memo Header";
		Table115: Record "Sales Cr.Memo Line";

	procedure InitLogInteraction()
	begin
		LogInteraction := SegManagement.FindInteractTmplCode(6) <> '';
	end;

	procedure FindPostedShipmentDate(): Date
	var
		ReturnReceiptHeader: Record "Return Receipt Header";
		SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
	begin
		NextEntryNo := 1;
		if "Sales Cr.Memo Line"."Return Receipt No." <> '' then
		  if ReturnReceiptHeader.Get("Sales Cr.Memo Line"."Return Receipt No.") then
			exit(ReturnReceiptHeader."Posting Date");
		case "Sales Cr.Memo Line".Type of
		  "Sales Cr.Memo Line".Type::Item:
			GenerateBufferFromValueEntry("Sales Cr.Memo Line");
		  "Sales Cr.Memo Line".Type::"G/L Account","Sales Cr.Memo Line".Type::Resource,
		  "Sales Cr.Memo Line".Type::"Charge (Item)","Sales Cr.Memo Line".Type::"Fixed Asset":
			 GenerateBufferFromShipment("Sales Cr.Memo Line");
		  "Sales Cr.Memo Line".Type::" ":
			  exit(0D);
		end;
		SalesShipmentBuffer.Reset;
		SalesShipmentBuffer.SetRange("Document No.","Sales Cr.Memo Line"."Document No.");
		SalesShipmentBuffer.SetRange("Line No." ,"Sales Cr.Memo Line"."Line No.");
		if SalesShipmentBuffer.Find('-') then begin
		  SalesShipmentBuffer2 := SalesShipmentBuffer;
			if SalesShipmentBuffer.Next = 0 then begin
			  SalesShipmentBuffer.Get(SalesShipmentBuffer2."Document No.",SalesShipmentBuffer2."Line No.",SalesShipmentBuffer2."Entry No."
		);
			  SalesShipmentBuffer.Delete;
			  exit(SalesShipmentBuffer2."Posting Date");;
			end;
		   SalesShipmentBuffer.CalcSums(Quantity);
		   if SalesShipmentBuffer.Quantity <> "Sales Cr.Memo Line".Quantity then begin
			 SalesShipmentBuffer.DeleteAll;
			 exit("Sales Cr.Memo Header"."Posting Date");
		   end;
		end else
		  exit("Sales Cr.Memo Header"."Posting Date");
	end;

	procedure GenerateBufferFromValueEntry(SalesCrMemoLine2: Record "Sales Cr.Memo Line")
	var
		ValueEntry: Record "Value Entry";
		ItemLedgerEntry: Record "Item Ledger Entry";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
		TotalQuantity := SalesCrMemoLine2."Quantity (Base)";
		ValueEntry.SetCurrentkey("Document No.");
		ValueEntry.SetRange("Document No.",SalesCrMemoLine2."Document No.");
		ValueEntry.SetRange("Posting Date","Sales Cr.Memo Header"."Posting Date");
		ValueEntry.SetRange("Item Charge No.",'');
		ValueEntry.SetFilter("Entry No.",'%1..',FirstValueEntryNo);
		if ValueEntry.Find('-') then
		  repeat
			if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then begin
			  if SalesCrMemoLine2."Qty. per Unit of Measure" <> 0 then
				Quantity := ValueEntry."Invoiced Quantity" / SalesCrMemoLine2."Qty. per Unit of Measure"
			  else
				Quantity := ValueEntry."Invoiced Quantity";
			  AddBufferEntry(
				SalesCrMemoLine2,
				-Quantity,
				ItemLedgerEntry."Posting Date");
			  TotalQuantity := TotalQuantity - ValueEntry."Invoiced Quantity";
			end;
			FirstValueEntryNo := ValueEntry."Entry No." + 1;
		  until (ValueEntry.Next = 0) or (TotalQuantity = 0);
	end;

	procedure GenerateBufferFromShipment(SalesCrMemoLine: Record "Sales Cr.Memo Line")
	var
		SalesCrMemoHeader: Record "Sales Cr.Memo Header";
		SalesCrMemoLine2: Record "Sales Cr.Memo Line";
		ReturnReceiptHeader: Record "Return Receipt Header";
		ReturnReceiptLine: Record "Return Receipt Line";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
		TotalQuantity := 0;
		SalesCrMemoHeader.SetCurrentkey("Return Order No.");
		SalesCrMemoHeader.SetFilter("No.",'..%1',"Sales Cr.Memo Header"."No.");
		SalesCrMemoHeader.SetRange("Return Order No.","Sales Cr.Memo Header"."Return Order No.");
		if SalesCrMemoHeader.Find('-') then
		  repeat
			SalesCrMemoLine2.SetRange("Document No.",SalesCrMemoHeader."No.");
			SalesCrMemoLine2.SetRange("Line No.",SalesCrMemoLine."Line No.");
			SalesCrMemoLine2.SetRange(Type,SalesCrMemoLine.Type);
			SalesCrMemoLine2.SetRange("No.",SalesCrMemoLine."No.");
			SalesCrMemoLine2.SetRange("Unit of Measure Code",SalesCrMemoLine."Unit of Measure Code");
			if SalesCrMemoLine2.Find('-') then
			  repeat
				TotalQuantity := TotalQuantity + SalesCrMemoLine2.Quantity;
			  until SalesCrMemoLine2.Next = 0;
		  until SalesCrMemoHeader.Next = 0;
		ReturnReceiptLine.SetCurrentkey("Return Order No.","Return Order Line No.");
		ReturnReceiptLine.SetRange("Return Order No.","Sales Cr.Memo Header"."Return Order No.");
		ReturnReceiptLine.SetRange("Return Order Line No.",SalesCrMemoLine."Line No.");
		ReturnReceiptLine.SetRange("Line No.",SalesCrMemoLine."Line No.");
		ReturnReceiptLine.SetRange(Type,SalesCrMemoLine.Type);
		ReturnReceiptLine.SetRange("No.",SalesCrMemoLine."No.");
		ReturnReceiptLine.SetRange("Unit of Measure Code",SalesCrMemoLine."Unit of Measure Code");
		ReturnReceiptLine.SetFilter(Quantity,'<>%1',0);
		if ReturnReceiptLine.Find('-') then
		  repeat
			if "Sales Cr.Memo Header"."Get Return Receipt Used" then
			  CorrectShipment(ReturnReceiptLine);
			if Abs(ReturnReceiptLine.Quantity) <= Abs(TotalQuantity - SalesCrMemoLine.Quantity) then
			  TotalQuantity := TotalQuantity - ReturnReceiptLine.Quantity
			else begin
			  if Abs(ReturnReceiptLine.Quantity)  > Abs(TotalQuantity) then
				ReturnReceiptLine.Quantity := TotalQuantity;
			  Quantity :=
				ReturnReceiptLine.Quantity - (TotalQuantity- SalesCrMemoLine.Quantity);
			  SalesCrMemoLine.Quantity := SalesCrMemoLine.Quantity - Quantity;
			  TotalQuantity := TotalQuantity - ReturnReceiptLine.Quantity;
			  if ReturnReceiptHeader.Get(ReturnReceiptLine."Document No.") then
				begin
				  AddBufferEntry(
					SalesCrMemoLine,
					-Quantity,
					ReturnReceiptHeader."Posting Date");
				end;
			end;
		  until (ReturnReceiptLine.Next = 0) or (TotalQuantity = 0);
	end;

	procedure CorrectShipment(var ReturnReceiptLine: Record "Return Receipt Line")
	var
		SalesCrMemoLine: Record "Sales Cr.Memo Line";
	begin
		SalesCrMemoLine.SetCurrentkey("Return Receipt No.","Return Receipt Line No.");
		SalesCrMemoLine.SetRange("Return Receipt No.",ReturnReceiptLine."Document No.");
		SalesCrMemoLine.SetRange("Return Receipt Line No.",ReturnReceiptLine."Line No.");
		if SalesCrMemoLine.Find('-') then
		   repeat
			  ReturnReceiptLine.Quantity := ReturnReceiptLine.Quantity - SalesCrMemoLine.Quantity;
		   until SalesCrMemoLine.Next = 0;
	end;

	procedure AddBufferEntry(SalesCrMemoLine: Record "Sales Cr.Memo Line";QtyOnShipment: Decimal;PostingDate: Date)
	begin
		SalesShipmentBuffer.SetRange("Document No.",SalesCrMemoLine."Document No.");
		SalesShipmentBuffer.SetRange("Line No.",SalesCrMemoLine."Line No.");
		SalesShipmentBuffer.SetRange("Posting Date",PostingDate);
		if SalesShipmentBuffer.Find('-') then begin
		  SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity - QtyOnShipment;
		  SalesShipmentBuffer.Modify;
		  exit;
		end;
		with SalesShipmentBuffer do begin
		  Init;
		  "Document No." := SalesCrMemoLine."Document No.";
		  "Line No." := SalesCrMemoLine."Line No.";
		  "Entry No." := NextEntryNo;
		  Type := SalesCrMemoLine.Type;
		  "No." := SalesCrMemoLine."No.";
		  Quantity := -QtyOnShipment;
		 "Posting Date" := PostingDate;
		  Insert;
		  NextEntryNo := NextEntryNo + 1
		end;
	end;

	local procedure DocumentCaption(): Text[250]
	begin
		if "Sales Cr.Memo Header"."Prepayment Credit Memo" then
		  exit(Text011);
		exit(Text005);
	end;

	local procedure OnPreSectionTable114_Footer1(var "Sales Cr.Memo Header" : Record "Sales Cr.Memo Header");
	begin
		with Table114 do begin
		  IMPPDTELIQ:=0;
		  DOCLIQ:='';
		  if "Sales Cr.Memo Header"."Applies-to Doc. No."<>'' then begin
			   Rec21.Reset;
			   Rec21.SetRange(Rec21."Document No.","Sales Cr.Memo Header"."Applies-to Doc. No.");
			   Rec21.SetRange(Rec21."Bill No.","Sales Cr.Memo Header"."Applies-to Bill No.");
			   Rec21.SetRange(Rec21."Document Type","Sales Cr.Memo Header"."Applies-to Doc. Type");
			   if Rec21.FindFirst then begin
					DOCLIQ:=Rec21."Document No.";
					Rec21.CalcFields(Rec21."Remaining Amt. (LCY)");
					IMPPDTELIQ:=Rec21."Remaining Amt. (LCY)";
			   end;
			   TextoLiq[1]:='Este abono liquida el documento '+Format(DOCLIQ);
			   if IMPPDTELIQ<>0 then begin
					TextoLiq[1]:='Este abono liquida parcialmente el documento '+Format(DOCLIQ);
					TextoLiq[2]:='quedando pendiente de liquidar: '+Format(IMPPDTELIQ)+' euros.';
			   end;
		  end;
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body3(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number = 1);
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body4(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number > 1);
		end;
	end;
	local procedure OnPreSectionTable115_Body7(var "Sales Cr.Memo Line" : Record "Sales Cr.Memo Line");
	begin
		with Table115 do begin
		  ReportForNav.ShowOutput(Type = 0);
		end;
	end;
	local procedure OnPreSectionTable115_Body8(var "Sales Cr.Memo Line" : Record "Sales Cr.Memo Line");
	begin
		with Table115 do begin
		  ReportForNav.ShowOutput(Type > 0);
		end;
	end;
	local procedure OnPreSectionTable115_Footer11(var "Sales Cr.Memo Line" : Record "Sales Cr.Memo Line");
	begin
		with Table115 do begin
		  ReportForNav.ShowOutput("Inv. Discount Amount" <> 0);
		end;
	end;
	local procedure OnPreSectionTable115_Footer12(var "Sales Cr.Memo Line" : Record "Sales Cr.Memo Line");
	begin
		with Table115 do begin
		  ReportForNav.ShowOutput("Pmt. Disc. Given Amount" <> 0);
		end;
	end;
	local procedure OnPreSectionTable115_Footer13(var "Sales Cr.Memo Line" : Record "Sales Cr.Memo Line");
	begin
		with Table115 do begin
		  ReportForNav.ShowOutput(not "Sales Cr.Memo Header"."Prices Including VAT");
		end;
	end;
	local procedure OnPreSectionTable115_Footer14(var "Sales Cr.Memo Line" : Record "Sales Cr.Memo Line");
	begin
		with Table115 do begin
		  ReportForNav.ShowOutput(
			"Sales Cr.Memo Header"."Prices Including VAT" and
			("Amount Including VAT" <> Amount) and
			("Sales Cr.Memo Header"."VAT Base Discount %" <> 0));
		end;
	end;
	local procedure OnPreSectionTable115_Footer15(var "Sales Cr.Memo Line" : Record "Sales Cr.Memo Line");
	begin
		with Table115 do begin
		  ReportForNav.ShowOutput("Sales Cr.Memo Header"."Prices Including VAT" and
		  (VATAmountLine."VAT Calculation Type" = VATAmountLine."vat calculation type"::"Reverse Charge VAT"));
		end;
	end;
	local procedure OnPreSectionVATCounter_Body20(var VATCounter : Record Integer);
	begin
		with VATCounter do begin
		  if VATAmountLine."VAT Amount" = 0 then
			VATAmountLine."VAT %" := 0;
		  if VATAmountLine."EC Amount" = 0 then
			VATAmountLine."EC %" := 0;
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50043_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50043;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
