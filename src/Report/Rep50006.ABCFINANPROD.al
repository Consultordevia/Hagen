#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50006_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50006){}   
		type("System.IO.Path"; System_IO_Path50006) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50006 "ABC FINAN-PROD"
{
	Caption = 'ABC FINAN-PROD';
	RDLCLayout = './Layouts/ABCFINAN-PROD.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Item;Item)
		{
			CalcFields = "Cantidad facturada","Cantidad abonada","Importe facturado","Importe abonado","Cantidad fabricada";
			DataItemTableView = sorting("No.");
			RequestFilterFields = "Producto almacenable","No.","Gen. Prod. Posting Group","Date Filter","Vendor No.","Filtro Pais","Filtro Cliente","Filtro Grupo clientes","Clasificacion CANADA";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			trigger OnPreDataItem();
			begin
			
				Window.Open(Text000);
				///ItemAmount.DELETEALL;
				i := 0;
			end;
			
			trigger OnAfterGetRecord();
			begin
				Window.Update(1,"No.");
				if (Item."Cantidad fabricada"=0) and
				   (Item."Cantidad facturada"=0) and
				   (Item."Cantidad abonada"=0) and
				   (Item."Importe facturado"=0) and
				   (Item."Importe abonado"=0) then
				  CurrReport.Skip;
				pvp:=0;
				Rec1.Reset;
				Rec1.SetRange(Rec1."Item No.",Item."No.");
				if Rec1.FindFirst then begin
					 pvp:=Rec1."Unit Price";
				end;
				ItemAmount.Init;
				ItemAmount."Item No." := "No.";
				ItemAmount.Amount := (Item."Importe facturado"+Item."Importe abonado");
				ItemAmount."Amount 2" := (Item."Cantidad facturada"+Item."Cantidad abonada");
				ItemAmount.Insert;
				TAcumu:=TAcumu+ItemAmount.Amount;
				Tcanti:=Tcanti+ItemAmount."Amount 2";
			end;
			
		}
		dataitem("Item Amount";"Item Amount")
		{
			DataItemTableView = sorting(Amount,"Amount 2","Item No.") order(descending);
			column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNavPageNo; Format(ReportForNav.PageNo))
			{
			}
			column(TODAY_0_4; Format(Today,0,4))
			{
			}
			column(USERID; UserId)
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(STRSUBSTNO_Text001_ItemDateFilter; StrSubstNo(Text001,ItemDateFilter))
			{
			}
			column(tantob; tantob)
			{
			}
			column(tantoa; tantoa)
			{
			}
			column(CONTA; CONTA)
			{
			}
			column(Description_RecItem; RecItem.Description)
			{
			}
			column(Acumu; Acumu)
			{
				DecimalPlaces = 0:0;
			}
			column(Tanto; Tanto)
			{
				DecimalPlaces = 2:2;
			}
			column(Clasi; Clasi)
			{
				DecimalPlaces = 2:2;
			}
			column(Amount2; "Item Amount"."Amount 2")
			{
				DecimalPlaces = 0:0;
			}
			column(Amount; "Item Amount".Amount)
			{
				DecimalPlaces = 0:0;
			}
			column(ItemNo; "Item Amount"."Item No.")
			{
			}
			column(RIIAAEE; RecItem."RII-AAEE")
			{
			}
			column(PesoNeto; RecItem."Net Weight")
			{
			}
			trigger OnAfterGetRecord();
			begin
				RecItem.Get("Item Amount"."Item No.");
				CONTA:=CONTA+1;
				Acumu:=Acumu+"Item Amount".Amount;
				if TAcumu<>0 then begin
					 Tanto:=(Acumu*100)/TAcumu;
				end;
				if Tcanti<>0 then begin
					 tantoa:=("Item Amount"."Amount 2"*100)/Tcanti;
				end;
				if TAcumu<>0 then begin
					 tantob:=("Item Amount".Amount*100)/TAcumu;
				end;
				if Tanto<(TA+TB+TA) then begin
					 Clasi:=2;
				end;
				if (Tanto<TB+TA) then begin
					 Clasi:=1;
				end;
				if (Tanto<TA) then begin
					 Clasi:=0;
				end;
				if Tipo=1 then begin
					 RecItem."Clasificación A,B,C":=Clasi;
					 RecItem."Fecha asignada clasificación":=Today;
					 RecItem.Modify;
				end;
				  fnCrearCelda('A' + Format(intFila),Format(CONTA));
				  fnCrearCelda('B' + Format(intFila),Format(RecItem."No."));
				  fnCrearCelda('C' + Format(intFila),Format(RecItem.Description));
				  fnCrearCelda('D' + Format(intFila),Format("Item Amount"."Amount 2"));
				  fnCrearCelda('E' + Format(intFila),Format(ROUND(tantoa,0.01)));
				  fnCrearCelda('F' + Format(intFila),Format("Item Amount".Amount));
				  fnCrearCelda('G' + Format(intFila),Format(ROUND(tantob,0.01)));
				  fnCrearCelda('H' + Format(intFila),Format(Acumu));
				  fnCrearCelda('I' + Format(intFila),Format(ROUND(Tanto,0.01)));
				  fnCrearCelda('J' + Format(intFila),Format(Clasi));
				  fnCrearCelda('K' + Format(intFila),Format(ROUND(RecItem."Unit Cost",0.01)));
				  PVMEDIO:=0;
				  if "Item Amount"."Amount 2"<>0 then begin
					   PVMEDIO:=ROUND("Item Amount".Amount/"Item Amount"."Amount 2",0.01);
				  end;
				  fnCrearCelda('L' + Format(intFila),Format(PVMEDIO));
				  fnCrearCelda('M' + Format(intFila),Format(PVMEDIO-RecItem."Unit Cost"));
				  fnCrearCelda('N' + Format(intFila),Format((PVMEDIO-RecItem."Unit Cost")*"Item Amount"."Amount 2"));
				  RecSP.Reset;
				  RecSP.SetRange(RecSP."Item No.",RecItem."No.");
				  RecSP.SetRange(RecSP."Sales Type",1);
				  RecSP.SetRange(RecSP."Sales Code",'2011');
				  if RecSP.FindFirst then begin
					   fnCrearCelda('O' + Format(intFila),Format(RecSP."Unit Price"));
				  end;
				  RecSP.Reset;
				  RecSP.SetRange(RecSP."Item No.",RecItem."No.");
				  RecSP.SetRange(RecSP."Sales Type",1);
				  RecSP.SetRange(RecSP."Sales Code",'2012');
				  if RecSP.FindFirst then begin
					   fnCrearCelda('P' + Format(intFila),Format(RecSP."Unit Price"));
				  end;
				  fnCrearCelda('Q' + Format(intFila),Format(RecItem.Rotacion));
				  fnCrearCelda('R' + Format(intFila),Format(RecItem."Unit Volume"));
				  fnCrearCelda('S' + Format(intFila),Format(RecItem."Cantidad master"));
				  fnCrearCelda('T' + Format(intFila),Format(RecItem."Metros Cúbicos Master"));
				  fnCrearCelda('U' + Format(intFila),Format(RecItem."Vendor No."));
				  RecItem.CalcFields(RecItem."Existencia SILLA");
				  fnCrearCelda('V' + Format(intFila),Format(RecItem."Existencia SILLA"));
			
			
				TextoSalida1:='';
				TextoSalida2:='';
				TextoSalida3:='';
				TextoSalida4:='';
				TextoSalida5:='';
			
			
				costem:=CalculaCoste("Item Amount"."Item No.");
				TextoSalida1:=Format(CONTA)+';'+
				  Format(RecItem."No.")+';'+
				  Format(RecItem.Description)+';'+
				  Format("Item Amount"."Amount 2")+';'+
				  Format(ROUND(tantoa,0.01))+';'+
				  Format("Item Amount".Amount)+';'+
				  Format(ROUND(tantob,0.01))+';'+
				  Format(Acumu)+';'+
				  Format(ROUND(Tanto,0.01))+';'+
				  Format(Clasi)+';'+
				  Format(ROUND(costem,0.01))+';'+
				  Format(ROUND(costem*"Item Amount"."Amount 2",0.01))+';';
				TextoSalida2:=Format(PVMEDIO)+';'+
				  Format(PVMEDIO-costem)+';'+
				  ///// FORMAT((PVMEDIO-RecItem."Unit Cost")*"Item Amount"."Amount 2")+';'+
				  Format((PVMEDIO-costem)*"Item Amount"."Amount 2")+';'+
				  Format(RecSP."Unit Price")+';'+
				  Format(RecSP."Unit Price")+';'+
				  Format(RecItem.Rotacion)+';'+
				  Format(RecItem."Unit Volume")+';'+
				  Format(RecItem."Cantidad master")+';'+
				  Format(RecItem."Metros Cúbicos Master")+';'+
				  Format(RecItem."Vendor No.")+';'+
				  Format(RecItem."Existencia SILLA")+';';
			
			
			
			
			
			
			
			
				  FECHAINI:=CalcDate('-60M',DESDEFECHA);
				  XX:=0;
				  mesescompra:=0;
				  sumatot:=0;
				  mediamensual:=0;
				  ///IF condetalle THEN BEGIN
				  repeat
					   XX:=XX+1;
					   CODMES[XX]:=CalcDate('+'+Format(XX)+'M',FECHAINI);
					   NMES:=Date2dmy(CODMES[XX],2);
					   NAÑO:=Date2dmy(CODMES[XX],3);
					   desdeini:=CODMES[XX];
					   hastafin:=CalcDate('+1M-1D',desdeini);
					   RecItem2.Get("Item Amount"."Item No.");
					   RecItem2.SetRange(RecItem2."Date Filter",desdeini,hastafin);
					   RecItem2.CalcFields(RecItem2."Sales (Qty.)");
					   canti:=RecItem2."Sales (Qty.)";
					   sumatot:=sumatot+canti;
					   if canti<>0 then begin
							if mesescompra=0 then begin
								 mesescompra:=60-XX+1;
							end;
					   end;
					   fnCrearCelda(CODLETRA[XX]+ Format(intFila),Format(canti));
					   if StrLen(TextoSalida3)<220 then begin
							TextoSalida3:=TextoSalida3+Format(canti)+';';
					   end;
					   if StrLen(TextoSalida3)>220 then begin
							TextoSalida4:=TextoSalida4+Format(canti)+';';
					   end;
			
			
				  until XX=60;
				 /// END;
				  fnCrearCelda('CE' + Format(intFila),Format(mesescompra));
				  if mesescompra<>0 then begin
					   mediamensual:=ROUND(sumatot/mesescompra,1);
				  end;
				  fnCrearCelda('CF' + Format(intFila),Format(mediamensual));
				  RecItem.CalcFields(RecItem."Cdad. en oferta compra",RecItem."Qty. on Purch. Order");
				  fnCrearCelda('CH' + Format(intFila),Format(RecItem."Cdad. en oferta compra"));
				  fnCrearCelda('CG' + Format(intFila),Format(RecItem."Qty. on Purch. Order"));
				  intFila:=intFila+1;
				  RecItem.CalcFields(RecItem."Tarifa 2019");
				  TextoSalida5:=Format(mesescompra)+';'+
				  Format(mediamensual)+';'+
				  Format(RecItem."Cdad. en oferta compra")+';'+
				  Format(RecItem."Qty. on Purch. Order")+';'+
				  Format(RecItem."Tarifa 2019");
			
			
								ArchSalida4.Write(TextoSalida1+TextoSalida2+TextoSalida3+TextoSalida4+TextoSalida5);
			end;
			
		}
		dataitem(Integer;Integer)
		{
			DataItemTableView = sorting(Number) where(Number=filter(1..));
			column(ReportForNavId_18; 18) {} // Autogenerated by ForNav - Do not delete
			trigger OnPreDataItem();
			begin
			
				Window.Close;
			end;
			
			trigger OnAfterGetRecord();
			begin
				if Number = 1 then begin
				  if not ItemAmount.Find('-') then
					CurrReport.Break;
				end else
				  if ItemAmount.Next = 0 then
					CurrReport.Break;
				Item.Get(ItemAmount."Item No.");
				/*
				IF ShowSorting = ShowSorting::Largest THEN BEGIN
				  ItemAmount.Amount := -ItemAmount.Amount;
				  ItemAmount."Amount 2" := -ItemAmount."Amount 2";
				END;
				IF (MaxAmount > 0) AND (ItemAmount.Amount > 0) THEN
				  BarText := PADSTR('',ROUND(ItemAmount.Amount / MaxAmount * 45,1),'*')
				ELSE
				  BarText := '';
				IF ShowSorting = ShowSorting::Largest THEN BEGIN
				  ItemAmount.Amount := -ItemAmount.Amount;
				  ItemAmount."Amount 2" := -ItemAmount."Amount 2";
				END;
				*/
				dato2:=ItemAmount.Amount;
				dato1:=ItemAmount."Amount 2";
				Acumu:=Acumu+ItemAmount.Amount*-1;
				if TAcumu<>0 then begin
					 Tanto:=(Acumu*100)/TAcumu;
				end;
				if Tanto<(TA+TB+TA) then begin
					 Clasi:=2;
				end;
				if (Tanto<TB+TA) then begin
					 Clasi:=1;
				end;
				if (Tanto<TA) then begin
					 Clasi:=0;
				end;
				if Tipo=1 then begin
					 Item."Clasificación A,B,C":=Clasi;
					 Item."Fecha asignada clasificación":=Today;
					 Item.Modify;
				end;
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(Tipo;Tipo)
					{
						ApplicationArea = Basic;
						Caption = 'Tipo acción';
					}
					field(condetalle;condetalle)
					{
						ApplicationArea = Basic;
						Caption = 'Con detalle';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			NoOfRecordsToPrint := 99999999;
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin


		ArchSalida4.Close;

		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin



		ArchExt4:='\\192.168.0.16\a_gestion\a_gestion\ramon\ABCFIN_RAMON1.csv';

		if FILE.Exists(ArchExt4) then begin

			FILE.Erase(ArchExt4);

		end;

		ArchSalida4.TextMode := true;
		ArchSalida4.WriteMode := true;
		ArchSalida4.Create(ArchExt4);

		TextoSalida1:='Posición'+';'+
		  'Producto'+';'+
		  'Descripcion'+';'+
		  'Cantidad'+';'+
		  '% sobre total'+';'+
		  'Venta neta'+';'+
		  '% sobre total'+';'+
		  'Acumulado'+';'+
		  '% total'+';'+
		  'Clasificación'+';';
		  TextoSalida2:='Coste unitario'+';'+
		   'Coste total'+';'+
		  'Venta media'+';'+
		  'Bnfo. unit.'+';'+
			'Total Beneficio'+';'+
		  'Tarifa 2011'+';'+
		  'Tarifa 2012'+';'+
		  'Rotación'+';'+
		  'Volumen'+';'+
		  'Cantidad master'+';'+
		  'Metros cubicos master'+';';
		  TextoSalida3:='Proveedor'+';'+
		  'Stock SILLA'+';';
		DESDEFECHA:=Item.GetRangeMin(Item."Date Filter");
		  HASTAFECHA:=Item.GetRangemax(Item."Date Filter");
		  DIAS:=HASTAFECHA-DESDEFECHA+1;
		  FECHAINI:=CalcDate('-60M',DESDEFECHA);
		  XX:=0;
		  repeat
			   XX:=XX+1;
			   CODMES[XX]:=CalcDate('+'+Format(XX)+'M',FECHAINI);
			   NMES:=Date2dmy(CODMES[XX],2);
			   NAÑO:=Date2dmy(CODMES[XX],3);
			   TextoSalida4:=TextoSalida4+Format(NMES)+'-'+Format(NAÑO)+';';

		  until XX=60;

		  TextoSalida5:=
		  'Meses compra'+';'+
		  'Media mensual'+';'+
		  'Cantidad oferta'+';'+
		  'Cantidad compra'+';'+
		  'Tarifa 2009';




						ArchSalida4.Write(TextoSalida1+TextoSalida2+TextoSalida3+TextoSalida4+TextoSalida5);




		if ItemAmount.FindFirst then repeat
			 ItemAmount.Delete;
		until ItemAmount.Next =0;
		ItemFilter := Item.GetFilters;
		ItemDateFilter := Item.GetFilter("Date Filter");
		Sequence := Lowercase(Format(SelectStr(ShowSorting + 1,Text004)));
		Heading := Format(SelectStr(ShowType + 1,Text005));
		RecCE.Get;
		TA:=RecCE."% Venta Clasificación A";
		TB:=RecCE."% Venta Clasificación B";
		TC:=RecCE."% Venta Clasificación C";
		if Tipo = 1 then begin
			 if RecItem.FindFirst then repeat
				  RecItem."Clasificación A,B,C":=2;
				  RecItem.Modify;
			 until RecItem.Next = 0;
		end;
		fnCrearAut;
		intFila := 1;
		  fnCrearHoja('ABC PRODUCTOS',90);
		  fnCrearCelda('A' + Format(intFila),'Posición');
		  fnCrearCelda('B' + Format(intFila),'Producto');
		  fnCrearCelda('C' + Format(intFila),'Descripcion');
		  fnCrearCelda('D' + Format(intFila),'Cantidad');
		  fnCrearCelda('E' + Format(intFila),'% sobre total');
		  fnCrearCelda('F' + Format(intFila),'Importe');
		  fnCrearCelda('G' + Format(intFila),'% sobre total');
		  fnCrearCelda('H' + Format(intFila),'Acumulado');
		  fnCrearCelda('I' + Format(intFila),'% total');
		  fnCrearCelda('J' + Format(intFila),'Clasificación');
		  fnCrearCelda('K' + Format(intFila),'Coste');
		  fnCrearCelda('L' + Format(intFila),'Venta media');
		  fnCrearCelda('M' + Format(intFila),'Bnfo. unit.');
		  fnCrearCelda('N' + Format(intFila),'Total Beneficio');
		  fnCrearCelda('O' + Format(intFila),'Tarifa 2011');
		  fnCrearCelda('P' + Format(intFila),'Tarifa 2012');
		  fnCrearCelda('Q' + Format(intFila),'Rotación');
		  fnCrearCelda('R' + Format(intFila),'Volumen');
		  fnCrearCelda('S' + Format(intFila),'Cantidad master');
		  fnCrearCelda('T' + Format(intFila),'Metros cubicos master');
		  fnCrearCelda('U' + Format(intFila),'Proveedor');
		  fnCrearCelda('V' + Format(intFila),'Stock SILLA');
		  CODLETRA[1]:='R';
		  CODLETRA[2]:='S';
		  CODLETRA[3]:='T';
		  CODLETRA[4]:='U';
		  CODLETRA[5]:='V';
		  CODLETRA[1]:='W';
		  CODLETRA[2]:='X';
		  CODLETRA[3]:='Y';
		  CODLETRA[4]:='Z';
		  CODLETRA[5]:='AA';
		  CODLETRA[6]:='AB';
		  CODLETRA[7]:='AC';
		  CODLETRA[8]:='AD';
		  CODLETRA[9]:='AE';
		  CODLETRA[10]:='AF';
		  CODLETRA[11]:='AG';
		  CODLETRA[12]:='AH';
		  CODLETRA[13]:='AI';
		  CODLETRA[14]:='AJ';
		  CODLETRA[15]:='AK';
		  CODLETRA[16]:='AL';
		  CODLETRA[17]:='AM';
		  CODLETRA[18]:='AN';
		  CODLETRA[19]:='AO';
		  CODLETRA[20]:='AP';
		  CODLETRA[21]:='AQ';
		  CODLETRA[22]:='AR';
		  CODLETRA[23]:='AS';
		  CODLETRA[24]:='AT';
		  CODLETRA[25]:='AU';
		  CODLETRA[26]:='AV';
		  CODLETRA[27]:='AW';
		  CODLETRA[28]:='AX';
		  CODLETRA[29]:='AY';
		  CODLETRA[30]:='AZ';
		  CODLETRA[31]:='BA';
		  CODLETRA[32]:='BB';
		  CODLETRA[33]:='BC';
		  CODLETRA[34]:='BD';
		  CODLETRA[35]:='BE';
		  CODLETRA[36]:='BF';
		  CODLETRA[37]:='BG';
		  CODLETRA[38]:='BH';
		  CODLETRA[39]:='BI';
		  CODLETRA[40]:='BJ';
		  CODLETRA[41]:='BK';
		  CODLETRA[42]:='BL';
		  CODLETRA[43]:='BM';
		  CODLETRA[44]:='BN';
		  CODLETRA[45]:='BO';
		  CODLETRA[46]:='BP';
		  CODLETRA[47]:='BQ';
		  CODLETRA[48]:='BR';
		  CODLETRA[49]:='BS';
		  CODLETRA[50]:='BT';
		  CODLETRA[51]:='BU';
		  CODLETRA[52]:='BV';
		  CODLETRA[53]:='BW';
		  CODLETRA[54]:='BX';
		  CODLETRA[55]:='BY';
		  CODLETRA[56]:='BZ';
		  CODLETRA[57]:='CA';
		  CODLETRA[58]:='CB';
		  CODLETRA[59]:='CC';
		  CODLETRA[60]:='CD';
		  DESDEFECHA:=Item.GetRangeMin(Item."Date Filter");
		  HASTAFECHA:=Item.GetRangemax(Item."Date Filter");
		  DIAS:=HASTAFECHA-DESDEFECHA+1;
		  FECHAINI:=CalcDate('-60M',DESDEFECHA);
		  XX:=0;
		  repeat
			   XX:=XX+1;
			   CODMES[XX]:=CalcDate('+'+Format(XX)+'M',FECHAINI);
			   NMES:=Date2dmy(CODMES[XX],2);
			   NAÑO:=Date2dmy(CODMES[XX],3);
			   fnCrearCelda(CODLETRA[XX]+ Format(intFila),Format(NMES)+'-'+Format(NAÑO));
		  until XX=60;
		  fnCrearCelda('CE' + Format(intFila),'Meses compra');
		  fnCrearCelda('CF' + Format(intFila),'Media mensual');
		  fnCrearCelda('CG' + Format(intFila),'Cantidad oferta');
		  fnCrearCelda('CH' + Format(intFila),'Cantidad compra');
		  intFila := intFila + 1;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Sorting items	#1##########';
		Text001: label 'Period: %1';
		Text002: label 'Ranked according to %1 %2';
		Text003: label 'Portion of %1';
		Window: Dialog;
		ItemAmount: Record "Item Amount";
		ItemAmount2: Record "Item Amount";
		ItemFilter: Text[250];
		ItemDateFilter: Text[30];
		Sequence: Text[30];
		Heading: Text[30];
		ShowSorting: Option Largest,Smallest;
		ShowType: Option "Sales (LCY)";
		NoOfRecordsToPrint: Integer;
		PrintAlsoIfZero: Boolean;
		ItemSales: Decimal;
		QtyOnHand: Decimal;
		SalesAmountPct: Decimal;
		QtyOnHandPct: Decimal;
		MaxAmount: Decimal;
		BarText: Text[50];
		i: Integer;
		Text004: label 'Largest,Smallest';
		Text005: label 'Sales (LCY),Inventory';
		Acumu: Decimal;
		TAcumu: Decimal;
		Tanto: Decimal;
		Clasi: Option A,B,C;
		RecCE: Record "Sales & Receivables Setup";
		TA: Decimal;
		TB: Decimal;
		TC: Decimal;
		Tipo: Option Propuesta,"Guardar datos";
		Rec1: Record "Sales Price";
		pvp: Decimal;
		dato1: Decimal;
		dato2: Decimal;
		CONTA: Integer;
		RecItem: Record Item;
		Tcanti: Decimal;
		tantoa: Decimal;
		tantob: Decimal;
		autXLSerie: Integer;
		intFila: Integer;
		PVMEDIO: Decimal;
		RecSP: Record "Sales Price";
		ROTACION: Decimal;
		DESDEFECHA: Date;
		HASTAFECHA: Date;
		DIAS: Integer;
		XX: Integer;
		CODLETRA: array [60] of Code[10];
		CODMES: array [60] of Date;
		NMES: Integer;
		"NAÑO": Integer;
		FECHAINI: Date;
		RecItem2: Record Item;
		canti: Decimal;
		desdeini: Date;
		hastafin: Date;
		mesescompra: Integer;
		sumatot: Decimal;
		mediamensual: Decimal;
		condetalle: Boolean;
		autXLApp: Automation CommandBars;
		autXLLibros: Automation _OlkDateControl;
		autXLLibro: Automation _OlkCommandButton;
		autXLHojas: Automation ;
		autXLHoja: Automation ;
		autXLGraficos: Automation ;
		autXLGrafico: Automation ;
		autXLChart: Automation ;
		autXLRango: Automation ;
		autXLSeries: Automation ;
		autXLEjes: Automation ;
		autXLEjes1: Automation ;
		autXLSerieColeccion: Automation ;
		ArchSalida4: File;
		ArchExt4: Text[250];
		TextoSalida1: Text[250];
		TextoSalida2: Text[250];
		TextoSalida3: Text[250];
		TextoSalida4: Text[1000];
		TextoSalida5: Text[250];
		TextoSalida6: Text[250];
		TextoSalida7: Text[250];
		TextoSalida8: Text[250];
		TextoSalida9: Text[250];
		TextoSalida10: Text[250];
		costem: Decimal;
		coste: Decimal;
		ultimacompra: Decimal;

	local procedure Pct(Numeral1: Decimal;Numeral2: Decimal): Decimal
	begin
		if Numeral2 = 0 then
		  exit(0);
		exit(ROUND(Numeral1 / Numeral2 * 100,0.1));
	end;

	procedure fnCrearAut()
	begin
	end;

	procedure fnElimnarAut()
	begin
	end;

	procedure fnCrearHoja(txtNombreHoja: Text[100];intZoom: Integer)
	begin
	end;

	procedure fnCrearCelda(txtCelda: Text[30];txtValor: Text[100])
	begin
	end;

	procedure fnFormatoCelda(txtCelda: Text[100];txtFormato: Text[100])
	begin
	end;

	procedure fnAliniacionCelda(txtCelda: Text[100];intHorAli: Integer)
	begin
	end;

	procedure fnColorCelda(pnRango: Text[100];pnColorInterior: Integer;pnColorFuente: Integer;pnNegrita: Boolean)
	begin
	end;

	procedure fnBordes(pnRango: Text[100];pnBorde: Integer;pnLinea: Integer;pnAncho: Integer;pnColor: Integer)
	begin
	end;

	procedure fnGraficoCrear(pnTop: Integer;pnPosicion: Integer;pnAncho: Integer;pnAlto: Integer;"pnTamaño": Integer)
	begin
	end;

	procedure fnGraficoParam(pnRango: Text[30];pnTipo: Integer;pnLeyLeft: Integer;pnLeyTop: Integer)
	begin
	end;

	procedure fnGraficoSeries(pnSerie: Integer;pnColor: Integer;pnTipoGrafico: Integer;pnMarca: Integer;pnPrimerPlano: Integer;pnSegundoPlano: Integer)
	begin
	end;

	procedure fnGraficoEjes(pnMenor: Integer;pnMayor: Integer)
	begin
	end;

	procedure fnOrientacionEjes(pnOrientacion: Integer)
	begin
	end;

	procedure fnFormatoEjes(pnEje: Integer)
	begin
	end;

	procedure fnGrabarHoja(Carpeta: Text[250])
	begin
	end;

	local procedure CalculaCoste(codprod: Code[20]) COSTEMED: Decimal
	var
		Rec32: Record "Item Ledger Entry";
		coste: Decimal;
		valor: Decimal;
		filtro: Text[250];
		DESDE: Date;
		HASTA: Date;
		coste2: Decimal;
		sincargos: Boolean;
		total: Decimal;
		RecItem: Record Item;
		RecItem2: Record Item;
		ventana: Dialog;
		COSTEMEDIO: Decimal;
		VALORMEDIO: Decimal;
		CANTPENDIENTE: Decimal;
		STOCKACT: Decimal;
		SALE: Boolean;
		CANTIDADAVALORAR: Decimal;
		SUMAMEDIA: Decimal;
		Rec32Temp: Record "Item Ledger Entry" temporary;
		CONTADOR: Integer;
		VALORSTOC: Decimal;
		vMEDIA: Decimal;
		Unfavorable: Text;
	begin
		coste:=0;
		coste2:=0;
		HASTA:=HASTAFECHA;
		vMEDIA:=0;
		Rec32Temp.Reset;
		if Rec32Temp.FindFirst then repeat
			 Rec32Temp.Delete;
		until Rec32Temp.Next=0;
		RecItem.Get(codprod);
		VALORMEDIO:=0;
		COSTEMEDIO:=0;
		CANTPENDIENTE:=0;
		SALE:=false;
		RecItem.Get(codprod);
		RecItem.SetRange("Date Filter",DESDE,HASTA);
		RecItem.CalcFields("Net Change");
		STOCKACT:=RecItem."Net Change";
		CONTADOR:=99999999;
		Rec32.Reset;
		Rec32.SetCurrentkey(Rec32."Item No.");
		Rec32.SetRange(Rec32."Item No.",codprod);
		Rec32.SetRange(Rec32."Entry Type",0);
		Rec32.SetRange(Rec32."Location Code",'SILLA');
		Rec32.SetRange(Rec32."Posting Date",DESDE,HASTA);
		if Rec32.FindSet then repeat
			 Rec32Temp:=Rec32;
			 CONTADOR:=CONTADOR-1;
			 Rec32Temp."Entry No.":=CONTADOR;
			 Rec32.CalcFields(Rec32."Cost Amount (Actual)",Rec32."Tiene cargos");
			 Rec32Temp."Invoiced Quantity":=Rec32."Cost Amount (Actual)";
			 ultimacompra:=Rec32."Cost Amount (Actual)"/Rec32.Quantity;
			 Rec32Temp.Insert;
		until (Rec32.Next=0);
		vMEDIA:=0;
		VALORMEDIO:=0;
		COSTEMEDIO:=0;
		CANTPENDIENTE:=0;
		SALE:=false;
		RecItem.SetRange("Date Filter",DESDE,HASTA);
		RecItem.CalcFields("Net Change");
		STOCKACT:=RecItem."Net Change";
		Rec32Temp.Reset;
		if Rec32Temp.FindFirst then repeat
			  vMEDIA:=Rec32Temp."Invoiced Quantity"/Rec32Temp.Quantity;
			  if STOCKACT<Rec32Temp.Quantity then begin
				   VALORMEDIO:=VALORMEDIO+(vMEDIA*STOCKACT);
				   SUMAMEDIA:=(vMEDIA*STOCKACT);
				   STOCKACT:=0;
			  end;
			  if STOCKACT>=Rec32Temp.Quantity then begin
				   VALORMEDIO:=VALORMEDIO+(vMEDIA*Rec32Temp.Quantity);
				   SUMAMEDIA:=(vMEDIA*Rec32Temp.Quantity);
				   STOCKACT:=STOCKACT-Rec32Temp.Quantity;
			  end;
				 if STOCKACT<=0 then begin
					 SALE:=true;
			  end;
		until (Rec32Temp.Next=0) or (SALE);
		COSTEMEDIO:=ultimacompra;
		if RecItem."Net Change"<>0 then begin
			 COSTEMEDIO:=VALORMEDIO/RecItem."Net Change";
		end;
		if COSTEMEDIO=0 then begin
			 COSTEMEDIO:=RecItem."Precio inv 2009";
			 if VALORMEDIO=0 then begin
				  VALORMEDIO:=COSTEMEDIO*RecItem."Net Change";
			 end;
		end;
		exit(COSTEMEDIO);
	end;

	local procedure OnPreSectionInteger_Header6(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput(ReportForNav.PageNo = 1);
		end;
	end;
	local procedure OnPreSectionInteger_Header7(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput((ReportForNav.PageNo = 1) and PrintAlsoIfZero);
		end;
	end;
	local procedure OnPreSectionInteger_Header8(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput((ReportForNav.PageNo = 1) and (ItemFilter <> ''));
		end;
	end;
	local procedure OnPreSectionInteger_Header9(var Integer : Record Integer);
	begin
		with Integer do begin
		  ReportForNav.ShowOutput(ReportForNav.PageNo = 1);
		end;
	end;
	local procedure OnPreSectionInteger_Footer12(var Integer : Record Integer);
	begin
		with Integer do begin
		  SalesAmountPct := Pct(Item."Sales (LCY)",ItemSales);
		  QtyOnHandPct := Pct(Item.Inventory,QtyOnHand);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50006_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50006;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
