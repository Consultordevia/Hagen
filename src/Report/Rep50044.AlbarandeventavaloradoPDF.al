#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50044_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50044){}   
		type("System.IO.Path"; System_IO_Path50044) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50044 "Albaran de venta valorado PDF"
{
	Caption = 'Sales - Invoice';
	Permissions = TableData "Sales Shipment Buffer"=rimd;
	RDLCLayout = './Layouts/AlbarandeventavaloradoPDF.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Shipment Header";"Sales Shipment Header")
		{
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.","Sell-to Customer No.","No. Printed";
			RequestFilterHeading = 'Posted Sales Invoice';
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number=const(1));
					column(ReportForNavId_3; 3) {} // Autogenerated by ForNav - Do not delete
					column(ALBARAN; 'ALBARAN')
					{
					}
					column(Nopedido__SalesShipmentHeaderOrderNo; 'Nº pedido: '+"Sales Shipment Header"."Order No.")
					{
					}
					column(Pallets__FORMAT_SalesShipmentHeaderNoPalets; 'Pallets:'+Format("Sales Shipment Header"."Nº Palets"))
					{
					}
					column(NroPedido__SalesShipmentHeaderOrderNo; 'Nro Pedido: '+"Sales Shipment Header"."Order No.")
					{
					}
					column(Trasnportista__RectraName; 'Trasnportista: '+Rectra.Name)
					{
					}
					column(TotalBultos__FORMAT_SalesShipmentHeaderTotalbultos_; 'Total Bultos: '+Format("Sales Shipment Header"."Total bultos"))
					{
					}
					column(Noexpedicion__SalesShipmentHeaderNoexpedicion; 'Nº expedición: '+"Sales Shipment Header"."Nº expedición")
					{
					}
					column(SunoRef__SalesShipmentHeaderYourReference; 'Su nº Ref: '+"Sales Shipment Header"."Your Reference")
					{
					}
					column(DireccionEnvio; 'Dirección Envío')
					{
					}
					column(DireccionFiscal; 'Dirección Fiscal')
					{
					}
					column(Notelefono__CustPhoneNo; 'Nº telefono:'+ Cust."Phone No.")
					{
					}
					column(CustAddr7; CustAddr[7])
					{
					}
					column(CustAddr6; CustAddr[6])
					{
					}
					column(CustAddr5; CustAddr[5])
					{
					}
					column(CustAddr4; CustAddr[4])
					{
					}
					column(CustAddr3; CustAddr[3])
					{
					}
					column(CustAddr2; CustAddr[2])
					{
					}
					column(CustAddr1; CustAddr[1])
					{
					}
					column(SalesShipmentHeaderDocumentDate; Format("Sales Shipment Header"."Document Date"))
					{
					}
					column(ShipToAddr8; ShipToAddr[8])
					{
					}
					column(ShipToAddr7; ShipToAddr[7])
					{
					}
					column(Fecha; 'Fecha')
					{
					}
					column(SalesShipmentHeaderNo; "Sales Shipment Header"."No.")
					{
					}
					column(SalesPurchPersonName; SalesPurchPerson.Name)
					{
					}
					column(SalesPersonText; SalesPersonText)
					{
					}
					column(SalesShipmentHeaderBill_toCustomerNo; "Sales Shipment Header"."Bill-to Customer No.")
					{
					}
					column(ShipToAddr6; ShipToAddr[6])
					{
					}
					column(ShipToAddr5; ShipToAddr[5])
					{
					}
					column(ShipToAddr4; ShipToAddr[4])
					{
					}
					column(ShipToAddr3; ShipToAddr[3])
					{
					}
					column(ShipToAddr2; ShipToAddr[2])
					{
					}
					column(SearchName_Cust; Cust."Search Name")
					{
					}
					column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005,Format(ReportForNav.PageNo)))
					{
					}
					dataitem(DimensionLoop1;Integer)
					{
						DataItemLinkReference = SalesShipmentHeader;
						DataItemTableView = sorting(Number) where(Number=filter(1..));
						column(ReportForNavId_37; 37) {} // Autogenerated by ForNav - Do not delete
						column(DimText; DimText)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowInternalInfo then
							  CurrReport.Break;
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then begin
							  if not PostedDocDim1.Find('-') then
								CurrReport.Break;
							end else
							  if not Continue then
								CurrReport.Break;
							Clear(DimText);
							Continue := false;
							repeat
							  OldDimText := DimText;
							  if DimText = '' then
								DimText := StrSubstNo(
								  '%1 %2',PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code")
							  else
								DimText :=
								  StrSubstNo(
									'%1, %2 %3',DimText,
									PostedDocDim1."Dimension Code",PostedDocDim1."Dimension Value Code");
							  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
								DimText := OldDimText;
								Continue := true;
								exit;
							  end;
							until (PostedDocDim1.Next = 0);
						end;
						
					}
					dataitem("Sales Shipment Line";"Sales Shipment Line")
					{
						DataItemLink = "Document No."=field("No.");
						DataItemLinkReference = SalesShipmentHeader;
						DataItemTableView = sorting("Document No.",Ean);
						column(ReportForNavId_39; 39) {} // Autogenerated by ForNav - Do not delete
						column(Importe; 'Importe')
						{
							AutoFormatType = 1;
						}
						column(Preciofinal; 'Precio final')
						{
						}
						column(DtosPct; 'Dtos %')
						{
						}
						column(Prectarifa; 'Prec.tarifa')
						{
							DecimalPlaces = 3:3;
						}
						column(BenfPct; 'Benf %')
						{
						}
						column(PVP; 'PVP')
						{
						}
						column(Cantidad; 'Cantidad')
						{
						}
						column(IVA; 'IVA')
						{
						}
						column(Ean; 'Ean')
						{
						}
						column(Descripcion; 'Descripción')
						{
						}
						column(Referencia; 'Referencia')
						{
						}
						column(Linno; 'Lin.nº')
						{
						}
						column(Importe2; 'Importe')
						{
							AutoFormatExpression = "Sales Shipment Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Dtos; 'Dtos')
						{
						}
						column(Tarifa; 'Tarifa')
						{
							DecimalPlaces = 3:3;
						}
						column(IvaPct; 'Iva%')
						{
						}
						column(SalesShipmentLineVATBaseAmount; "Sales Shipment Line"."VAT Base Amount")
						{
							AutoFormatExpression = "Sales Shipment Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Description; "Sales Shipment Line".Description)
						{
						}
						column(SalesShipmentLineItemChargeBaseAmount; "Sales Shipment Line"."Item Charge Base Amount")
						{
							AutoFormatType = 1;
						}
						column(Preciofinal3; "Precio final")
						{
						}
						column(dto; dto)
						{
						}
						column(precioreco; precioreco)
						{
						}
						column(beneficio; beneficio)
						{
						}
						column(Preciobase; "Precio base")
						{
							DecimalPlaces = 3:3;
						}
						column(Ean4; Ean)
						{
						}
						column(VATPct; "Sales Shipment Line"."VAT %")
						{
						}
						column(Quantity; "Sales Shipment Line".Quantity)
						{
						}
						column(No; "Sales Shipment Line"."No.")
						{
						}
						column(Renglon; Renglon)
						{
							DecimalPlaces = 0:0;
						}
						column(cb; cb)
						{
						}
						column(codiva; codiva)
						{
						}
						column(Preciobase2; "Precio base")
						{
							DecimalPlaces = 2:2;
						}
						column(SalesShipmentLineItemChargeBaseAmount2; "Sales Shipment Line"."Item Charge Base Amount")
						{
							AutoFormatExpression = "Sales Shipment Line".GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(Fechacaducidad; "Fecha caducidad")
						{
						}
						column(Nolote; "Nº lote")
						{
						}
						column(V__Ean__; '*' + Ean + '*')
						{
						}
						column(CIF_CompanyInfoVATRegistrationNo; 'CIF. '+CompanyInfo."VAT Registration No.")
						{
						}
						column(TelEspana__34961200945TelPortugal__351308803400; 'Tel.España: +34 96 120 09 45  Tel.Portugal: +351 308 803 400')
						{
						}
						column(totalrec; totalrec)
						{
						}
						column(TotalRE; 'Total R.E.')
						{
						}
						column(totalbase_totaliva_totalrec; totalbase+totaliva+totalrec)
						{
						}
						column(totaliva; totaliva)
						{
						}
						column(totalbase; totalbase)
						{
						}
						column(PaymentMethodDescription; PaymentMethod.Description)
						{
						}
						column(ShipmentMethodDescription; ShipmentMethod.Description)
						{
						}
						column(PaymentTermsDescription; PaymentTerms.Description)
						{
						}
						column(TotalALBARAN; 'Total ALBARAN')
						{
						}
						dataitem("Sales Shipment Buffer";Integer)
						{
							DataItemTableView = sorting(Number);
							column(ReportForNavId_89; 89) {} // Autogenerated by ForNav - Do not delete
							column(SalesShipmentBufferQuantity; SalesShipmentBuffer.Quantity)
							{
								DecimalPlaces = 0:5;
							}
							column(SalesShipmentBufferPostingDate; SalesShipmentBuffer."Posting Date")
							{
							}
							trigger OnPreDataItem();
							begin
								SalesShipmentBuffer.SetRange("Document No.","Sales Shipment Line"."Document No.");
								SalesShipmentBuffer.SetRange("Line No.","Sales Shipment Line"."Line No.");
								SetRange(Number,1,SalesShipmentBuffer.Count);
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then
								  SalesShipmentBuffer.Find('-')
								else
								  SalesShipmentBuffer.Next;
							end;
							
						}
						dataitem(DimensionLoop2;Integer)
						{
							DataItemTableView = sorting(Number) where(Number=filter(1..));
							column(ReportForNavId_92; 92) {} // Autogenerated by ForNav - Do not delete
							column(DimText3; DimText)
							{
							}
							trigger OnPreDataItem();
							begin
								if not ShowInternalInfo then
								  CurrReport.Break;
								///PostedDocDim2.SETRANGE("Dimension Set ID", "Sales Invoice Line"."Dimension Set ID");
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then begin
								  if not PostedDocDim2.Find('-') then
									CurrReport.Break;
								end else
								  if not Continue then
									CurrReport.Break;
								Clear(DimText);
								Continue := false;
								repeat
								  OldDimText := DimText;
								  if DimText = '' then
									DimText := StrSubstNo(
									  '%1 %2',PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code")
								  else
									DimText :=
									  StrSubstNo(
										'%1, %2 %3',DimText,
										PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code");
								  if StrLen(DimText) > MaxStrLen(OldDimText) then begin
									DimText := OldDimText;
									Continue := true;
									exit;
								  end;
								until (PostedDocDim2.Next = 0);
							end;
							
						}
						trigger OnPreDataItem();
						begin
							VATAmountLine.DeleteAll;
							SalesShipmentBuffer.Reset;
							SalesShipmentBuffer.DeleteAll;
							FirstValueEntryNo := 0;
							MoreLines := Find('+');
							while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) do
							  MoreLines := Next(-1) <> 0;
							if not MoreLines then
							///  CurrReport.BREAK;
							SetRange("Line No.",0,"Line No.");
							/// CREATETOTALS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount","Pmt. Disc. Given Amount");
						end;
						
						trigger OnAfterGetRecord();
						begin
							if "Sales Shipment Line".Quantity=0 then begin
								 CurrReport.Skip;
							end;
							if "Sales Shipment Line"."NO imprimir en albaran" then begin
								 CurrReport.Skip;
							end;
							if "Sales Shipment Header"."Usuario alta"='USERNWS' then begin
								 if "Sales Shipment Line"."Precio base"=0 then begin
									  "Sales Shipment Line"."Precio base":="Sales Shipment Line"."Unit Price";
								 end;
							end;
							Renglon:=Renglon+1;
							dto:='';
							if ("Sales Shipment Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Shipment Line"."% Dto. vendedor"<>0) and
							   ("Sales Shipment Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Shipment Line"."% Dto. vendedor")+'+'+
									  Format("Sales Shipment Line"."Dto% cabecera/oferta")+'+'+
									  Format("Sales Shipment Line"."Line Discount %");
							end;
							if ("Sales Shipment Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Shipment Line"."% Dto. vendedor"=0) and
							   ("Sales Shipment Line"."Line Discount %"=0)then begin
								 dto:=Format("Sales Shipment Line"."Dto% cabecera/oferta");
							end;
							if ("Sales Shipment Line"."Dto% cabecera/oferta"=0) and
							   ("Sales Shipment Line"."% Dto. vendedor"<>0) and
							   ("Sales Shipment Line"."Line Discount %"=0)then begin
								 dto:=Format("Sales Shipment Line"."% Dto. vendedor");
							end;
							if ("Sales Shipment Line"."Dto% cabecera/oferta"=0) and
							   ("Sales Shipment Line"."% Dto. vendedor"=0) and
							   ("Sales Shipment Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Shipment Line"."Line Discount %");
							end;
							if ("Sales Shipment Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Shipment Line"."% Dto. vendedor"<>0) and
							   ("Sales Shipment Line"."Line Discount %"=0)then begin
								 dto:=Format("Sales Shipment Line"."% Dto. vendedor")+'+'+
									  Format("Sales Shipment Line"."Dto% cabecera/oferta");
							end;
							if ("Sales Shipment Line"."Dto% cabecera/oferta"<>0) and
							   ("Sales Shipment Line"."% Dto. vendedor"=0) and
							   ("Sales Shipment Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Shipment Line"."Dto% cabecera/oferta")+'+'+
									  Format("Sales Shipment Line"."Line Discount %");
							end;
							if ("Sales Shipment Line"."Dto% cabecera/oferta"=0) and
							   ("Sales Shipment Line"."% Dto. vendedor"<>0) and
							   ("Sales Shipment Line"."Line Discount %"<>0)then begin
								 dto:=Format("Sales Shipment Line"."% Dto. vendedor")+'+'+
									  Format("Sales Shipment Line"."Line Discount %");
							end;
							PostedShipmentDate := 0D;
							if Quantity <> 0 then
							  PostedShipmentDate := FindPostedShipmentDate;
							if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
							  "No." := '';
							if VATPostingSetup.Get("Sales Shipment Line"."VAT Bus. Posting Group","Sales Shipment Line"."VAT Prod. Posting Group") then begin
								VATAmountLine.Init;
							///	VATAmountLine."VAT Identifier" := "Sales Shipment Line"."VAT Identifier";
								VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
								VATAmountLine."Tax Group Code" := "Tax Group Code";
								VATAmountLine."VAT %" := VATPostingSetup."VAT %";
								VATAmountLine."EC %" := VATPostingSetup."EC %";
							codiva:=Format(VATPostingSetup."VAT %");
							if VATPostingSetup."EC %"<>0 then begin
								 codiva:=codiva+'+'+Format(VATPostingSetup."EC %");
							end;
								VATAmountLine."VAT Base" := "Sales Shipment Line"."VAT Base Amount";
								VATAmountLine."Amount Including VAT" :="Sales Shipment Line"."VAT Base Amount";
								VATAmountLine."Line Amount" :="Sales Shipment Line"."VAT Base Amount";
								/*VATAmountLine."Pmt. Disc. Given Amount" := "Pmt. Disc. Given Amount";
								IF "Allow Invoice Disc." THEN
								  VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
								VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
								*/
								VATAmountLine.SetCurrencyCode("Sales Shipment Header"."Currency Code");
							///	VATAmountLine."VAT Difference" := "VAT Difference";
							///	VATAmountLine."EC Difference" := "EC Difference";
								if "Sales Shipment Header"."Prices Including VAT" then
								  VATAmountLine."Prices Including VAT" := true;
								VATAmountLine.InsertLine;
							end;
							cb:='';
							precioreco:=0;
							FRAGIL:=false;
							if RecItem.Get("Sales Shipment Line"."No.") then begin
								 precioreco:=RecItem."Precio recomendado";
								 cb:=RecItem.ean;
								 FRAGIL:=RecItem."Producto FRAGIL";
							end;
							RecTVP.Reset;
							RecTVP.SetRange(RecTVP."Item No.","Sales Shipment Line"."No.");
							if RecTVP.FindFirst then begin
								 precioreco:=RecTVP."Precio recomendado";
							end;
							RecTVP.Reset;
							RecTVP.SetRange(RecTVP."Item No.","Sales Shipment Line"."No.");
							RecTVP.SetRange(RecTVP."Sales Code","Sales Shipment Line"."Customer Price Group");
							if RecTVP.FindFirst then begin
								 precioreco:=RecTVP."Precio recomendado";
							end;
							beneficio:=0;
							if "Sales Shipment Line".Quantity<>0 then begin
								 if precioreco<>0 then begin
									  if "Sales Shipment Line"."Precio base"<>0 then begin
									  beneficio:=ROUND(((precioreco-"Sales Shipment Line"."Precio base")/"Sales Shipment Line"."Precio base")*100,0.01);
									  end;
								 end;
							end;
							totalbase:=totalbase+"Sales Shipment Line"."Item Charge Base Amount";
							totalrec:=totalrec+ROUND("Sales Shipment Line"."Item Charge Base Amount"*VATPostingSetup."EC %",0.01)/100;
							totaliva:=totaliva+ROUND("Sales Shipment Line"."Item Charge Base Amount"*"Sales Shipment Line"."VAT %",0.01)/100;
							totalfac:=totaliva+
							"Sales Shipment Line"."Item Charge Base Amount"+
							+ROUND("Sales Shipment Line"."Item Charge Base Amount"*"Sales Shipment Line"."VAT %",0.01)/100+
							+ROUND("Sales Shipment Line"."Item Charge Base Amount"*VATPostingSetup."EC %",0.01)/100;
						
						end;
						
					}
					dataitem(VATCounter;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_94; 94) {} // Autogenerated by ForNav - Do not delete
						column(VATAmountLineECPct; VATAmountLine."EC %")
						{
							AutoFormatExpression = "Sales Shipment Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineECAmount; VATAmountLine."EC Amount")
						{
							AutoFormatExpression = "Sales Shipment Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineInvoiceDiscountAmount_VATAmountLinePmtDiscGiven; VATAmountLine."Invoice Discount Amount" + VATAmountLine."Pmt. Disc. Given Amount")
						{
							AutoFormatExpression = "Sales Shipment Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineInvDiscBaseAmount; VATAmountLine."Inv. Disc. Base Amount")
						{
							AutoFormatExpression = "Sales Shipment Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineLineAmount; VATAmountLine."Line Amount")
						{
							AutoFormatExpression = "Sales Shipment Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATIdentifier; VATAmountLine."VAT Identifier")
						{
						}
						column(VATAmountLineVATAmount; VATAmountLine."VAT Amount")
						{
							AutoFormatExpression = "Sales Shipment Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVAT_ECBase; VATAmountLine."VAT Base")
						{
							AutoFormatExpression = "Sales Shipment Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmountLineVATPct; VATAmountLine."VAT %")
						{
							DecimalPlaces = 0:6;
						}
						trigger OnPreDataItem();
						begin
							SetRange(Number,1,VATAmountLine.Count);
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
						end;
						
					}
					dataitem(VatCounterLCY;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_104; 104) {} // Autogenerated by ForNav - Do not delete
						column(VALExchRate; VALExchRate)
						{
						}
						column(VALSpecLCYHeader; VALSpecLCYHeader)
						{
						}
						column(VALVATAmountLCY; VALVATAmountLCY)
						{
							AutoFormatType = 1;
						}
						column(VALVATBaseLCY; VALVATBaseLCY)
						{
							AutoFormatType = 1;
						}
						column(VATAmountLineVATIdentifier2; VATAmountLine."VAT Identifier")
						{
						}
						column(VATAmountLineVATPct2; VATAmountLine."VAT %")
						{
							DecimalPlaces = 0:5;
						}
						trigger OnPreDataItem();
						begin
							if (not GLSetup."Print VAT specification in LCY") or
							   ("Sales Shipment Header"."Currency Code"  = '') or
							   (VATAmountLine.GetTotalVATAmount = 0) then
							  CurrReport.Break;
							SetRange(Number,1,VATAmountLine.Count);
							if GLSetup."LCY Code" = '' then
							  VALSpecLCYHeader := Text007 + Text008
							else
							  VALSpecLCYHeader := Text007 + Format(GLSetup."LCY Code");
							CurrExchRate.FindCurrency("Sales Shipment Header"."Posting Date","Sales Shipment Header"."Currency Code",1);
							CalculatedExchRate := ROUND(1 / "Sales Shipment Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount",0.000001);
							VALExchRate := StrSubstNo(Text009,CalculatedExchRate,CurrExchRate."Exchange Rate Amount");
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
							VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Sales Shipment Header"."Currency Factor");
							VALVATAmountLCY :=ROUND(VATAmountLine."VAT Amount" / "Sales Shipment Header"."Currency Factor");
						end;
						
					}
					dataitem(Total;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_111; 111) {} // Autogenerated by ForNav - Do not delete
					}
					dataitem(Total2;Integer)
					{
						DataItemTableView = sorting(Number) where(Number=const(1));
						column(ReportForNavId_112; 112) {} // Autogenerated by ForNav - Do not delete
						trigger OnPreDataItem();
						begin
							if not ShowShippingAddr then
							  CurrReport.Break;
						end;
						
					}
				}
				trigger OnPreDataItem();
				begin
					NoOfLoops := Abs(NoOfCopies) + Cust."Invoice Copies" + 1;
					if NoOfLoops <= 0 then
					  NoOfLoops := 1;
					CopyText := '';
					SetRange(Number,1,NoOfLoops);
				end;
				
				trigger OnAfterGetRecord();
				begin
					if Number > 1 then
					  CopyText := Text003;
					
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				///IF EXISTS('\\192.168.0.225\compartido\CABECERA.BMP') THEN BEGIN
					 ///"Sales Shipment Header"."Logo cabecera".IMPORT('\\192.168.0.225\compartido\CABECERA.BMP',FALSE);
				///END;
				CurrReport.Language := Language.GetLanguageID("Language Code");
				VALORADO:="Sales Shipment Header"."nuloAlbaran valorado";
				Rectra.Init;
				if Rectra.Get("Sales Shipment Header"."Shipping Agent Code") then begin
				end;
				DETALLEPVP:=false;
				if RecClie.Get("Sales Shipment Header"."Sell-to Customer No.") then begin
					 DETALLEPVP:=RecClie."Factura con PVP";
				end;
				if RespCenter.Get("Responsibility Center") then begin
				  FormatAddr.RespCenter(CompanyAddr,RespCenter);
				  CompanyInfo."Phone No." := RespCenter."Phone No.";
				  CompanyInfo."Fax No." := RespCenter."Fax No.";
				end else begin
				  FormatAddr.Company(CompanyAddr,CompanyInfo);
				end;
				if "Order No." = '' then
				  OrderNoText := ''
				else
				  OrderNoText := FieldCaption("Order No.");
				if "Salesperson Code" = '' then begin
				  SalesPurchPerson.Init;
				  SalesPersonText := '';
				end else begin
				  SalesPurchPerson.Get("Salesperson Code");
				  SalesPersonText := Text000;
				end;
				if "Your Reference" = '' then
				  ReferenceText := ''
				else
				  ReferenceText := FieldCaption("Your Reference");
				if "VAT Registration No." = '' then
				  VATNoText := ''
				else
				  VATNoText := FieldCaption("VAT Registration No.");
				if "Currency Code" = '' then begin
				  GLSetup.TestField("LCY Code");
				  TotalText := StrSubstNo(Text001,GLSetup."LCY Code");
				  TotalInclVATText := StrSubstNo(Text1100000,GLSetup."LCY Code");
				  TotalExclVATText := StrSubstNo(Text1100001,GLSetup."LCY Code");
				end else begin
				  TotalText := StrSubstNo(Text001,"Currency Code");
				  TotalInclVATText := StrSubstNo(Text1100000,"Currency Code");
				  TotalExclVATText := StrSubstNo(Text1100001,"Currency Code");
				end;
				FormatAddr.SalesShptSellTo(CustAddr,"Sales Shipment Header");
				if not Cust.Get("Bill-to Customer No.") then
				  Clear(Cust);
				if "Payment Terms Code" = '' then
				  PaymentTerms.Init
				else begin
				  PaymentTerms.Get("Payment Terms Code");
				  PaymentTerms.TranslateDescription(PaymentTerms,"Language Code");
				end;
				if "Payment Method Code" = '' then
				  PaymentMethod.Init
				else
				  PaymentMethod.Get("Payment Method Code");
				if "Shipment Method Code" = '' then
				  ShipmentMethod.Init
				else begin
				  ShipmentMethod.Get("Shipment Method Code");
				  ShipmentMethod.TranslateDescription(ShipmentMethod,"Language Code");
				end;
				FormatAddr.SalesShptShipTo(ShipToAddr,"Sales Shipment Header");
				ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
				for i := 1 to ArrayLen(ShipToAddr) do
				  if ShipToAddr[i] <> CustAddr[i] then
					ShowShippingAddr := true;
				/*
				IF LogInteraction THEN
				  IF NOT CurrReport.PREVIEW THEN BEGIN
					IF "Bill-to Contact No." <> '' THEN
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Contact,"Bill-to Contact No.","Salesperson Code",
						"Campaign No.","Posting Description",'')
					ELSE
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Customer,"Bill-to Customer No.","Salesperson Code",
						"Campaign No.","Posting Description",'');
				  END;
				*/
				CustAddrdf[1]:=CustAddr[1];
				CustAddrdf[2]:=CustAddr[2];
				CustAddrdf[3]:=CustAddr[3];
				CustAddrdf[4]:=CustAddr[4];
				CustAddrdf[5]:=CustAddr[5];
				CustAddrdf[6]:=CustAddr[6];
				CustAddrdf[7]:=CustAddr[7];
				CustAddrdf[8]:=CustAddr[8];
				if UserId='20' then begin
					 if "Sales Shipment Header"."Shipping Agent Code"='DHL' then begin
						  Rec110.Reset;
						  Rec110.SetRange(Rec110."No.","Sales Shipment Header"."No.");
						  if Rec110.FindFirst then begin
							   ///CUEXP.EtiDHL2(Rec110);
						  end;
					 end;
					 if "Sales Shipment Header"."Shipping Agent Code"='SEUR' then begin
						  Rec110.Reset;
						  Rec110.SetRange(Rec110."No.","Sales Shipment Header"."No.");
						  if Rec110.FindFirst then begin
							   ///CUEXP.EtiSEUR(Rec110);
						  end;
					 end;
					 /*IF "Sales Shipment Header"."Shipping Agent Code"='CLI' THEN BEGIN
						  CLEAR(REP50033);
						  Rec110.RESET;
						  Rec110.SETRANGE(Rec110."No.","Sales Shipment Header"."No.");
						  IF Rec110.FINDFIRST THEN BEGIN
							   REP50033.SETTABLEVIEW(Rec110);
							   REP50033.RUNMODAL;
						  END;
					 END;
					 */
					 CUEXP.ENVIOSMS("Sales Shipment Header");
				end;
			
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies;NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowInternalInfo;ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
					field(LogInteraction;LogInteraction)
					{
						ApplicationArea = Basic;
						Caption = 'Log Interaction';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			InitLogInteraction;
			; // TODO RequestRequestOptionsPage.LogInteraction.ENABLED(LogInteraction);
		end;

	}

	trigger OnInitReport()
	begin
		GLSetup.Get;
		CompanyInfo.Get;
		SalesSetup.Get;
		case SalesSetup."Logo Position on Documents" of
		  SalesSetup."logo position on documents"::"No Logo":;
		  SalesSetup."logo position on documents"::Left:
			begin
			  CompanyInfo.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Center:
			begin
			  CompanyInfo1.Get;
			  CompanyInfo1.CalcFields(Picture);
			end;
		  SalesSetup."logo position on documents"::Right:
			begin
			  CompanyInfo2.Get;
			  CompanyInfo2.CalcFields(Picture);
			end;
		end;
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		/*
				  IF "Sales Shipment Header"."Albaran sin detalle" THEN BEGIN
					   Rec110.RESET;
					   Rec110.SETRANGE(Rec110."No.","Sales Shipment Header"."No.");
					   IF Rec110.FINDFIRST THEN BEGIN
							RepSV.SETTABLEVIEW(Rec110);
							RepSV.RUN;
					   END;
				  END;
		 */
		;ReportForNav.Post;

	end;

	trigger OnPreReport()
	begin
		if not CurrReport.UseRequestPage then
		  InitLogInteraction;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Salesperson';
		Text001: label 'Total %1';
		Text002: label 'Total %1 Incl. VAT';
		Text003: label 'COPY';
		Text004: label 'Sales - Invoice %1';
		Text005: label 'Page %1';
		Text006: label 'Total %1 Excl. VAT';
		GLSetup: Record "General Ledger Setup";
		ShipmentMethod: Record "Shipment Method";
		PaymentTerms: Record "Payment Terms";
		SalesPurchPerson: Record "Salesperson/Purchaser";
		CompanyInfo: Record "Company Information";
		CompanyInfo1: Record "Company Information";
		CompanyInfo2: Record "Company Information";
		SalesSetup: Record "Sales & Receivables Setup";
		Cust: Record Customer;
		VATAmountLine: Record "VAT Amount Line" temporary;
		PostedDocDim1: Record "Dimension Set Entry";
		PostedDocDim2: Record "Dimension Set Entry";
		RespCenter: Record "Responsibility Center";
		Language: Record Language;
		CurrExchRate: Record "Currency Exchange Rate";
		SalesInvCountPrinted: Codeunit "Sales Inv.-Printed";
		FormatAddr: Codeunit "Format Address";
		SegManagement: Codeunit SegManagement;
		SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
		PostedShipmentDate: Date;
		CustAddr: array [8] of Text[50];
		CustAddrdf: array [8] of Text[50];
		ShipToAddr: array [8] of Text[50];
		CompanyAddr: array [8] of Text[50];
		OrderNoText: Text[30];
		SalesPersonText: Text[30];
		VATNoText: Text[30];
		ReferenceText: Text[30];
		TotalText: Text[50];
		TotalExclVATText: Text[50];
		TotalInclVATText: Text[50];
		MoreLines: Boolean;
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		CopyText: Text[30];
		ShowShippingAddr: Boolean;
		i: Integer;
		NextEntryNo: Integer;
		FirstValueEntryNo: Integer;
		DimText: Text[120];
		OldDimText: Text[75];
		ShowInternalInfo: Boolean;
		Continue: Boolean;
		LogInteraction: Boolean;
		VALVATBaseLCY: Decimal;
		VALVATAmountLCY: Decimal;
		VALSpecLCYHeader: Text[80];
		Text007: label 'VAT Amount Specification in ';
		Text008: label 'Local Currency';
		VALExchRate: Text[50];
		Text009: label 'Exchange rate: %1/%2';
		CalculatedExchRate: Decimal;
		Text010: label 'Sales - Prepayment Invoice %1';
		Text1100000: label 'Total %1 Incl. VAT+EC';
		Text1100001: label 'Total %1 Excl. VAT+EC';
		VATPostingSetup: Record "VAT Posting Setup";
		PaymentMethod: Record "Payment Method";
		dto: Code[50];
		cb: Code[20];
		precioreco: Decimal;
		beneficio: Decimal;
		RecItem: Record Item;
		totalbase: Decimal;
		totaliva: Decimal;
		totalfac: Decimal;
		VALORADO: Boolean;
		Rectra: Record "Shipping Agent";
		Renglon: Integer;
		FRAGIL: Boolean;
		Rec110: Record "Sales Shipment Header";
		RepSV: Report "Albaran sin detalle";
		codiva: Code[10];
		RecTVP: Record "Sales Price";
		CUEXP: Codeunit UnknownCodeunit50010;
		REP50033: Report "Etiqueta Envio";
		totalrec: Decimal;
		INFOLINEA: Text[250];
		PV: Decimal;
		BF: Decimal;
		PV2: Decimal;
		DETALLEPVP: Boolean;
		RecClie: Record Customer;
		Table111: Record "Sales Shipment Line";

	procedure InitLogInteraction()
	begin
		LogInteraction := SegManagement.FindInteractTmplCode(4) <> '';
	end;

	procedure FindPostedShipmentDate(): Date
	var
		SalesShipmentHeader: Record "Sales Shipment Header";
		SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
	begin
		NextEntryNo := 1;
	end;

	procedure GenerateBufferFromValueEntry(SalesInvoiceLine2: Record "Sales Invoice Line")
	var
		ValueEntry: Record "Value Entry";
		ItemLedgerEntry: Record "Item Ledger Entry";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
		TotalQuantity := SalesInvoiceLine2."Quantity (Base)";
	end;

	procedure GenerateBufferFromShipment(SalesInvoiceLine: Record "Sales Invoice Line")
	var
		SalesInvoiceHeader: Record "Sales Invoice Header";
		SalesInvoiceLine2: Record "Sales Invoice Line";
		SalesShipmentHeader: Record "Sales Shipment Header";
		SalesShipmentLine: Record "Sales Shipment Line";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
	end;

	procedure CorrectShipment(var SalesShipmentLine: Record "Sales Shipment Line")
	var
		SalesInvoiceLine: Record "Sales Invoice Line";
	begin
		SalesInvoiceLine.SetCurrentkey("Shipment No.","Shipment Line No.");
		SalesInvoiceLine.SetRange("Shipment No.",SalesShipmentLine."Document No.");
		SalesInvoiceLine.SetRange("Shipment Line No.",SalesShipmentLine."Line No.");
		if SalesInvoiceLine.Find('-') then
		   repeat
			  SalesShipmentLine.Quantity := SalesShipmentLine.Quantity - SalesInvoiceLine.Quantity;
		   until SalesInvoiceLine.Next = 0;
	end;

	procedure AddBufferEntry(SalesInvoiceLine: Record "Sales Invoice Line";QtyOnShipment: Decimal;PostingDate: Date)
	begin
		SalesShipmentBuffer.SetRange("Document No.",SalesInvoiceLine."Document No.");
		SalesShipmentBuffer.SetRange("Line No.",SalesInvoiceLine."Line No.");
		SalesShipmentBuffer.SetRange("Posting Date",PostingDate);
		if SalesShipmentBuffer.Find('-') then begin
		  SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity + QtyOnShipment;
		  SalesShipmentBuffer.Modify;
		  exit;
		end;
		with SalesShipmentBuffer do begin
		  "Document No." := SalesInvoiceLine."Document No.";
		  "Line No." := SalesInvoiceLine."Line No.";
		  "Entry No." := NextEntryNo;
		  Type := SalesInvoiceLine.Type;
		  "No." := SalesInvoiceLine."No.";
		  Quantity := QtyOnShipment;
		 "Posting Date" := PostingDate;
		  Insert;
		  NextEntryNo := NextEntryNo + 1
		end;
	end;

	local procedure DocumentCaption(): Text[250]
	begin
	end;

	procedure GetCarteraInvoice(): Boolean
	var
		CustLedgEntry: Record "Cust. Ledger Entry";
	begin
	end;

	local procedure OnPreSectionDimensionLoop1_Body2(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number = 1);
		end;
	end;
	local procedure OnPreSectionDimensionLoop1_Body3(var DimensionLoop1 : Record Integer);
	begin
		with DimensionLoop1 do begin
		  ReportForNav.ShowOutput(Number > 1);
		end;
	end;
	local procedure OnPreSectionTable111_Header4(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput(GetCarteraInvoice);
		end;
	end;
	local procedure OnPreSectionTable111_Header5(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput(DETALLEPVP=true);
		end;
	end;
	local procedure OnPreSectionTable111_Header6(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((VALORADO) and (DETALLEPVP=false));
		end;
	end;
	local procedure OnPreSectionTable111_Header7(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((not VALORADO) and (DETALLEPVP=true));
		end;
	end;
	local procedure OnPreSectionTable111_Body9(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput(Type = 0);
		end;
	end;
	local procedure OnPreSectionTable111_Body10(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput(DETALLEPVP=true);
		end;
	end;
	local procedure OnPreSectionTable111_Body11(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((Type > 0) and (VALORADO) and (not FRAGIL) and (DETALLEPVP=false));
		end;
	end;
	local procedure OnPreSectionTable111_Body12(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((Type > 0) and (VALORADO) and FRAGIL and (DETALLEPVP=false));
		end;
	end;
	local procedure OnPreSectionTable111_Body13(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((Type > 0) and (not VALORADO) and (not FRAGIL) and (DETALLEPVP=false));
		end;
	end;
	local procedure OnPreSectionTable111_Body14(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((Type > 0) and (not VALORADO) and FRAGIL and (DETALLEPVP=false));
		end;
	end;
	local procedure OnPreSectionTable111_Body15(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput("Sales Shipment Line"."Nº lote"<>'');
		end;
	end;
	local procedure OnPreSectionTable111_Footer21(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput((not "Sales Shipment Header"."Prices Including VAT") and (VALORADO));
		end;
	end;
	local procedure OnPreSectionTable111_Footer23(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput("Sales Shipment Header"."Prices Including VAT" and
		  (VATAmountLine."VAT Calculation Type" <> VATAmountLine."vat calculation type"::"Reverse Charge VAT"));
		end;
	end;
	local procedure OnPreSectionTable111_Footer24(var "Sales Shipment Line" : Record "Sales Shipment Line");
	begin
		with Table111 do begin
		  ReportForNav.ShowOutput("Sales Shipment Header"."Prices Including VAT" and
		  (VATAmountLine."VAT Calculation Type" = VATAmountLine."vat calculation type"::"Reverse Charge VAT"));
		end;
	end;
	local procedure OnPreSectionVATCounter_Header27(var VATCounter : Record Integer);
	begin
		with VATCounter do begin
		  ReportForNav.ShowOutput(VALORADO);
		end;
	end;
	local procedure OnPreSectionVATCounter_Body29(var VATCounter : Record Integer);
	begin
		with VATCounter do begin
		  ReportForNav.ShowOutput(VALORADO);
		  if VATAmountLine."VAT Amount" = 0 then
			VATAmountLine."VAT %" := 0;
		  if VATAmountLine."EC Amount" = 0 then
			VATAmountLine."EC %" := 0;
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50044_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50044;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
