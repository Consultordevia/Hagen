#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50292_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50292){}   
		type("System.IO.Path"; System_IO_Path50292) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50292 "Carta 347 proveedor detalle"
{
	RDLCLayout = './Layouts/Carta347proveedordetalle.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Vendor;Vendor)
		{
			CalcFields = "Inv. Amounts (LCY)","Cr. Memo Amounts (LCY)";
			DataItemTableView = sorting("VAT Registration No.") where("VAT Registration No."=filter(<>''),"Country/Region Code"=const('ES'));
			RequestFilterFields = "VAT Registration No.","No.";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(Proveedor; 'Proveedor')
			{
			}
			column(V1oTrim; '1ยบ Trim.')
			{
				AutoFormatType = 1;
			}
			column(V2oTrim; '2ยบ Trim.')
			{
				AutoFormatType = 1;
			}
			column(V3oTrim; '3ยบ Trim.')
			{
				AutoFormatType = 1;
			}
			column(V4oTrim; '4ยบ Trim.')
			{
				AutoFormatType = 1;
			}
			column(Total; 'Total')
			{
				AutoFormatType = 1;
			}
			column(IMPNSUIRPF1_IMPNSUIRPF2_IMPNSUIRPF3_IMPNSUIRPF4; IMPNSUIRPF1+IMPNSUIRPF2+IMPNSUIRPF3+IMPNSUIRPF4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPNSUIRPF4; IMPNSUIRPF4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPNSUIRPF3; IMPNSUIRPF3)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPNSUIRPF2; IMPNSUIRPF2)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPNSUIRPF1; IMPNSUIRPF1)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IRPF; 'IRPF')
			{
			}
			column(Total2; 'Total')
			{
			}
			column(IMPNSU1_IMPNSU2_IMPNSU3_IMPNSU4; IMPNSU1+IMPNSU2+IMPNSU3+IMPNSU4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(Normal; 'Normal')
			{
			}
			column(SujetoPas; 'Sujeto Pas')
			{
			}
			column(IMP1_IMP2_IMP3_IMP4_IMPSU1_IMPSU2_IMPSU3_IMPSU4_IMPNSU1_IMPN; (IMP1+IMP2+IMP3+IMP4)-(IMPSU1+IMPSU2+IMPSU3+IMPSU4+IMPNSU1+IMPNSU2+IMPNSU3+IMPNSU4+IMPNSUIRPF1+IMPNSUIRPF2+IMPNSUIRPF3+IMPNSUIRPF4))
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPSU1_IMPSU2_IMPSU3_IMPSU4; IMPSU1+IMPSU2+IMPSU3+IMPSU4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(VendorVATRegistrationNo; Vendor."VAT Registration No.")
			{
			}
			column(IMPNSU4; IMPNSU4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPSU4; IMPSU4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPNSU3; IMPNSU3)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPSU3; IMPSU3)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPNSU2; IMPNSU2)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPSU2; IMPSU2)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPNSU1; IMPNSU1)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMPSU1; IMPSU1)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP4; IMP4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP2; IMP2)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP3; IMP3)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP1; IMP1)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(IMP1_IMP2_IMP3_IMP4; IMP1+IMP2+IMP3+IMP4)
			{
				AutoFormatExpression = Vendor."Currency Code";
				AutoFormatType = 1;
			}
			column(Name; Vendor.Name)
			{
			}
			trigger OnPreDataItem();
			begin
				LastFieldNo := FieldNo("VAT Registration No.");
				SetRange("Date Filter",DESDE[1],HASTA[4]);
				RecIE.Get;
			end;
			
			trigger OnAfterGetRecord();
			begin
				if CODCIF<>Vendor."VAT Registration No." then begin
					 IMP1:=0;
					 IMP2:=0;
					 IMP3:=0;
					 IMP4:=0;
				IMPSU1:=0;
				IMPNSU1:=0;
				IMPSU2:=0;
				IMPNSU2:=0;
				IMPSU3:=0;
				IMPNSU3:=0;
				IMPSU4:=0;
				IMPNSU4:=0;
				IMPNSUIRPF1:=0;
				IMPNSUIRPF2:=0;
				IMPNSUIRPF3:=0;
				IMPNSUIRPF4:=0;
					 CODCIF:=Vendor."VAT Registration No.";
				end;
				SetRange("Date Filter",DESDE[1],HASTA[4]);
				ImpVentas := ("Inv. Amounts (LCY)" - "Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Vendor."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[1],HASTA[1]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP1 := IMP1 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Vendor."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[2],HASTA[2]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP2 := IMP2 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Vendor."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[3],HASTA[3]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP3 := IMP3 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				RecClie.Reset;
				RecClie.Get(Vendor."No.");
				RecClie.SetRange(RecClie."Date Filter",DESDE[4],HASTA[4]);
				RecClie.CalcFields(RecClie."Inv. Amounts (LCY)",RecClie. "Cr. Memo Amounts (LCY)");
				IMP4 := IMP4 + (RecClie."Inv. Amounts (LCY)" -RecClie."Cr. Memo Amounts (LCY)");
				Rec122.Reset;
				Rec122.SetCurrentkey(Rec122."Pay-to Vendor No.");
				Rec122.SetRange(Rec122."Pay-to Vendor No.",Vendor."No.");
				Rec122.SetRange(Rec122."Posting Date",DESDE[1],HASTA[1]);
				if Rec122.FindFirst then repeat
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  IRPF:=false;
						  if Rec123.Type=1 then begin
							   if RecCuen.Get(Rec123."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec123.Next=0;
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF1:=IMPNSUIRPF1+(Rec123."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec123."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU1:=IMPSU1+(Rec123."Amount Including VAT");
							   end;
							   if Rec123."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU1:=IMPNSU1+(Rec123."Amount Including VAT");
							   end;
						  end;
					 until Rec123.Next=0;
				until Rec122.Next=0;
				Rec122.Reset;
				Rec122.SetCurrentkey(Rec122."Pay-to Vendor No.");
				Rec122.SetRange(Rec122."Pay-to Vendor No.",Vendor."No.");
				Rec122.SetRange(Rec122."Posting Date",DESDE[2],HASTA[2]);
				if Rec122.FindFirst then repeat
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  IRPF:=false;
						  if Rec123.Type=1 then begin
							   if RecCuen.Get(Rec123."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec123.Next=0;
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF2:=IMPNSUIRPF2+(Rec123."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec123."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU2:=IMPSU2+(Rec123."Amount Including VAT");
							   end;
							   if Rec123."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU2:=IMPNSU2+(Rec123."Amount Including VAT");
							   end;
						  end;
					 until Rec123.Next=0;
				until Rec122.Next=0;
				Rec122.Reset;
				Rec122.SetCurrentkey(Rec122."Pay-to Vendor No.");
				Rec122.SetRange(Rec122."Pay-to Vendor No.",Vendor."No.");
				Rec122.SetRange(Rec122."Posting Date",DESDE[3],HASTA[3]);
				if Rec122.FindFirst then repeat
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  IRPF:=false;
						  if Rec123.Type=1 then begin
							   if RecCuen.Get(Rec123."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec123.Next=0;
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF3:=IMPNSUIRPF3+(Rec123."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec123."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU3:=IMPSU3+(Rec123."Amount Including VAT");
							   end;
							   if Rec123."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU3:=IMPNSU3+(Rec123."Amount Including VAT");
							   end;
						  end;
					 until Rec123.Next=0;
				until Rec122.Next=0;
				Rec122.Reset;
				Rec122.SetCurrentkey(Rec122."Pay-to Vendor No.");
				Rec122.SetRange(Rec122."Pay-to Vendor No.",Vendor."No.");
				Rec122.SetRange(Rec122."Posting Date",DESDE[4],HASTA[4]);
				if Rec122.FindFirst then repeat
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  IRPF:=false;
						  if Rec123.Type=1 then begin
							   if RecCuen.Get(Rec123."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec123.Next=0;
					 Rec123.Reset;
					 Rec123.SetRange(Rec123."Document No.",Rec122."No.");
					 if Rec123.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF4:=IMPNSUIRPF4+(Rec123."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec123."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU4:=IMPSU4+(Rec123."Amount Including VAT");
							   end;
							   if Rec123."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU4:=IMPNSU4+(Rec123."Amount Including VAT");
							   end;
						  end;
					 until Rec123.Next=0;
				until Rec122.Next=0;
				////////////////////////////
				///// ABONOS
				////////////////////////////
				Rec124.Reset;
				Rec124.SetCurrentkey(Rec124."Pay-to Vendor No.");
				Rec124.SetRange(Rec124."Pay-to Vendor No.",Vendor."No.");
				Rec124.SetRange(Rec124."Posting Date",DESDE[1],HASTA[1]);
				if Rec124.FindFirst then repeat
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  IRPF:=false;
						  if Rec125.Type=1 then begin
							   if RecCuen.Get(Rec125."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec125.Next=0;
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF1:=IMPNSUIRPF1-(Rec125."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec125."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU1:=IMPSU1-(Rec125."Amount Including VAT");
							   end;
							   if Rec125."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU1:=IMPNSU1-(Rec125."Amount Including VAT");
							   end;
						  end;
					 until Rec125.Next=0;
				until Rec124.Next=0;
				Rec124.Reset;
				Rec124.SetCurrentkey(Rec124."Pay-to Vendor No.");
				Rec124.SetRange(Rec124."Pay-to Vendor No.",Vendor."No.");
				Rec124.SetRange(Rec124."Posting Date",DESDE[2],HASTA[2]);
				if Rec124.FindFirst then repeat
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  IRPF:=false;
						  if Rec125.Type=1 then begin
							   if RecCuen.Get(Rec125."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec125.Next=0;
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF2:=IMPNSUIRPF2-(Rec125."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec125."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU2:=IMPSU2-(Rec125."Amount Including VAT");
							   end;
							   if Rec125."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU2:=IMPNSU2-(Rec125."Amount Including VAT");
							   end;
						  end;
					 until Rec125.Next=0;
				until Rec124.Next=0;
				Rec124.Reset;
				Rec124.SetCurrentkey(Rec124."Pay-to Vendor No.");
				Rec124.SetRange(Rec124."Pay-to Vendor No.",Vendor."No.");
				Rec124.SetRange(Rec124."Posting Date",DESDE[3],HASTA[3]);
				if Rec124.FindFirst then repeat
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  IRPF:=false;
						  if Rec125.Type=1 then begin
							   if RecCuen.Get(Rec125."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec125.Next=0;
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF3:=IMPNSUIRPF3-(Rec125."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec125."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU3:=IMPSU3-(Rec125."Amount Including VAT");
							   end;
							   if Rec125."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU3:=IMPNSU3-(Rec125."Amount Including VAT");
							   end;
						  end;
					 until Rec125.Next=0;
				until Rec124.Next=0;
				Rec124.Reset;
				Rec124.SetCurrentkey(Rec124."Pay-to Vendor No.");
				Rec124.SetRange(Rec124."Pay-to Vendor No.",Vendor."No.");
				Rec124.SetRange(Rec124."Posting Date",DESDE[4],HASTA[4]);
				if Rec124.FindFirst then repeat
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  IRPF:=false;
						  if Rec125.Type=1 then begin
							   if RecCuen.Get(Rec125."No.") then begin
									if RecCuen."Ignore in 347 Report" then begin
										 IRPF:=true;
									end;
							   end;
						  end;
					 until Rec125.Next=0;
					 Rec125.Reset;
					 Rec125.SetRange(Rec125."Document No.",Rec124."No.");
					 if Rec125.FindFirst then repeat
						  if IRPF then begin
							   IMPNSUIRPF4:=IMPNSUIRPF4-(Rec125."Amount Including VAT");
						  end;
						  if not IRPF then begin
							   if Rec125."VAT Bus. Posting Group"='INVSUJETO' then begin
									IMPSU4:=IMPSU4-(Rec125."Amount Including VAT");
							   end;
							   if Rec125."VAT Bus. Posting Group"<>'INVSUJETO' then begin
									IMPNSU4:=IMPNSU4-(Rec125."Amount Including VAT");
							   end;
						  end;
					 until Rec125.Next=0;
				until Rec124.Next=0;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field("AรO";AรO)
					{
						ApplicationArea = Basic;
						Caption = 'Desde fecha';
					}
					field(ImpMin;ImpMin)
					{
						ApplicationArea = Basic;
						Caption = 'Importe mayor que';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			if ImpMin = 0 then
			  ImpMin := 3005.06;
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if (AรO = 0)  then
		  Error('Indique el aรฑo.');
		DESDE[1]:=Dmy2date(1,1,AรO);
		HASTA[1]:=Dmy2date(31,3,AรO);
		DESDE[2]:=Dmy2date(1,4,AรO);
		HASTA[2]:=Dmy2date(30,6,AรO);
		DESDE[3]:=Dmy2date(1,7,AรO);
		HASTA[3]:=Dmy2date(30,9,AรO);
		DESDE[4]:=Dmy2date(1,10,AรO);
		HASTA[4]:=Dmy2date(31,12,AรO);
		Filtros := 'De ' + Format(DESDE[1]) + ' a ' + Format(HASTA[4]) +
				   ', Importe >= ' + Format(ImpMin);
		ConfCon.Find('-');
		CompanyInfo.Get;
		CompanyInfo.CalcFields(CompanyInfo.Picture);
		  FormatAddr.Company(CompanyAddr,CompanyInfo);
		;ReportsForNavPre;
	end;
	var
		LastFieldNo: Integer;
		FooterPrinted: Boolean;
		Desdefecha: Date;
		FechaConfirm: Date;
		TImpVentas: Decimal;
		ImpVentas: Decimal;
		RecIE: Record "Company Information";
		ConfCon: Record "General Ledger Setup";
		HastFec: Date;
		ImpMin: Decimal;
		Filtros: Text[250];
		IMP1: Decimal;
		IMP2: Decimal;
		IMP3: Decimal;
		IMP4: Decimal;
		RecClie: Record Vendor;
		CODCIF: Code[20];
		CompanyInfo: Record "Company Information";
		CompanyAddr: array [8] of Text[60];
		FormatAddr: Codeunit "Format Address";
		DESDE: array [4] of Date;
		HASTA: array [4] of Date;
		"AรO": Integer;
		Rec254: Record "VAT Entry";
		IMPSU1: Decimal;
		IMPSU2: Decimal;
		IMPSU3: Decimal;
		IMPSU4: Decimal;
		IMPNSU1: Decimal;
		IMPNSU2: Decimal;
		IMPNSU3: Decimal;
		IMPNSU4: Decimal;
		Rec123: Record "Purch. Inv. Line";
		Rec125: Record "Purch. Cr. Memo Line";
		Rec122: Record "Purch. Inv. Header";
		Rec124: Record "Purch. Cr. Memo Hdr.";
		ELNIF: Code[20];
		RecCuen: Record "G/L Account";
		GRABA: Boolean;
		IMPNSUIRPF1: Decimal;
		IMPNSUIRPF2: Decimal;
		IMPNSUIRPF3: Decimal;
		IMPNSUIRPF4: Decimal;
		IRPF: Boolean;

	local procedure OnPreSectionTable23_GroupHeader3(var Vendor : Record Vendor);
	begin
		with Table23 do begin
		  ReportForNav.ShowOutput := FooterPrinted;
		  FooterPrinted := false;
		end;
	end;
	local procedure OnPreSectionTable23_GroupHeader4(var Vendor : Record Vendor);
	begin
		with Table23 do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = Vendor.FieldNo("VAT Registration No.");
		end;
	end;
	local procedure OnPreSectionTable23_GroupHeader5(var Vendor : Record Vendor);
	begin
		with Table23 do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = LastFieldNo;
		end;
	end;
	local procedure OnPreSectionTable23_GroupFooter7(var Vendor : Record Vendor);
	begin
		with Table23 do begin
		  if not FooterPrinted then
			LastFieldNo := ReportForNav.TotalsCausedBy;
		  ReportForNav.ShowOutput := not FooterPrinted;
		  FooterPrinted := true;
		  ReportForNav.ShowOutput(("Inv. Amounts (LCY)"-"Cr. Memo Amounts (LCY)")>ImpMin);
		  /*
		  IF ("Inv. Amounts (LCY)"-"Cr. Memo Amounts (LCY)">ImpMin) THEN BEGIN
		  IMPSU1:=0;
		  IMPNSU1:=0;
		  IMPSU2:=0;
		  IMPNSU2:=0;
		  IMPSU3:=0;
		  IMPNSU3:=0;
		  IMPSU4:=0;
		  IMPNSU4:=0;
		  Rec254.RESET;
		  Rec254.SETCURRENTKEY(Type,"Country/Region Code","VAT Registration No.","VAT Bus. Posting Group","VAT Prod. Posting Group");
		  Rec254.SETRANGE(Rec254.Type,1);
		  //Rec254.SETRANGE(Rec254."Country/Region Code",'ES');
		  Rec254.SETRANGE(Rec254."Posting Date",DESDE[1],HASTA[1]);
		  Rec254.SETRANGE(Rec254."VAT Registration No.",Vendor."VAT Registration No.");
		  IF Rec254.FINDFIRST THEN REPEAT
			   IF Rec254."VAT Bus. Posting Group"='INVSUJETO' THEN BEGIN
					IMPSU1:=IMPSU1+(Rec254.Base);
			   END;
			   IF Rec254."VAT Bus. Posting Group"<>'INVSUJETO' THEN BEGIN
					IF Rec254."VAT Calculation Type"<>1 THEN BEGIN
						 IMPNSU1:=IMPNSU1+(Rec254.Base+Rec254.Amount);
					END;
					IF Rec254."VAT Calculation Type"=1 THEN BEGIN
						 IMPNSU1:=IMPNSU1+(Rec254.Base);
					END;
			   END;
		  UNTIL Rec254.NEXT=0;
		  Rec254.RESET;
		  Rec254.SETCURRENTKEY(Type,"Country/Region Code","VAT Registration No.","VAT Bus. Posting Group","VAT Prod. Posting Group");
		  Rec254.SETRANGE(Rec254.Type,1);
		  //Rec254.SETRANGE(Rec254."Country/Region Code",'ES');
		  Rec254.SETRANGE(Rec254."Posting Date",DESDE[2],HASTA[2]);
		  Rec254.SETRANGE(Rec254."VAT Registration No.",Vendor."VAT Registration No.");
		  IF Rec254.FINDFIRST THEN REPEAT
			   IF Rec254."VAT Bus. Posting Group"='INVSUJETO' THEN BEGIN
					IMPSU2:=IMPSU2+(Rec254.Base);
			   END;
			   IF Rec254."VAT Bus. Posting Group"<>'INVSUJETO' THEN BEGIN
					IF Rec254."VAT Calculation Type"<>1 THEN BEGIN
						 IMPNSU2:=IMPNSU2+(Rec254.Base+Rec254.Amount);
					END;
					IF Rec254."VAT Calculation Type"=1 THEN BEGIN
						 IMPNSU2:=IMPNSU2+(Rec254.Base);
					END;
			   END;
		  UNTIL Rec254.NEXT=0;
		  Rec254.RESET;
		  Rec254.SETCURRENTKEY(Type,"Country/Region Code","VAT Registration No.","VAT Bus. Posting Group","VAT Prod. Posting Group");
		  Rec254.SETRANGE(Rec254.Type,1);
		  //Rec254.SETRANGE(Rec254."Country/Region Code",'ES');
		  Rec254.SETRANGE(Rec254."Posting Date",DESDE[3],HASTA[3]);
		  Rec254.SETRANGE(Rec254."VAT Registration No.",Vendor."VAT Registration No.");
		  IF Rec254.FINDFIRST THEN REPEAT
			   IF Rec254."VAT Bus. Posting Group"='INVSUJETO' THEN BEGIN
					IMPSU3:=IMPSU3+(Rec254.Base);
			   END;
			   IF Rec254."VAT Bus. Posting Group"<>'INVSUJETO' THEN BEGIN
					IF Rec254."VAT Calculation Type"<>1 THEN BEGIN
						 IMPNSU3:=IMPNSU3+(Rec254.Base+Rec254.Amount);
					END;
					IF Rec254."VAT Calculation Type"=1 THEN BEGIN
						 IMPNSU3:=IMPNSU3+(Rec254.Base);
					END;
			   END;
		  UNTIL Rec254.NEXT=0;
		  Rec254.RESET;
		  Rec254.SETCURRENTKEY(Type,"Country/Region Code","VAT Registration No.","VAT Bus. Posting Group","VAT Prod. Posting Group");
		  Rec254.SETRANGE(Rec254.Type,1);
		  //Rec254.SETRANGE(Rec254."Country/Region Code",'ES');
		  Rec254.SETRANGE(Rec254."Posting Date",DESDE[4],HASTA[4]);
		  Rec254.SETRANGE(Rec254."VAT Registration No.",Vendor."VAT Registration No.");
		  IF Rec254.FINDFIRST THEN REPEAT
			   IF Rec254."VAT Bus. Posting Group"='INVSUJETO' THEN BEGIN
					IMPSU4:=IMPSU4+(Rec254.Base);
			   END;
			   IF Rec254."VAT Bus. Posting Group"<>'INVSUJETO' THEN BEGIN
					IF Rec254."VAT Calculation Type"<>1 THEN BEGIN
						 IMPNSU4:=IMPNSU4+(Rec254.Base+Rec254.Amount);
					END;
					IF Rec254."VAT Calculation Type"=1 THEN BEGIN
						 IMPNSU4:=IMPNSU4+(Rec254.Base);
					END;
			   END;
		  UNTIL Rec254.NEXT=0;
		  END;
		   */
		end;

	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50292_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50292;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
