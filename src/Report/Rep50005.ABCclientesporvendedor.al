#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50005_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50005){}   
		type("System.IO.Path"; System_IO_Path50005) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50005 "_A,B,C clientes por vendedor"
{
	Caption = 'ABC Clientes por vendedor';
	RDLCLayout = './Layouts/_A,B,Cclientesporvendedor.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Salesperson/Purchaser";"Salesperson/Purchaser")
		{
			DataItemTableView = sorting(Code);
			RequestFilterFields = "Code";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNavPageNo; Format(ReportForNav.PageNo))
			{
			}
			column(TODAY_0_4; Format(Today,0,4))
			{
			}
			column(USERID; UserId)
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(STRSUBSTNO_Text001_ItemDateFilter; StrSubstNo(Text001,ItemDateFilter))
			{
			}
			column(Name; "Salesperson/Purchaser".Name)
			{
			}
			column("Code"; "Salesperson/Purchaser".Code)
			{
			}
			dataitem(Customer;Customer)
			{
				DataItemLink = "Salesperson Code"=field(Code);
				DataItemTableView = sorting("No.");
				RequestFilterFields = "No.","Date Filter";
				column(ReportForNavId_9; 9) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				begin
					Window.Open(Text000);
					ItemAmount.DeleteAll;
					i := 0;
				end;
				
				trigger OnAfterGetRecord();
				begin
					Window.Update(1,"No.");
					CalcFields("Sales (LCY)");
					if ("Sales (LCY)" = 0) and not PrintAlsoIfZero then
					  CurrReport.Skip;
					ItemAmount.Init;
					ItemAmount."Customer No.":= "No.";
					if ShowType = Showtype::"Sales (LCY)" then begin
					  ItemAmount."Amount (LCY)":= "Sales (LCY)";
					end else begin
					  ItemAmount."Amount 2 (LCY)" := "Sales (LCY)";
					end;
					if ShowSorting = Showsorting::Largest then begin
					  ItemAmount."Amount (LCY)":= -ItemAmount."Amount (LCY)";
					  ItemAmount."Amount 2 (LCY)" := -ItemAmount."Amount 2 (LCY)";
					end;
					ItemAmount.Insert;
					if (NoOfRecordsToPrint = 0) or (i < NoOfRecordsToPrint) then
					  i := i + 1
					else begin
					  ItemAmount.Find('+');
					  ItemAmount.Delete;
					end;
					TAcumu:=TAcumu+Customer."Sales (LCY)";
				end;
				
			}
			dataitem(Integer;Integer)
			{
				DataItemTableView = sorting(Number) where(Number=filter(1..));
				column(ReportForNavId_10; 10) {} // Autogenerated by ForNav - Do not delete
				column(CustomerFIELDCAPTION_Name; Customer.FieldCaption(Name))
				{
				}
				column(CustomerFIELDCAPTION_No; Customer.FieldCaption("No."))
				{
				}
				column(ClasificacionCRM_Customer; Customer."Clasificacion CRM")
				{
					DecimalPlaces = 2:2;
				}
				column(Clasi; Clasi)
				{
					DecimalPlaces = 2:2;
				}
				column(Tanto; Tanto)
				{
					DecimalPlaces = 2:2;
				}
				column(Acumu; Acumu)
				{
					DecimalPlaces = 2:2;
				}
				column(Sales_LCY_Customer; Customer."Sales (LCY)")
				{
					AutoFormatType = 1;
				}
				column(Name_Customer; Customer.Name)
				{
				}
				column(No_Customer; Customer."No.")
				{
				}
				column(Number_Integer; Integer.Number)
				{
				}
				trigger OnPreDataItem();
				begin
					Window.Close;
					ItemSales := Customer."Sales (LCY)";
				end;
				
				trigger OnAfterGetRecord();
				begin
					if Number = 1 then begin
					  if not ItemAmount.Find('-') then
						CurrReport.Break;
					  if ShowSorting = Showsorting::Largest then
						MaxAmount := -ItemAmount."Amount (LCY)"
					  else begin
						ItemAmount2 := ItemAmount;
						if ItemAmount.Next(NoOfRecordsToPrint - 1) > 0 then;
						MaxAmount := ItemAmount."Amount (LCY)";
						ItemAmount := ItemAmount2;
					  end;
					end else
					  if ItemAmount.Next = 0 then
						CurrReport.Break;
					Customer.Get(ItemAmount."Customer No.");
					Customer.CalcFields("Sales (LCY)");
					if ShowSorting = Showsorting::Largest then begin
					  ItemAmount."Amount (LCY)":= -ItemAmount."Amount (LCY)";
					  ItemAmount."Amount 2 (LCY)" := -ItemAmount."Amount 2 (LCY)";
					end;
					if (MaxAmount > 0) and (ItemAmount."Amount (LCY)" > 0) then
					  BarText := PadStr('',ROUND(ItemAmount."Amount (LCY)"/ MaxAmount * 45,1),'*')
					else
					  BarText := '';
					if ShowSorting = Showsorting::Largest then begin
					  ItemAmount."Amount (LCY)":= -ItemAmount."Amount (LCY)";
					  ItemAmount."Amount 2 (LCY)" := -ItemAmount."Amount 2 (LCY)";
					end;
					Acumu:=Acumu+Customer."Sales (LCY)";
					if TAcumu<>0 then begin
						 Tanto:=(Acumu*100)/TAcumu;
					end;
					if Tanto<(TA+TB+TA) then begin
						 Clasi:=2;
					end;
					if (Tanto<TB+TA) then begin
						 Clasi:=1;
					end;
					if (Tanto<TA) then begin
						 Clasi:=0;
					end;
					if Tipo=1 then begin
						 Customer."Clasificación A,B,C Vendedor":=Clasi;
						 Customer."Fecha Clasi. A,B,C Vendedor":=Today;
						 Customer.Modify;
					end;
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				TAcumu:=0;
				Acumu:=0;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(Tipo;Tipo)
					{
						ApplicationArea = Basic;
						Caption = 'Tipo acción';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			NoOfRecordsToPrint := 99999999;
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		ItemFilter := Customer.GetFilters;
		ItemDateFilter := Customer.GetFilter("Date Filter");
		Sequence := Lowercase(Format(SelectStr(ShowSorting + 1,Text004)));
		Heading := Format(SelectStr(ShowType + 1,Text005));
		RecCE.Get;
		TA:=RecCE."% Venta Clasificación A";
		TB:=RecCE."% Venta Clasificación B";
		TC:=RecCE."% Venta Clasificación C";
		if Tipo=1 then begin
			 if RecCusto.FindFirst then repeat
				  RecCusto."Clasificación A,B,C Vendedor":=3;
				  RecCusto."Fecha Clasi. A,B,C Vendedor":=0D;
				  RecCusto.Modify;
			 until RecCusto.Next=0;
		end;
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Sorting items	#1##########';
		Text001: label 'Period: %1';
		Text002: label 'Ranked according to %1 %2';
		Text003: label 'Portion of %1';
		Window: Dialog;
		ItemAmount: Record "Customer Amount" temporary;
		ItemAmount2: Record "Customer Amount";
		ItemFilter: Text[250];
		ItemDateFilter: Text[30];
		Sequence: Text[30];
		Heading: Text[30];
		ShowSorting: Option Largest,Smallest;
		ShowType: Option "Sales (LCY)";
		NoOfRecordsToPrint: Integer;
		PrintAlsoIfZero: Boolean;
		ItemSales: Decimal;
		QtyOnHand: Decimal;
		SalesAmountPct: Decimal;
		QtyOnHandPct: Decimal;
		MaxAmount: Decimal;
		BarText: Text[50];
		i: Integer;
		Text004: label 'Largest,Smallest';
		Text005: label 'Sales (LCY),Inventory';
		Acumu: Decimal;
		TAcumu: Decimal;
		Tanto: Decimal;
		Clasi: Option A,B,C;
		RecCE: Record "Sales & Receivables Setup";
		TA: Decimal;
		TB: Decimal;
		TC: Decimal;
		Tipo: Option Propuesta,"Guardar datos";
		RecCusto: Record Customer;

	local procedure Pct(Numeral1: Decimal;Numeral2: Decimal): Decimal
	begin
		if Numeral2 = 0 then
		  exit(0);
		exit(ROUND(Numeral1 / Numeral2 * 100,0.1));
	end;

	local procedure OnPreSectionInteger_Footer6(var Integer : Record Integer);
	begin
		with Integer do begin
		  SalesAmountPct := Pct(Customer."Sales (LCY)",ItemSales);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50005_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50005;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
