#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50019_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50019){}   
		type("System.IO.Path"; System_IO_Path50019) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50019 "_Estadistica compras reposi."
{
	ShowPrintStatus = false;
	RDLCLayout = './Layouts/_Estadisticacomprasreposi..rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Customer;Customer)
		{
			DataItemTableView = sorting("No.");
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(USERID; UserId)
			{
			}
			column(ReportForNavPageNo; Format(ReportForNav.PageNo))
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(TODAY_0_4; Format(Today,0,4))
			{
			}
			column(CustomerFIELDCAPTION_SearchName; Customer.FieldCaption("Search Name"))
			{
			}
			column(CustomerFIELDCAPTION_No; Customer.FieldCaption("No."))
			{
			}
			column(Total; 'Total')
			{
				DecimalPlaces = 0:0;
			}
			column(mesc1; mesc[1])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc2; mesc[2])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc3; mesc[3])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc4; mesc[4])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc5; mesc[5])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc6; mesc[6])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc7; mesc[7])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc8; mesc[8])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc9; mesc[9])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc10; mesc[10])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc11; mesc[11])
			{
				DecimalPlaces = 0:0;
			}
			column(mesc12; mesc[12])
			{
				DecimalPlaces = 0:0;
			}
			column(SearchName_Customer; Customer."Search Name")
			{
			}
			column(No_Customer; Customer."No.")
			{
			}
			dataitem(Item;Item)
			{
				DataItemTableView = sorting("Gen. Prod. Posting Group",Familia,Subfamilia,Description);
				column(ReportForNavId_23; 23) {} // Autogenerated by ForNav - Do not delete
				column(Subfamilia_Item; Subfamilia)
				{
				}
				column(Familia_Item; Familia)
				{
				}
				column(GenProdPostingGroup_Item; Item."Gen. Prod. Posting Group")
				{
				}
				column(EstadoProducto_Item; "Estado Producto")
				{
				}
				column(total; total)
				{
					DecimalPlaces = 0:0;
				}
				column(mes1; mes[1])
				{
					DecimalPlaces = 0:0;
				}
				column(mes2; mes[2])
				{
					DecimalPlaces = 0:0;
				}
				column(mes3; mes[3])
				{
					DecimalPlaces = 0:0;
				}
				column(mes4; mes[4])
				{
					DecimalPlaces = 0:0;
				}
				column(mes5; mes[5])
				{
					DecimalPlaces = 0:0;
				}
				column(mes6; mes[6])
				{
					DecimalPlaces = 0:0;
				}
				column(mes7; mes[7])
				{
					DecimalPlaces = 0:0;
				}
				column(mes8; mes[8])
				{
					DecimalPlaces = 0:0;
				}
				column(mes9; mes[9])
				{
					DecimalPlaces = 0:0;
				}
				column(mes10; mes[10])
				{
					DecimalPlaces = 0:0;
				}
				column(mes11; mes[11])
				{
					DecimalPlaces = 0:0;
				}
				column(mes12; mes[12])
				{
					DecimalPlaces = 0:0;
				}
				column(dto2; dto2)
				{
					DecimalPlaces = 0:0;
				}
				column(dto1; dto1)
				{
					DecimalPlaces = 0:0;
				}
				column(preciotarifa; preciotarifa)
				{
				}
				column(snstock; snstock)
				{
				}
				column(Description_Item; Item.Description)
				{
				}
				column(No_Item; Item."No.")
				{
				}
				trigger OnAfterGetRecord();
				begin
					VENTANA.Update(1,Customer."No."+' '+Item."No."+' '+"Gen. Prod. Posting Group"+' '+Familia+' '+Subfamilia+' '+Description);
						 REC111.Reset;
						 REC111.SetCurrentkey(REC111."Sell-to Customer No.",REC111."No.");
						 REC111.SetRange(REC111."Sell-to Customer No.",Customer."No.");
						 REC111.SetRange(REC111."No.",Item."No.");
						 REC111.SetRange(REC111."Shipment Date",DESDEI,Today);
						 if not REC111.FindFirst then begin
							  CurrReport.Skip;
						 end;
					snstock:=false;
					RECITEM.Get(Item."No.");
					RECITEM.CalcFields(RECITEM.Inventory);
					if RECITEM.Inventory>0 then begin
						 snstock:=true;
					end;
					preciotarifa:=0;
					RecPrecios.Reset;
					RecPrecios.SetRange(RecPrecios."Item No.",Item."No.");
					RecPrecios.SetRange(RecPrecios."Sales Code",gp);
					if RecPrecios.FindFirst then begin
						 preciotarifa:=RecPrecios."Unit Price";
					end;
					conta:=0;
					dto1:=0;
					dto2:=0;
					RecDescuentos.Reset;
					RecDescuentos.SetRange(RecDescuentos.Code,Item."No.");
					RecDescuentos.SetRange(RecDescuentos."Sales Code",gd);
					if RecDescuentos.FindFirst then repeat
						 conta:=conta+1;
						 if conta=1 then begin
							  dto1:=RecDescuentos."Minimum Quantity";
						 end;
						 if conta=2 then begin
							  dto2:=RecDescuentos."Minimum Quantity";
						 end;
					until RecDescuentos.Next = 0;
					total:=0;
					I:=0;
					Clear(mes);
					repeat
						 I:=I+1;
						 REC111.Reset;
						 REC111.SetCurrentkey(REC111."Sell-to Customer No.",REC111."No.");
						 REC111.SetRange(REC111."Sell-to Customer No.",Customer."No.");
						 REC111.SetRange(REC111."No.",Item."No.");
						 REC111.SetRange(REC111."Shipment Date",INTERVALOD[I],INTERVALOH[I]);
						 if REC111.FindFirst then repeat
							  mes[I]:=mes[I]+REC111.Quantity;
							  total:=total+REC111.Quantity;
						 until REC111.Next = 0;
					until I=12;
					total:=mes[1]+
					mes[2]+
					mes[3]+
					mes[4]+
					mes[5]+
					mes[6]+
					mes[7]+
					mes[8]+
					mes[9]+
					mes[10]+
					mes[11]+
					mes[12];
					if total=0 then begin
						 CurrReport.Skip;
					end;
					  fnCrearCelda('A' + Format(intFila),Format(Customer."No."));
					  fnCrearCelda('B' + Format(intFila),Format(Customer.Name));
					  fnCrearCelda('C' + Format(intFila),Format("Gen. Prod. Posting Group"));
					  fnCrearCelda('D' + Format(intFila),Format(Item.Familia));
					  fnCrearCelda('E' + Format(intFila),Format(Item.Subfamilia));
					  fnCrearCelda('F' + Format(intFila),Format(Item."No."));
					  fnCrearCelda('G' + Format(intFila),Format(snstock));
					  fnCrearCelda('H' + Format(intFila),Format(Item.Description));
					  fnCrearCelda('I' + Format(intFila),Format(preciotarifa));
					  fnCrearCelda('J' + Format(intFila),Format(Item."Estado Producto"));
					  fnCrearCelda('K' + Format(intFila),Format(total));
					  if mes[12]<>0 then fnCrearCelda('M' + Format(intFila),Format(mes[12]));
					  if mes[11]<>0 then fnCrearCelda('N' + Format(intFila),Format(mes[11]));
					  if mes[10]<>0 then fnCrearCelda('O' + Format(intFila),Format(mes[10]));
					  if mes[9]<>0 then fnCrearCelda('P' + Format(intFila),Format(mes[9]));
					  if mes[8]<>0 then fnCrearCelda('Q' + Format(intFila),Format(mes[8]));
					  if mes[7]<>0 then fnCrearCelda('R' + Format(intFila),Format(mes[7]));
					  if mes[6]<>0 then fnCrearCelda('S' + Format(intFila),Format(mes[6]));
					  if mes[5]<>0 then fnCrearCelda('T' + Format(intFila),Format(mes[5]));
					  if mes[4]<>0 then fnCrearCelda('U' + Format(intFila),Format(mes[4]));
					  if mes[3]<>0 then fnCrearCelda('V' + Format(intFila),Format(mes[3]));
					  if mes[2]<>0 then fnCrearCelda('W' + Format(intFila),Format(mes[2]));
					  if mes[1]<>0 then fnCrearCelda('X' + Format(intFila),Format(mes[1]));
						 intFila:=intFila+1;
				end;
				
			}
			trigger OnPreDataItem();
			begin
				LastFieldNo := FieldNo("No.");
			end;
			
			trigger OnAfterGetRecord();
			begin
				gp:=Customer."Customer Price Group";
				gd:=Customer."Customer Disc. Group";
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(PrintToExcel;PrintToExcel)
					{
						ApplicationArea = Basic;
						Caption = 'Imprimir a EXCEL';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		VENTANA.Close;
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		VENTANA.Open('#1#############################################################################################################');
		DESDEI:=CalcDate('-1A',Today);
		INTERVALOD[1]:=Today;
		mes1:=Date2dmy(INTERVALOD[1],2);
		año:=Date2dmy(INTERVALOD[1],3);
		mesc[1]:=Format(mes1);
		INTERVALOD[1]:=Dmy2date(1,mes1,año);
		INTERVALOD[2]:=CalcDate('-1M',Today);
		mes1:=Date2dmy(INTERVALOD[2],2);
		año:=Date2dmy(INTERVALOD[2],3);
		mesc[2]:=Format(mes1);
		INTERVALOD[2]:=Dmy2date(1,mes1,año);
		INTERVALOD[3]:=CalcDate('-2M',Today);
		mes1:=Date2dmy(INTERVALOD[3],2);
		año:=Date2dmy(INTERVALOD[3],3);
		mesc[3]:=Format(mes1);
		INTERVALOD[3]:=Dmy2date(1,mes1,año);
		INTERVALOD[4]:=CalcDate('-3M',Today);
		mes1:=Date2dmy(INTERVALOD[4],2);
		año:=Date2dmy(INTERVALOD[4],3);
		mesc[4]:=Format(mes1);
		INTERVALOD[4]:=Dmy2date(1,mes1,año);
		INTERVALOD[5]:=CalcDate('-4M',Today);
		mes1:=Date2dmy(INTERVALOD[5],2);
		año:=Date2dmy(INTERVALOD[5],3);
		mesc[5]:=Format(mes1);
		INTERVALOD[5]:=Dmy2date(1,mes1,año);
		INTERVALOD[6]:=CalcDate('-5M',Today);
		mes1:=Date2dmy(INTERVALOD[6],2);
		año:=Date2dmy(INTERVALOD[6],3);
		mesc[6]:=Format(mes1);
		INTERVALOD[6]:=Dmy2date(1,mes1,año);
		INTERVALOD[7]:=CalcDate('-6M',Today);
		mes1:=Date2dmy(INTERVALOD[7],2);
		año:=Date2dmy(INTERVALOD[7],3);
		mesc[7]:=Format(mes1);
		INTERVALOD[7]:=Dmy2date(1,mes1,año);
		INTERVALOD[8]:=CalcDate('-7M',Today);
		mes1:=Date2dmy(INTERVALOD[8],2);
		año:=Date2dmy(INTERVALOD[8],3);
		mesc[8]:=Format(mes1);
		INTERVALOD[8]:=Dmy2date(1,mes1,año);
		INTERVALOD[9]:=CalcDate('-8M',Today);
		mes1:=Date2dmy(INTERVALOD[9],2);
		año:=Date2dmy(INTERVALOD[9],3);
		mesc[9]:=Format(mes1);
		INTERVALOD[9]:=Dmy2date(1,mes1,año);
		INTERVALOD[10]:=CalcDate('-9M',Today);
		mes1:=Date2dmy(INTERVALOD[10],2);
		año:=Date2dmy(INTERVALOD[10],3);
		mesc[10]:=Format(mes1);
		INTERVALOD[10]:=Dmy2date(1,mes1,año);
		INTERVALOD[11]:=CalcDate('-10M',Today);
		mes1:=Date2dmy(INTERVALOD[11],2);
		año:=Date2dmy(INTERVALOD[11],3);
		mesc[11]:=Format(mes1);
		INTERVALOD[11]:=Dmy2date(1,mes1,año);
		INTERVALOD[12]:=CalcDate('-11M',Today);
		mes1:=Date2dmy(INTERVALOD[12],2);
		año:=Date2dmy(INTERVALOD[12],3);
		mesc[12]:=Format(mes1);
		INTERVALOD[12]:=Dmy2date(1,mes1,año);
		INTERVALOH[1]:=CalcDate('+1M-1D',INTERVALOD[1]);
		INTERVALOH[2]:=CalcDate('+1M-1D',INTERVALOD[2]);
		INTERVALOH[3]:=CalcDate('+1M-1D',INTERVALOD[3]);
		INTERVALOH[4]:=CalcDate('+1M-1D',INTERVALOD[4]);
		INTERVALOH[5]:=CalcDate('+1M-1D',INTERVALOD[5]);
		INTERVALOH[6]:=CalcDate('+1M-1D',INTERVALOD[6]);
		INTERVALOH[7]:=CalcDate('+1M-1D',INTERVALOD[7]);
		INTERVALOH[8]:=CalcDate('+1M-1D',INTERVALOD[8]);
		INTERVALOH[9]:=CalcDate('+1M-1D',INTERVALOD[9]);
		INTERVALOH[10]:=CalcDate('+1M-1D',INTERVALOD[10]);
		INTERVALOH[11]:=CalcDate('+1M-1D',INTERVALOD[11]);
		INTERVALOH[12]:=CalcDate('+1M-1D',INTERVALOD[12]);
		repeat
			 I:=I+1;
			 if mesc[I]='1' then mesc[I]:='ENE';
			 if mesc[I]='2' then mesc[I]:='FEB';
			 if mesc[I]='3' then mesc[I]:='MAR';
			 if mesc[I]='4' then mesc[I]:='ABR';
			 if mesc[I]='5' then mesc[I]:='MAY';
			 if mesc[I]='6' then mesc[I]:='JUN';
			 if mesc[I]='7' then mesc[I]:='JUL';
			 if mesc[I]='8' then mesc[I]:='AGO';
			 if mesc[I]='9' then mesc[I]:='SEP';
			 if mesc[I]='10' then mesc[I]:='OCT';
			 if mesc[I]='11' then mesc[I]:='NOV';
			 if mesc[I]='12' then mesc[I]:='DIC';
		until I=12;
		fnCrearAut;
		intFila := 1;
		  fnCrearHoja('Reposiciones',90);
		  fnCrearCelda('A' + Format(intFila),'Cliente');
		  fnCrearCelda('B' + Format(intFila),'Nombre cliente');
		  fnCrearCelda('C' + Format(intFila),'Grupo producto');
		  fnCrearCelda('D' + Format(intFila),'Familia');
		  fnCrearCelda('E' + Format(intFila),'Subfamilia');
		  fnCrearCelda('F' + Format(intFila),'Producto');
		  fnCrearCelda('G' + Format(intFila),'Stock');
		  fnCrearCelda('H' + Format(intFila),'Descripcion');
		  fnCrearCelda('I' + Format(intFila),'Precio');
		  fnCrearCelda('J' + Format(intFila),'Estado');
		  fnCrearCelda('K' + Format(intFila),'TOTAL');
		  fnCrearCelda('L' + Format(intFila),'PEDIR');
		  fnCrearCelda('M' + Format(intFila),Format(mesc[12]));
		  fnCrearCelda('N' + Format(intFila),Format(mesc[11]));
		  fnCrearCelda('O' + Format(intFila),Format(mesc[10]));
		  fnCrearCelda('P' + Format(intFila),Format(mesc[9]));
		  fnCrearCelda('Q' + Format(intFila),Format(mesc[8]));
		  fnCrearCelda('R' + Format(intFila),Format(mesc[7]));
		  fnCrearCelda('S' + Format(intFila),Format(mesc[6]));
		  fnCrearCelda('T' + Format(intFila),Format(mesc[5]));
		  fnCrearCelda('U' + Format(intFila),Format(mesc[4]));
		  fnCrearCelda('V' + Format(intFila),Format(mesc[3]));
		  fnCrearCelda('W' + Format(intFila),Format(mesc[2]));
		  fnCrearCelda('X' + Format(intFila),Format(mesc[1]));
		  intFila := intFila + 1;
		;ReportsForNavPre;
	end;
	var
		snstock: Boolean;
		preciotarifa: Decimal;
		dto1: Decimal;
		dto2: Decimal;
		mes: array [12] of Decimal;
		total: Decimal;
		INTERVALOD: array [12] of Date;
		INTERVALOH: array [12] of Date;
		I: Decimal;
		RECITEM: Record Item;
		REC111: Record "Sales Shipment Line";
		gp: Code[10];
		gd: Code[10];
		RecGP: Record "Customer Price Group";
		RecGD: Record "Customer Discount Group";
		RecPrecios: Record "Sales Price";
		RecDescuentos: Record "Sales Line Discount";
		conta: Decimal;
		mesc: array [12] of Code[10];
		MESD: array [12] of Decimal;
		dia: Decimal;
		"año": Decimal;
		RecFecha: Record Date;
		mes1: Decimal;
		VENTANA: Dialog;
		DESDEI: Date;
		ExcelBuf: Record "Excel Buffer";
		FromFec: Date;
		PrintToExcel: Boolean;
		Text000: label 'Period: %1';
		Text001: label 'Trial Balance';
		Text002: label 'Data';
		Text003: label 'Debit';
		Text004: label 'Credit';
		Text005: label 'Company Name';
		Text006: label 'Report No.';
		Text007: label 'Report Name';
		Text008: label 'User ID';
		Text009: label 'Date';
		Text010: label 'G/L Filter';
		Text011: label 'Period Filter';
		Text1100000: label 'Posting';
		Text1100001: label 'Heading';
		Text1100002: label 'The date %1 is not a Closing Date';
		Text1100003: label 'Period: ';
		Text1100004: label 'All Amounts in %1';
		Text1100005: label 'Include Opening Entries';
		Text1100006: label 'Include Closing Entries';
		Text1100007: label 'Include Closing/Opening Entries';
		Text1100008: label 'The fiscal year does not exist';
		Text1100009: label 'Acc. in Period';
		Text1100010: label 'Acc. Period at Date';
		Text1100011: label 'Balance at Date';
		Text1100012: label 'Total:';
		LastFieldNo: Integer;
		FooterPrinted: Boolean;
		CantIntervalo: array [12] of Decimal;
		MediaTotal: Decimal;
		autXLApp: Automation ;
		autXLLibros: Automation ;
		autXLLibro: Automation ;
		autXLHojas: Automation ;
		autXLHoja: Automation ;
		autXLGraficos: Automation ;
		autXLGrafico: Automation ;
		autXLChart: Automation ;
		autXLRango: Automation ;
		autXLSeries: Automation ;
		autXLEjes: Automation ;
		autXLEjes1: Automation ;
		autXLSerieColeccion: Automation ;
		autXLSerie: Integer;
		intFila: Integer;
		IntervaloMeses: Integer;
		MEDIA: Decimal;
		Cdadpedcompra: Decimal;
		COSTE: Decimal;
		STOCK: Decimal;
		StockFuturo: Decimal;
		Totdispmes: Decimal;
		Totdispfut: Decimal;
		PROPUESTA: Decimal;
		CONTENEDOR: Decimal;
		PEDIDO: Decimal;
		FECHAC: Date;
		FECHAP: Date;
		RecLC: Record "Purchase Line";
		DIVIDE: Integer;

	procedure fnCrearAut()
	begin
		Create(autXLApp);
		autXLApp.WindowState := -4143;
		autXLLibros := autXLApp.Workbooks;
		autXLLibro  := autXLLibros.Add;
		autXLHojas  := autXLLibro.Worksheets;
		autXLApp.Visible := true;
	end;

	procedure fnElimnarAut()
	begin
		//autXLApp.Columns.EntireColumn.AutoFit;
		autXLApp.Visible := true;
		Clear(autXLChart);
		Clear(autXLHoja);
		Clear(autXLHojas);
		Clear(autXLLibro);
		Clear(autXLLibros);
		Clear(autXLApp);
	end;

	procedure fnCrearHoja(txtNombreHoja: Text[100];intZoom: Integer)
	begin
		autXLHojas.Add;
		autXLHoja := autXLLibro.ActiveSheet;
		autXLHoja.Name := txtNombreHoja;
		autXLApp.ActiveWindow.Zoom := intZoom;
	end;

	procedure fnCrearCelda(txtCelda: Text[30];txtValor: Text[100])
	begin
		autXLHoja.Range(txtCelda).Value := txtValor;
	end;

	procedure fnFormatoCelda(txtCelda: Text[100];txtFormato: Text[100])
	begin
		autXLHoja.Range(txtCelda).NumberFormat := txtFormato;
	end;

	procedure fnAliniacionCelda(txtCelda: Text[100];intHorAli: Integer)
	begin
		autXLHoja.Range(txtCelda).HorizontalAlignment := intHorAli;
	end;

	procedure fnColorCelda(pnRango: Text[100];pnColorInterior: Integer;pnColorFuente: Integer;pnNegrita: Boolean)
	begin
		autXLHoja.Range(pnRango).Interior.ColorIndex := pnColorInterior;
		autXLHoja.Range(pnRango).Font.ColorIndex := pnColorFuente;
		autXLHoja.Range(pnRango).Font.Bold := pnNegrita;
	end;

	procedure fnBordes(pnRango: Text[100];pnBorde: Integer;pnLinea: Integer;pnAncho: Integer;pnColor: Integer)
	begin
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).LineStyle := pnLinea;
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).Weight	:= pnAncho;
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).Color	 := pnColor;
	end;

	procedure fnGraficoCrear(pnTop: Integer;pnPosicion: Integer;pnAncho: Integer;pnAlto: Integer;"pnTamaño": Integer)
	begin
		autXLGraficos := autXLHoja.ChartObjects;
		autXLGrafico := autXLGraficos.Add(pnTop,pnPosicion,pnAlto,pnAncho);
		autXLChart   := autXLGrafico.Chart;
		//autXLChart.ChartArea.Width := pnTamaño;
	end;

	procedure fnGraficoParam(pnRango: Text[30];pnTipo: Integer;pnLeyLeft: Integer;pnLeyTop: Integer)
	begin
		autXLRango := autXLHoja.Range(pnRango);
		autXLChart.SetSourceData(autXLRango,'xlColumns');
		autXLChart.ChartType(pnTipo);
		autXLChart.PlotArea.Interior.ColorIndex := -4142;
		autXLChart.Legend.Left := pnLeyLeft;
		autXLChart.Legend.Top  := pnLeyTop;
		//autXLChart.ChartArea.Width := 692;
		//autXLChart.Legend.Font.Size := 10;
	end;

	procedure fnGraficoSeries(pnSerie: Integer;pnColor: Integer;pnTipoGrafico: Integer;pnMarca: Integer;pnPrimerPlano: Integer;pnSegundoPlano: Integer)
	begin
		autXLSerieColeccion := autXLChart.SeriesCollection;
		autXLSerieColeccion.Item(pnSerie).Interior.ColorIndex := pnColor;
		autXLSerieColeccion.Item(pnSerie).ChartType   := pnTipoGrafico;
		if pnTipoGrafico = 65 then begin
		 autXLSerieColeccion.Item(pnSerie).Border.ColorIndex := pnColor;
		 autXLSerieColeccion.Item(pnSerie).MarkerBackgroundColorIndex := pnPrimerPlano;
		 autXLSerieColeccion.Item(pnSerie).MarkerForegroundColorIndex := pnSegundoPlano;
		 autXLSerieColeccion.Item(pnSerie).MarkerStyle := pnMarca;
		 autXLSerieColeccion.Item(pnSerie).Border.Weight := 4;
		end;
	end;

	procedure fnGraficoEjes(pnMenor: Integer;pnMayor: Integer)
	begin
		autXLEjes		   := autXLChart.Axes(2);
		autXLEjes.MinorUnit := pnMenor;
		autXLEjes.MajorUnit := pnMayor;
		autXLEjes.DisplayUnit := -6;
		/*
		autXLEjes1	 := autXLChart.Axes(1);
		autXLEjes1.TickLabels.Orientation := 90;
		//autXLEjes1.TickLabels.Font.Size   := 10;
		*/
		Clear(autXLEjes);
		/*
		CLEAR(autXLEjes1);
		*/

	end;

	procedure fnOrientacionEjes(pnOrientacion: Integer)
	begin
		autXLChart.PlotBy := pnOrientacion;
	end;

	procedure fnFormatoEjes(pnEje: Integer)
	begin
		//autXLEjes := autXLChart.Axes(pnEje);
		//autXLEjes.TickLabels.Font.Name := 'Verdana';
		//autXLEjes.TickLabels.Font.Size := 25;
	end;

	procedure fnGrabarHoja(Carpeta: Text[250])
	begin
		if Exists(Carpeta) then
		  exit;
		autXLLibro.__SaveAs(Carpeta);
	end;

	local procedure OnPreSectionCustomer_GroupHeader3(var Customer : Record Customer);
	begin
		with Customer do begin
		  ReportForNav.ShowOutput := FooterPrinted;
		  FooterPrinted := false;
		end;
	end;
	local procedure OnPreSectionCustomer_GroupHeader4(var Customer : Record Customer);
	begin
		with Customer do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = Customer.FieldNo("No.");
		end;
	end;
	local procedure OnPreSectionCustomer_GroupHeader5(var Customer : Record Customer);
	begin
		with Customer do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = LastFieldNo;
		end;
	end;
	local procedure OnPreSectionCustomer_GroupFooter7(var Customer : Record Customer);
	begin
		with Customer do begin
		  if not FooterPrinted then
			LastFieldNo := ReportForNav.TotalsCausedBy;
		  ReportForNav.ShowOutput := not FooterPrinted;
		  FooterPrinted := true;
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50019_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50019;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
