Report 50035 "Albaran de venta Canarias"
{
    Caption = 'Albaran de venta Canarias';
    Permissions = TableData "Sales Shipment Buffer" = rimd;
    RDLCLayout = './Layouts/AlbarandeventaCanarias.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Sales Shipment Header"; "Sales Shipment Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Posted Sales Invoice';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(CIF_NIF_CIFCLIE; 'CIF/NIF.' + CIFCLIE)
                    {
                    }
                    column(totaluni; totaluni)
                    {
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                    }
                    column(SalesShipmentHeaderYourReference; "Sales Shipment Header"."Your Reference")
                    {
                    }
                    column(Nopedido; 'N┬º pedido')
                    {
                    }
                    column(Nopedido__SalesShipmentHeaderOrderNo; 'N┬º pedido: ' + "Sales Shipment Header"."Order No.")
                    {
                    }
                    column(Pallets__FORMAT_SalesShipmentHeaderNoPalets; 'Pallets:' + Format("Sales Shipment Header"."Nº Palets"))
                    {
                    }
                    column(TotalBultos__FORMAT_SalesShipmentHeaderTotalbultos_; 'Total Bultos: ' + Format("Sales Shipment Header"."Total bultos"))
                    {
                    }
                    column(Noexpedicion__SalesShipmentHeaderNoexpedicion; 'N┬º expedici┬ón: ' + "Sales Shipment Header"."Nº expedición")
                    {
                    }
                    column(SunoRef__SalesShipmentHeaderYourReference; 'Su n┬º Ref: ' + "Sales Shipment Header"."Your Reference")
                    {
                    }
                    column(DireccionEnvio; 'Direcci┬ón Env┬ío')
                    {
                    }
                    column(DireccionFiscal; 'Direcci┬ón Fiscal')
                    {
                    }
                    column(Notelefono__CustPhoneNo; 'N┬º telefono:' + Cust."Phone No.")
                    {
                    }
                    column(CustAddr7; CustAddr[7])
                    {
                    }
                    column(CustAddr6; CustAddr[6])
                    {
                    }
                    column(CustAddr5; CustAddr[5])
                    {
                    }
                    column(CustAddr4; CustAddr[4])
                    {
                    }
                    column(CustAddr3; CustAddr[3])
                    {
                    }
                    column(CustAddr2; CustAddr[2])
                    {
                    }
                    column(CustAddr1; CustAddr[1])
                    {
                    }
                    column(SalesShipmentHeaderDocumentDate; Format("Sales Shipment Header"."Document Date"))
                    {
                    }
                    column(ShipToAddr8; ShipToAddr[8])
                    {
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                    }
                    column(Fecha; 'Fecha')
                    {
                    }
                    column(SalesShipmentHeaderNo; "Sales Shipment Header"."No.")
                    {
                    }
                    column(SalesPurchPersonName; SalesPurchPerson.Name)
                    {
                    }
                    column(SalesPersonText; SalesPersonText)
                    {
                    }
                    column(SalesShipmentHeaderBill_toCustomerNo; "Sales Shipment Header"."Bill-to Customer No.")
                    {
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Sales Shipment Header";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_38; 38) { } // Autogenerated by ForNav - Do not delete
                        column(DimText; DimText)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not PostedDocDim1.Find('-') then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo(
                                      '%1 %2', PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1, %2 %3', DimText,
                                        PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (PostedDocDim1.Next = 0);
                        end;

                    }
                    dataitem("Sales Shipment Line"; "Sales Shipment Line")
                    {
                        DataItemLink = "Document No." = field("No.");
                        DataItemLinkReference = "Sales Shipment Header";
                        DataItemTableView = sorting("Document No.", "Line No.");
                        column(ReportForNavId_40; 40) { } // Autogenerated by ForNav - Do not delete
                        column(Linno; 'Lin.n┬º')
                        {
                        }
                        column(Importe; 'Importe')
                        {
                            AutoFormatExpression = "Sales Shipment Line".GetCurrencyCode;
                            AutoFormatType = 1;
                        }
                        column(Preciofinal; 'Precio final')
                        {
                        }
                        column(Dtos; 'Dtos')
                        {
                        }
                        column(Tarifa; 'Tarifa')
                        {
                            //DecimalPlaces = 3 : 3;
                        }
                        column(IgicPct; 'Igic%')
                        {
                        }
                        column(Cantidad; 'Cantidad')
                        {
                        }
                        column(Ean; 'Ean')
                        {
                        }
                        column(Descripcion; 'Descripci┬ón')
                        {
                        }
                        column(Referencia; 'Referencia')
                        {
                        }
                        column(IvaPct; 'Iva%')
                        {
                        }
                        column(SalesShipmentLineVATBaseAmount; "Sales Shipment Line"."VAT Base Amount")
                        {
                            AutoFormatExpression = "Sales Shipment Line".GetCurrencyCode;
                            AutoFormatType = 1;
                        }
                        column(Description; "Sales Shipment Line".Description)
                        {
                        }
                        column(Renglon; Renglon)
                        {
                            //DecimalPlaces = 0 : 0;
                        }
                        column(cb; cb)
                        {
                        }
                        column(codiva; codiva)
                        {
                        }
                        column(Preciobase; "Precio base")
                        {
                            DecimalPlaces = 2 : 2;
                        }
                        column(Preciofinal2; "Precio final")
                        {
                        }
                        column(dto; dto)
                        {
                        }
                        column(SalesShipmentLineItemChargeBaseAmount; "Sales Shipment Line"."Item Charge Base Amount")
                        {
                            AutoFormatExpression = "Sales Shipment Line".GetCurrencyCode;
                            AutoFormatType = 1;
                        }
                        column(Quantity; "Sales Shipment Line".Quantity)
                        {
                        }
                        column(SalesShipmentLineNo; "Sales Shipment Line"."No.")
                        {
                        }
                        column(VATPct; "Sales Shipment Line"."VAT %")
                        {
                        }
                        column(Refhagen_RecItem; RecItem."Ref. hagen")
                        {
                        }
                        column(nueva1; nueva1)
                        {
                        }
                        column(Fechacaducidad; "Fecha caducidad")
                        {
                        }
                        column(Nolote; "Nº lote")
                        {
                        }
                        column(CIFJ76648815; 'CIF. J76648815')
                        {
                        }
                        column(TelEspana__34961200945; 'Tel.Espa┬ña: +34 96 120 09 45')
                        {
                        }
                        column(totalbase_totaliva_totalrec; totalbase + totaliva + totalrec)
                        {
                        }
                        column(totaliva; totaliva)
                        {
                        }
                        column(totalbase; totalbase)
                        {
                        }
                        column(PaymentMethodDescription; PaymentMethod.Description)
                        {
                        }
                        column(ShipmentMethodDescription; ShipmentMethod.Description)
                        {
                        }
                        column(PaymentTermsDescription; PaymentTerms.Description)
                        {
                        }
                        column(TotalFACTURA; 'Total FACTURA')
                        {
                        }
                        dataitem("Sales Shipment Buffer"; Integer)
                        {
                            DataItemTableView = sorting(Number);
                            column(ReportForNavId_79; 79) { } // Autogenerated by ForNav - Do not delete
                            column(SalesShipmentBufferQuantity; SalesShipmentBuffer.Quantity)
                            {
                                DecimalPlaces = 0 : 5;
                            }
                            column(SalesShipmentBufferPostingDate; SalesShipmentBuffer."Posting Date")
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                SalesShipmentBuffer.SetRange("Document No.", "Sales Shipment Line"."Document No.");
                                SalesShipmentBuffer.SetRange("Line No.", "Sales Shipment Line"."Line No.");
                                SetRange(Number, 1, SalesShipmentBuffer.Count);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then
                                    SalesShipmentBuffer.Find('-')
                                else
                                    SalesShipmentBuffer.Next;
                            end;

                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_82; 82) { } // Autogenerated by ForNav - Do not delete
                            column(DimText3; DimText)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                /// PostedDocDim2.SETRANGE("Dimension Set ID", "Sales Invoice Line"."Dimension Set ID");
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not PostedDocDim2.Find('-') then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo(
                                          '%1 %2', PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1, %2 %3', DimText,
                                            PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until (PostedDocDim2.Next = 0);
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            VATAmountLine.DeleteAll;
                            SalesShipmentBuffer.Reset;
                            SalesShipmentBuffer.DeleteAll;
                            FirstValueEntryNo := 0;
                            MoreLines := Find('+');
                            while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) do
                                MoreLines := Next(-1) <> 0;
                            if not MoreLines then
                                ///  CurrReport.BREAK;
                                SetRange("Line No.", 0, "Line No.");
                            /// CREATETOTALS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount","Pmt. Disc. Given Amount");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if "Sales Shipment Line".Quantity = 0 then begin
                                CurrReport.Skip;
                            end;
                            if "Sales Shipment Line"."NO imprimir en albaran" then begin
                                CurrReport.Skip;
                            end;
                            if "Sales Shipment Header"."Usuario alta" = 'USERNWS' then begin
                                if "Sales Shipment Line"."Precio base" = 0 then begin
                                    "Sales Shipment Line"."Precio base" := "Sales Shipment Line"."Unit Price";
                                end;
                            end;
                            Renglon := Renglon + 1;
                            dto := '';
                            if ("Sales Shipment Line"."Dto% cabecera/oferta" <> 0) and
                               ("Sales Shipment Line"."% Dto. vendedor" <> 0) and
                               ("Sales Shipment Line"."Line Discount %" <> 0) then begin
                                dto := Format("Sales Shipment Line"."% Dto. vendedor") + '+' +
                                     Format("Sales Shipment Line"."Dto% cabecera/oferta") + '+' +
                                     Format("Sales Shipment Line"."Line Discount %");
                            end;
                            if ("Sales Shipment Line"."Dto% cabecera/oferta" <> 0) and
                               ("Sales Shipment Line"."% Dto. vendedor" = 0) and
                               ("Sales Shipment Line"."Line Discount %" = 0) then begin
                                dto := Format("Sales Shipment Line"."Dto% cabecera/oferta");
                            end;
                            if ("Sales Shipment Line"."Dto% cabecera/oferta" = 0) and
                               ("Sales Shipment Line"."% Dto. vendedor" <> 0) and
                               ("Sales Shipment Line"."Line Discount %" = 0) then begin
                                dto := Format("Sales Shipment Line"."% Dto. vendedor");
                            end;
                            if ("Sales Shipment Line"."Dto% cabecera/oferta" = 0) and
                               ("Sales Shipment Line"."% Dto. vendedor" = 0) and
                               ("Sales Shipment Line"."Line Discount %" <> 0) then begin
                                dto := Format("Sales Shipment Line"."Line Discount %");
                            end;
                            if ("Sales Shipment Line"."Dto% cabecera/oferta" <> 0) and
                               ("Sales Shipment Line"."% Dto. vendedor" <> 0) and
                               ("Sales Shipment Line"."Line Discount %" = 0) then begin
                                dto := Format("Sales Shipment Line"."% Dto. vendedor") + '+' +
                                     Format("Sales Shipment Line"."Dto% cabecera/oferta");
                            end;
                            if ("Sales Shipment Line"."Dto% cabecera/oferta" <> 0) and
                               ("Sales Shipment Line"."% Dto. vendedor" = 0) and
                               ("Sales Shipment Line"."Line Discount %" <> 0) then begin
                                dto := Format("Sales Shipment Line"."Dto% cabecera/oferta") + '+' +
                                     Format("Sales Shipment Line"."Line Discount %");
                            end;
                            if ("Sales Shipment Line"."Dto% cabecera/oferta" = 0) and
                               ("Sales Shipment Line"."% Dto. vendedor" <> 0) and
                               ("Sales Shipment Line"."Line Discount %" <> 0) then begin
                                dto := Format("Sales Shipment Line"."% Dto. vendedor") + '+' +
                                     Format("Sales Shipment Line"."Line Discount %");
                            end;
                            if "Sales Shipment Line"."Customer Price Group" = '' then begin
                                if dto <> '' then begin
                                    dto := dto + '+P.especial';
                                end;
                                if dto = '' then begin
                                    dto := 'P.especial';
                                end;
                            end;
                            PostedShipmentDate := 0D;
                            if Quantity <> 0 then
                                PostedShipmentDate := FindPostedShipmentDate;
                            if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
                                "No." := '';
                            /*
							Rec325.CHANGECOMPANY('HAGEN CANARIAS S.C.');
							IF Rec325.GET('IGIC',"Sales Shipment Line"."VAT Prod. Posting Group") THEN BEGIN
								 "Sales Shipment Line"."VAT %":=Rec325."VAT %";
							END;
							VATPostingSetup.CHANGECOMPANY('HAGEN CANARIAS S.C.');
							IF VATPostingSetup.GET('IGIC',"Sales Shipment Line"."VAT Prod. Posting Group") THEN BEGIN
								VATAmountLine.INIT;
							///	VATAmountLine."VAT Identifier" := "Sales Shipment Line"."VAT Identifier";
								VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
								VATAmountLine."Tax Group Code" := "Tax Group Code";
								VATAmountLine."VAT %" := VATPostingSetup."VAT %";
								VATAmountLine."EC %" := VATPostingSetup."EC %";
							codiva:=FORMAT(VATPostingSetup."VAT %");
							IF VATPostingSetup."EC %"<>0 THEN BEGIN
								 codiva:=codiva+'+'+FORMAT(VATPostingSetup."EC %");
							END;
								VATAmountLine."VAT+EC Base" := "Sales Shipment Line"."VAT Base Amount";
								VATAmountLine."Amount Including VAT+EC" :="Sales Shipment Line"."VAT Base Amount";
								VATAmountLine."Line Amount" :="Sales Shipment Line"."VAT Base Amount";
								{VATAmountLine."Pmt. Disc. Given Amount" := "Pmt. Disc. Given Amount";
								IF "Allow Invoice Disc." THEN
								  VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
								VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
								}
								VATAmountLine.SetCurrencyCode("Sales Shipment Header"."Currency Code");
							///	VATAmountLine."VAT Difference" := "VAT Difference";
							///	VATAmountLine."EC Difference" := "EC Difference";
								IF "Sales Shipment Header"."Prices Including VAT" THEN
								  VATAmountLine."Prices Including VAT" := TRUE;
								VATAmountLine.InsertLine;
							END;
							*/
                            ivaigic := '';
                            if prod.Get("Sales Shipment Line"."No.") then begin
                                ivaigic := prod."IVA IGIC";
                            end;
                            if Rec325.Get("Sales Shipment Line"."VAT Bus. Posting Group", ivaigic) then begin
                                "Sales Shipment Line"."VAT %" := Rec325."VAT %";
                            end;
                            if VATPostingSetup.Get("Sales Shipment Line"."VAT Bus. Posting Group", ivaigic) then begin
                                VATAmountLine.Init;
                                ///	VATAmountLine."VAT Identifier" := "Sales Shipment Line"."VAT Identifier";
                                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                                VATAmountLine."Tax Group Code" := "Tax Group Code";
                                VATAmountLine."VAT %" := VATPostingSetup."VAT %";
                                VATAmountLine."EC %" := VATPostingSetup."EC %";
                                codiva := Format(VATPostingSetup."VAT %");
                                if VATPostingSetup."EC %" <> 0 then begin
                                    codiva := codiva + '+' + Format(VATPostingSetup."EC %");
                                end;
                                VATAmountLine."VAT Base" := "Sales Shipment Line"."VAT Base Amount";
                                VATAmountLine."Amount Including VAT" := "Sales Shipment Line"."VAT Base Amount";
                                VATAmountLine."Line Amount" := "Sales Shipment Line"."VAT Base Amount";
                                /*VATAmountLine."Pmt. Disc. Given Amount" := "Pmt. Disc. Given Amount";
								IF "Allow Invoice Disc." THEN
								  VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
								VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
								*/
                                VATAmountLine.SetCurrencyCode("Sales Shipment Header"."Currency Code");
                                ///	VATAmountLine."VAT Difference" := "VAT Difference";
                                ///	VATAmountLine."EC Difference" := "EC Difference";
                                if "Sales Shipment Header"."Prices Including VAT" then
                                    VATAmountLine."Prices Including VAT" := true;
                                VATAmountLine.InsertLine;
                            end;
                            cb := '';
                            precioreco := 0;
                            FRAGIL := false;
                            if RecItem.Get("Sales Shipment Line"."No.") then begin
                                precioreco := RecItem."Precio recomendado";
                                cb := RecItem.ean;
                                FRAGIL := RecItem."Producto FRAGIL";
                            end;
                            RecTVP.Reset;
                            RecTVP.SetRange(RecTVP."Item No.", "Sales Shipment Line"."No.");
                            if RecTVP.FindFirst then begin
                                precioreco := RecTVP."Precio recomendado";
                            end;
                            RecTVP.Reset;
                            RecTVP.SetRange(RecTVP."Item No.", "Sales Shipment Line"."No.");
                            RecTVP.SetRange(RecTVP."Sales Code", "Sales Shipment Line"."Customer Price Group");
                            if RecTVP.FindFirst then begin
                                precioreco := RecTVP."Precio recomendado";
                            end;
                            beneficio := 0;
                            if "Sales Shipment Line".Quantity <> 0 then begin
                                if precioreco <> 0 then begin
                                    beneficio := ("Sales Shipment Line"."Item Charge Base Amount" / "Sales Shipment Line".Quantity) /
                                               (precioreco / (1 + ("Sales Shipment Line"."VAT %" / 100))) * 100;
                                end;
                            end;
                            totalbase := totalbase + "Sales Shipment Line"."Item Charge Base Amount";
                            totalrec := totalrec + ROUND("Sales Shipment Line"."Item Charge Base Amount" * VATPostingSetup."EC %", 0.01) / 100;
                            totaliva := totaliva + ROUND("Sales Shipment Line"."Item Charge Base Amount" * "Sales Shipment Line"."VAT %", 0.01) / 100;
                            totalfac := totaliva +
                            "Sales Shipment Line"."Item Charge Base Amount" +
                            +ROUND("Sales Shipment Line"."Item Charge Base Amount" * "Sales Shipment Line"."VAT %", 0.01) / 100 +
                            +ROUND("Sales Shipment Line"."Item Charge Base Amount" * VATPostingSetup."EC %", 0.01) / 100;
                            RecSP.Reset;
                            RecSP.SetRange(RecSP."Item No.", "Sales Shipment Line"."No.");
                            RecSP.SetRange(RecSP."Sales Code", "Sales Shipment Line"."Customer Price Group");
                            if RecSP.FindFirst then begin
                                RecItem."Ref. hagen" := RecSP."Ref. hagen";
                            end;

                        end;

                    }
                    dataitem(VATCounter; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_84; 84) { } // Autogenerated by ForNav - Do not delete
                        column(VATAmountLineECPct; VATAmountLine."EC %")
                        {
                            AutoFormatExpression = "Sales Shipment Header"."Currency Code";
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineECAmount; VATAmountLine."EC Amount")
                        {
                            AutoFormatExpression = "Sales Shipment Header"."Currency Code";
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineInvoiceDiscountAmount_VATAmountLinePmtDiscGiven; VATAmountLine."Invoice Discount Amount") /// + VATAmountLine."Pmt. Disc. Given Amount")
                        {
                            AutoFormatExpression = "Sales Shipment Header"."Currency Code";
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineInvDiscBaseAmount; VATAmountLine."Inv. Disc. Base Amount")
                        {
                            AutoFormatExpression = "Sales Shipment Header"."Currency Code";
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineLineAmount; VATAmountLine."Line Amount")
                        {
                            AutoFormatExpression = "Sales Shipment Header"."Currency Code";
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineVATIdentifier; VATAmountLine."VAT Identifier")
                        {
                        }
                        column(VATAmountLineVATAmount; VATAmountLine."VAT Amount")
                        {
                            AutoFormatExpression = "Sales Shipment Header"."Currency Code";
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineVAT_ECBase; VATAmountLine."VAT Base")
                        {
                            AutoFormatExpression = "Sales Shipment Header"."Currency Code";
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineVATPct; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 6;
                        }
                        trigger OnPreDataItem();
                        begin
                            SetRange(Number, 1, VATAmountLine.Count);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                        end;

                    }
                    dataitem(VatCounterLCY; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_94; 94) { } // Autogenerated by ForNav - Do not delete
                        column(VALExchRate; VALExchRate)
                        {
                        }
                        column(VALSpecLCYHeader; VALSpecLCYHeader)
                        {
                        }
                        column(VALVATAmountLCY; VALVATAmountLCY)
                        {
                            AutoFormatType = 1;
                        }
                        column(VALVATBaseLCY; VALVATBaseLCY)
                        {
                            AutoFormatType = 1;
                        }
                        column(VATAmountLineVATIdentifier2; VATAmountLine."VAT Identifier")
                        {
                        }
                        column(VATAmountLineVATPct2; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        trigger OnPreDataItem();
                        begin
                            if (not GLSetup."Print VAT specification in LCY") or
                               ("Sales Shipment Header"."Currency Code" = '') or
                               (VATAmountLine.GetTotalVATAmount = 0) then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            if GLSetup."LCY Code" = '' then
                                VALSpecLCYHeader := Text007 + Text008
                            else
                                VALSpecLCYHeader := Text007 + Format(GLSetup."LCY Code");
                            CurrExchRate.FindCurrency("Sales Shipment Header"."Posting Date", "Sales Shipment Header"."Currency Code", 1);
                            CalculatedExchRate := ROUND(1 / "Sales Shipment Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount", 0.000001);
                            VALExchRate := StrSubstNo(Text009, CalculatedExchRate, CurrExchRate."Exchange Rate Amount");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                            VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Sales Shipment Header"."Currency Factor");
                            VALVATAmountLCY := ROUND(VATAmountLine."VAT Amount" / "Sales Shipment Header"."Currency Factor");
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_101; 101) { } // Autogenerated by ForNav - Do not delete
                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_102; 102) { } // Autogenerated by ForNav - Do not delete
                        trigger OnPreDataItem();
                        begin
                            if not ShowShippingAddr then
                                CurrReport.Break;
                        end;

                    }
                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + Cust."Invoice Copies" + 1;
                    if NoOfLoops <= 0 then
                        NoOfLoops := 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Number > 1 then
                        CopyText := Text003;

                end;

            }
            trigger OnAfterGetRecord();
            var
                LanguageLocal: Codeunit "Language";
            begin
                CurrReport.LANGUAGE := LanguageLocal.GetLanguageIdOrDefault("Language Code");
                ///NALBA:=COPYSTR("Sales Shipment Header"."Order No.",2,3)+COPYSTR("Sales Shipment Header"."Order No.",6,4);
                NALBA := CopyStr("Sales Shipment Header"."Order No.", 3, 2) + CopyStr("Sales Shipment Header"."Order No.", 6, 5);
                ///50058
                if StrLen(NALBA) < 7 then begin
                    NALBA := '0' + NALBA;
                end;
                contador := NALBA + '00';
                VALORADO := "Sales Shipment Header"."nuloAlbaran valorado";
                totaluni := 0;
                Rectra.Init;
                if Rectra.Get("Sales Shipment Header"."Shipping Agent Code") then begin
                end;
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                end;
                DETALLEPVP := false;
                if RecClie.Get("Sales Shipment Header"."Sell-to Customer No.") then begin
                    DETALLEPVP := RecClie."Factura con PVP";
                end;
                if "Order No." = '' then
                    OrderNoText := ''
                else
                    OrderNoText := FieldCaption("Order No.");
                if "Salesperson Code" = '' then begin
                    SalesPurchPerson.Init;
                    SalesPersonText := '';
                end else begin
                    SalesPurchPerson.Get("Salesperson Code");
                    SalesPersonText := Text000;
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                if "VAT Registration No." = '' then
                    VATNoText := ''
                else
                    VATNoText := FieldCaption("VAT Registration No.");
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text1100000, GLSetup."LCY Code");
                    TotalExclVATText := StrSubstNo(Text1100001, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text001, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text1100000, "Currency Code");
                    TotalExclVATText := StrSubstNo(Text1100001, "Currency Code");
                end;
                FormatAddr.SalesShptSellTo(CustAddr, "Sales Shipment Header");
                if not Cust.Get("Bill-to Customer No.") then
                    Clear(Cust);
                if "Payment Terms Code" = '' then
                    PaymentTerms.Init
                else begin
                    PaymentTerms.Get("Payment Terms Code");
                    PaymentTerms.TranslateDescription(PaymentTerms, "Language Code");
                end;
                if "Payment Method Code" = '' then
                    PaymentMethod.Init
                else
                    PaymentMethod.Get("Payment Method Code");
                if "Shipment Method Code" = '' then
                    ShipmentMethod.Init
                else begin
                    ShipmentMethod.Get("Shipment Method Code");
                    ShipmentMethod.TranslateDescription(ShipmentMethod, "Language Code");
                end;
                FormatAddr.SalesShptShipTo(ShipToAddr, "Sales Shipment Header");
                ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
                for i := 1 to ArrayLen(ShipToAddr) do
                    if ShipToAddr[i] <> CustAddr[i] then
                        ShowShippingAddr := true;
                /*
				IF LogInteraction THEN
				  IF NOT CurrReport.PREVIEW THEN BEGIN
					IF "Bill-to Contact No." <> '' THEN
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Contact,"Bill-to Contact No.","Salesperson Code",
						"Campaign No.","Posting Description",'')
					ELSE
					  SegManagement.LogDocument(
						4,"No.",0,0,DATABASE::Customer,"Bill-to Customer No.","Salesperson Code",
						"Campaign No.","Posting Description",'');
				  END;
				*/
                CustAddrdf[1] := CustAddr[1];
                CustAddrdf[2] := CustAddr[2];
                CustAddrdf[3] := CustAddr[3];
                CustAddrdf[4] := CustAddr[4];
                CustAddrdf[5] := CustAddr[5];
                CustAddrdf[6] := CustAddr[6];
                CustAddrdf[7] := CustAddr[7];
                CustAddrdf[8] := CustAddr[8];
                if UserId = '20' then begin
                    if "Sales Shipment Header"."Shipping Agent Code" = 'DHL' then begin
                        Rec110.Reset;
                        Rec110.SetRange(Rec110."No.", "Sales Shipment Header"."No.");
                        if Rec110.FindFirst then begin
                            ///CUEXP.EtiDHL2(Rec110);
                        end;
                    end;
                    if "Sales Shipment Header"."Shipping Agent Code" = 'SEUR' then begin
                        Rec110.Reset;
                        Rec110.SetRange(Rec110."No.", "Sales Shipment Header"."No.");
                        if Rec110.FindFirst then begin
                            ///CUEXP.EtiSEUR(Rec110);
                        end;
                    end;
                    if "Sales Shipment Header"."Shipping Agent Code" = 'TNT' then begin
                        Rec110.Reset;
                        Rec110.SetRange(Rec110."No.", "Sales Shipment Header"."No.");
                        if Rec110.FindFirst then begin
                            ///CUEXP.EtiSEUR(Rec110);
                        end;
                    end;
                    /*IF "Sales Shipment Header"."Shipping Agent Code"='CLI' THEN BEGIN
                         CLEAR(REP50033);
                         Rec110.RESET;
                         Rec110.SETRANGE(Rec110."No.","Sales Shipment Header"."No.");
                         IF Rec110.FINDFIRST THEN BEGIN
                              REP50033.SETTABLEVIEW(Rec110);
                              REP50033.RUNMODAL;
                         END;
                    END;
                    */
                    CUEXP.ENVIOSMS("Sales Shipment Header");
                end;
                totaluni := 0;
                Rec111.Reset;
                Rec111.SetRange(Rec111."Document No.", "Sales Shipment Header"."No.");
                if Rec111.FindFirst then
                    repeat
                        totaluni := totaluni + Rec111.Quantity;
                    until Rec111.Next = 0;
                if RecClie.Get("Sales Shipment Header"."Sell-to Customer No.") then begin
                    centro := RecClie."Centro ECI";
                end;
                if RecClie."Centro ECI" <> '' then begin
                    ///// 5448
                    RecClie2.Get('5448');
                    if "Sales Shipment Header"."Customer Price Group" = 'BRICO' then begin
                        RecClie2.Get('5853');
                    end;
                    RecClie2.Contact := '';
                    FormatAddr.Customer(CustAddr, RecClie2);
                    FormatAddr.Customer(CustAddrdf, RecClie2);
                end;
                CIFCLIE := '';
                if RecClie3.Get("Sales Shipment Header"."Sell-to Customer No.") then begin
                    CIFCLIE := RecClie3."VAT Registration No.";
                end;

            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                    }

                }
            }
        }

        trigger OnOpenPage()
        begin
            InitLogInteraction;
            ; // TODO RequestRequestOptionsPage.LogInteraction.ENABLED(LogInteraction);
        end;

    }

    trigger OnInitReport()
    begin
        GLSetup.Get;
        CompanyInfo.Get;
        SalesSetup.Get;
        case SalesSetup."Logo Position on Documents" of
            SalesSetup."logo position on documents"::"No Logo":
                ;
            SalesSetup."logo position on documents"::Left:
                begin
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Center:
                begin
                    CompanyInfo1.Get;
                    CompanyInfo1.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Right:
                begin
                    CompanyInfo2.Get;
                    CompanyInfo2.CalcFields(Picture);
                end;
        end;


    end;

    trigger OnPostReport()
    begin
        /*
				  IF "Sales Shipment Header"."Albaran sin detalle" THEN BEGIN
					   Rec110.RESET;
					   Rec110.SETRANGE(Rec110."No.","Sales Shipment Header"."No.");
					   IF Rec110.FINDFIRST THEN BEGIN
							RepSV.SETTABLEVIEW(Rec110);
							RepSV.RUN;
					   END;
				  END;
		 */


    end;

    trigger OnPreReport()
    begin
        if not CurrReport.UseRequestPage then
            InitLogInteraction;

    end;

    var
        Text000: label 'Salesperson';
        Text001: label 'Total %1';
        Text002: label 'Total %1 Incl. VAT';
        Text003: label 'COPY';
        Text004: label 'Sales - Invoice %1';
        Text005: label 'Page %1';
        Text006: label 'Total %1 Excl. VAT';
        GLSetup: Record "General Ledger Setup";
        ShipmentMethod: Record "Shipment Method";
        PaymentTerms: Record "Payment Terms";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInfo: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        Cust: Record Customer;
        VATAmountLine: Record "VAT Amount Line" temporary;
        PostedDocDim1: Record "Dimension Set Entry";
        PostedDocDim2: Record "Dimension Set Entry";
        RespCenter: Record "Responsibility Center";
        // Language: Codeunit Language;
        CurrExchRate: Record "Currency Exchange Rate";
        SalesInvCountPrinted: Codeunit "Sales Inv.-Printed";
        FormatAddr: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
        PostedShipmentDate: Date;
        CustAddr: array[8] of Text[50];
        CustAddrdf: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        OrderNoText: Text[30];
        SalesPersonText: Text[30];
        VATNoText: Text[30];
        ReferenceText: Text[30];
        TotalText: Text[50];
        TotalExclVATText: Text[50];
        TotalInclVATText: Text[50];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        ShowShippingAddr: Boolean;
        i: Integer;
        NextEntryNo: Integer;
        FirstValueEntryNo: Integer;
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        LogInteraction: Boolean;
        VALVATBaseLCY: Decimal;
        VALVATAmountLCY: Decimal;
        VALSpecLCYHeader: Text[80];
        Text007: label 'VAT Amount Specification in ';
        Text008: label 'Local Currency';
        VALExchRate: Text[50];
        Text009: label 'Exchange rate: %1/%2';
        CalculatedExchRate: Decimal;
        Text010: label 'Sales - Prepayment Invoice %1';
        Text1100000: label 'Total %1 Incl. VAT+EC';
        Text1100001: label 'Total %1 Excl. VAT+EC';
        VATPostingSetup: Record "VAT Posting Setup";
        PaymentMethod: Record "Payment Method";
        dto: Code[50];
        cb: Code[20];
        precioreco: Decimal;
        beneficio: Decimal;
        RecItem: Record Item;
        totalbase: Decimal;
        totaliva: Decimal;
        totalfac: Decimal;
        VALORADO: Boolean;
        Rectra: Record "Shipping Agent";
        Renglon: Integer;
        FRAGIL: Boolean;
        Rec110: Record "Sales Shipment Header";
        //RepSV: Report UnknownReport50030;
        codiva: Code[10];
        RecTVP: Record "Sales Price";
        CUEXP: Codeunit "Automaticos Cartas";
        REP50033: Report "Etiqueta Envio";
        totalrec: Decimal;
        centro: Code[10];
        RecClie: Record Customer;
        RecClie2: Record Customer;
        totaluni: Decimal;
        Rec111: Record "Sales Shipment Line";
        INFOLINEA: Text[250];
        PV: Decimal;
        BF: Decimal;
        PV2: Decimal;
        DETALLEPVP: Boolean;
        "---------------": Integer;
        ExcelBuf: Record "Excel Buffer" temporary;
        InfoEmpresa: array[8] of Text[30];
        PrintToExcel: Boolean;
        ESTANTE: Code[20];
        STOCK: Decimal;
        nombreprepara: Text[30];
        RecMulti: Record Multitabla;
        TELEFONO: Text[30];
        RecCusto: Record Customer;
        transport: Text[30];
        vendedor: Text[30];
        RecVende: Record "Salesperson/Purchaser";
        RecLC: Record "Sales Comment Line";
        Tex: array[4] of Text[255];
        conta: Integer;
        Rec37: Record "Sales Shipment Line";
        REC371: Record "Sales Shipment Line";
        tlinea: Decimal;
        CODIGO: Code[80];
        codebar: Code[23];
        ok: Integer;
        C1: Code[2];
        DPTO: Code[5];
        NPEDIDO: Code[8];
        NALBA: Code[7];
        CODBAR: Code[28];
        DESCODBAR: Code[50];
        NBUL: Integer;
        TOTALBUL: Integer;
        prod: Record Item;
        RecEAD: Record "Ship-to Address";
        CENTRO1: Code[2];
        dcentro: Code[20];
        dcentro1: Code[20];
        nueva: Code[30];
        nueva1: Code[30];
        cantidad: Decimal;
        contador: Code[9];
        dc: Code[1];
        DIG1: array[17] of Code[1];
        DIG2: array[17] of Integer;
        SUMA1: Integer;
        XX: Integer;
        SUMA2: Integer;
        RESTO: Integer;
        SUNABUL: Decimal;
        RecSP: Record "Sales Price";
        Rec325: Record "VAT Posting Setup";
        RecClie3: Record Customer;
        CIFCLIE: Text[30];
        ivaigic: Code[20];
        Table111: Record "Sales Shipment Line";

    procedure InitLogInteraction()
    begin
        //LogInteraction := SegManagement.FindInteractTmplCode(4) <> '';
    end;

    procedure FindPostedShipmentDate(): Date
    var
        SalesShipmentHeader: Record "Sales Shipment Header";
        SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
    begin
        NextEntryNo := 1;
    end;

    procedure GenerateBufferFromValueEntry(SalesInvoiceLine2: Record "Sales Invoice Line")
    var
        ValueEntry: Record "Value Entry";
        ItemLedgerEntry: Record "Item Ledger Entry";
        TotalQuantity: Decimal;
        Quantity: Decimal;
    begin
        TotalQuantity := SalesInvoiceLine2."Quantity (Base)";
    end;

    procedure GenerateBufferFromShipment(SalesInvoiceLine: Record "Sales Invoice Line")
    var
        SalesInvoiceHeader: Record "Sales Invoice Header";
        SalesInvoiceLine2: Record "Sales Invoice Line";
        SalesShipmentHeader: Record "Sales Shipment Header";
        SalesShipmentLine: Record "Sales Shipment Line";
        TotalQuantity: Decimal;
        Quantity: Decimal;
    begin
    end;

    procedure CorrectShipment(var SalesShipmentLine: Record "Sales Shipment Line")
    var
        SalesInvoiceLine: Record "Sales Invoice Line";
    begin
        SalesInvoiceLine.SetCurrentkey("Shipment No.", "Shipment Line No.");
        SalesInvoiceLine.SetRange("Shipment No.", SalesShipmentLine."Document No.");
        SalesInvoiceLine.SetRange("Shipment Line No.", SalesShipmentLine."Line No.");
        if SalesInvoiceLine.Find('-') then
            repeat
                SalesShipmentLine.Quantity := SalesShipmentLine.Quantity - SalesInvoiceLine.Quantity;
            until SalesInvoiceLine.Next = 0;
    end;

    procedure AddBufferEntry(SalesInvoiceLine: Record "Sales Invoice Line"; QtyOnShipment: Decimal; PostingDate: Date)
    begin
        SalesShipmentBuffer.SetRange("Document No.", SalesInvoiceLine."Document No.");
        SalesShipmentBuffer.SetRange("Line No.", SalesInvoiceLine."Line No.");
        SalesShipmentBuffer.SetRange("Posting Date", PostingDate);
        if SalesShipmentBuffer.Find('-') then begin
            SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity + QtyOnShipment;
            SalesShipmentBuffer.Modify;
            exit;
        end;
        with SalesShipmentBuffer do begin
            "Document No." := SalesInvoiceLine."Document No.";
            "Line No." := SalesInvoiceLine."Line No.";
            "Entry No." := NextEntryNo;
            Type := SalesInvoiceLine.Type;
            "No." := SalesInvoiceLine."No.";
            Quantity := QtyOnShipment;
            "Posting Date" := PostingDate;
            Insert;
            NextEntryNo := NextEntryNo + 1
        end;
    end;

    local procedure DocumentCaption(): Text[250]
    begin
    end;

    procedure GetCarteraInvoice(): Boolean
    var
        CustLedgEntry: Record "Cust. Ledger Entry";
    begin
    end;


}
