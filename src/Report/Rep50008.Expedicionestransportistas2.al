#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.3.0.2521")
	{
		type(ForNav.Report_7_3_0_2521; ForNavReport50008_v7_3_0_2521){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50008){}   
		type("System.IO.Path"; System_IO_Path50008) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50008 "_Expediciones transportistas2"
{
	RDLCLayout = './Layouts/_Expedicionestransportistas2.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Sales Shipment Header";"Sales Shipment Header")
		{
			DataItemTableView = sorting("Nº expedición");
			RequestFilterFields = "Nº expedición","Posting Date","Sell-to Customer No.","Shipping Agent Code";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			trigger OnPreDataItem();
			begin
				LastFieldNo := FieldNo("Nº expedición");
			end;
			
			trigger OnAfterGetRecord();
			begin
				if "Sales Shipment Header"."Nº expedición"='' then begin
					 CurrReport.Skip;
				end;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		RecCE.Get;
		fnCrearAut;
		intFila := 1;
		  fnCrearHoja('EXPEDICIONES TRANSPORTISTAS',90);
		  fnCrearCelda('A' + Format(intFila),'Expedicion');
		  fnCrearCelda('B' + Format(intFila),'Fecha');
		  fnCrearCelda('C' + Format(intFila),'Cliente');
		  fnCrearCelda('D' + Format(intFila),'Nombre cliente');
		  fnCrearCelda('E' + Format(intFila),'Poblacion envio');
		  fnCrearCelda('F' + Format(intFila),'Provincia envio');
		  fnCrearCelda('G' + Format(intFila),'Transportista');
		  fnCrearCelda('H' + Format(intFila),'Bultos');
		  fnCrearCelda('I' + Format(intFila),'Zona');
		  fnCrearCelda('J' + Format(intFila),'Kilos');
		  fnCrearCelda('K' + Format(intFila),'Kilos del Volumen');
		  fnCrearCelda('L' + Format(intFila),'Precio');
		  fnCrearCelda('M' + Format(intFila),'Albaranes');
		  intFila := intFila + 1;
		;ReportsForNavPre;
	end;
	var
		LastFieldNo: Integer;
		FooterPrinted: Boolean;
		Window: Dialog;
		ItemAmount: Record "Item Amount";
		ItemAmount2: Record "Item Amount";
		ItemFilter: Text[250];
		ItemDateFilter: Text[30];
		Sequence: Text[30];
		Heading: Text[30];
		ShowSorting: Option Largest,Smallest;
		ShowType: Option "Sales (LCY)";
		NoOfRecordsToPrint: Integer;
		PrintAlsoIfZero: Boolean;
		ItemSales: Decimal;
		QtyOnHand: Decimal;
		SalesAmountPct: Decimal;
		QtyOnHandPct: Decimal;
		MaxAmount: Decimal;
		BarText: Text[50];
		i: Integer;
		Acumu: Decimal;
		TAcumu: Decimal;
		Tanto: Decimal;
		Clasi: Option A,B,C;
		RecCE: Record "Sales & Receivables Setup";
		TA: Decimal;
		TB: Decimal;
		TC: Decimal;
		Tipo: Option Propuesta,"Guardar datos";
		Rec1: Record "Sales Price";
		pvp: Decimal;
		dato1: Decimal;
		dato2: Decimal;
		CONTA: Integer;
		RecItem: Record Item;
		Tcanti: Decimal;
		tantoa: Decimal;
		tantob: Decimal;
		autXLApp: Automation ;
		autXLLibros: Automation ;
		autXLLibro: Automation ;
		autXLHojas: Automation ;
		autXLHoja: Automation ;
		autXLGraficos: Automation ;
		autXLGrafico: Automation ;
		autXLChart: Automation ;
		autXLRango: Automation ;
		autXLSeries: Automation ;
		autXLEjes: Automation ;
		autXLEjes1: Automation ;
		autXLSerieColeccion: Automation ;
		autXLSerie: Integer;
		intFila: Integer;
		PVMEDIO: Decimal;
		RecSP: Record "Sales Price";
		ROTACION: Decimal;
		DESDEFECHA: Date;
		HASTAFECHA: Date;
		DIAS: Integer;
		XX: Integer;
		CODLETRA: array [60] of Code[10];
		CODMES: array [60] of Date;
		NMES: Integer;
		"NAÑO": Integer;
		FECHAINI: Date;
		RecItem2: Record Item;
		canti: Decimal;
		desdeini: Date;
		hastafin: Date;
		mesescompra: Integer;
		sumatot: Decimal;
		mediamensual: Decimal;
		ZONA: Decimal;
		KILOS: Decimal;
		VOLUMEN: Decimal;
		PRECIO: Decimal;
		BULTOS: Decimal;
		RecMT3: Record UnknownRecord50022;
		CODZONA: Code[20];
		Rec111: Record "Sales Shipment Line";
		RecArea: Record "Area";
		RecCP: Record "Post Code";
		BUSCA: Decimal;
		TEXTOALBARANES: Text[1000];

	procedure fnCrearAut()
	begin
		Create(autXLApp);
		autXLApp.WindowState := -4143;
		autXLLibros := autXLApp.Workbooks;
		autXLLibro  := autXLLibros.Add;
		autXLHojas  := autXLLibro.Worksheets;
		autXLApp.Visible := true;
	end;

	procedure fnElimnarAut()
	begin
		//autXLApp.Columns.EntireColumn.AutoFit;
		autXLApp.Visible := true;
		Clear(autXLChart);
		Clear(autXLHoja);
		Clear(autXLHojas);
		Clear(autXLLibro);
		Clear(autXLLibros);
		Clear(autXLApp);
	end;

	procedure fnCrearHoja(txtNombreHoja: Text[100];intZoom: Integer)
	begin
		autXLHojas.Add;
		autXLHoja := autXLLibro.ActiveSheet;
		autXLHoja.Name := txtNombreHoja;
		autXLApp.ActiveWindow.Zoom := intZoom;
	end;

	procedure fnCrearCelda(txtCelda: Text[30];txtValor: Text[100])
	begin
		autXLHoja.Range(txtCelda).Value := txtValor;
	end;

	procedure fnFormatoCelda(txtCelda: Text[100];txtFormato: Text[100])
	begin
		autXLHoja.Range(txtCelda).NumberFormat := txtFormato;
	end;

	procedure fnAliniacionCelda(txtCelda: Text[100];intHorAli: Integer)
	begin
		autXLHoja.Range(txtCelda).HorizontalAlignment := intHorAli;
	end;

	procedure fnColorCelda(pnRango: Text[100];pnColorInterior: Integer;pnColorFuente: Integer;pnNegrita: Boolean)
	begin
		autXLHoja.Range(pnRango).Interior.ColorIndex := pnColorInterior;
		autXLHoja.Range(pnRango).Font.ColorIndex := pnColorFuente;
		autXLHoja.Range(pnRango).Font.Bold := pnNegrita;
	end;

	procedure fnBordes(pnRango: Text[100];pnBorde: Integer;pnLinea: Integer;pnAncho: Integer;pnColor: Integer)
	begin
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).LineStyle := pnLinea;
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).Weight	:= pnAncho;
		autXLHoja.Range(pnRango).Borders.Item(pnBorde).Color	 := pnColor;
	end;

	procedure fnGraficoCrear(pnTop: Integer;pnPosicion: Integer;pnAncho: Integer;pnAlto: Integer;"pnTamaño": Integer)
	begin
		autXLGraficos := autXLHoja.ChartObjects;
		autXLGrafico := autXLGraficos.Add(pnTop,pnPosicion,pnAlto,pnAncho);
		autXLChart   := autXLGrafico.Chart;
		//autXLChart.ChartArea.Width := pnTamaño;
	end;

	procedure fnGraficoParam(pnRango: Text[30];pnTipo: Integer;pnLeyLeft: Integer;pnLeyTop: Integer)
	begin
		autXLRango := autXLHoja.Range(pnRango);
		autXLChart.SetSourceData(autXLRango,'xlColumns');
		autXLChart.ChartType(pnTipo);
		autXLChart.PlotArea.Interior.ColorIndex := -4142;
		autXLChart.Legend.Left := pnLeyLeft;
		autXLChart.Legend.Top  := pnLeyTop;
		//autXLChart.ChartArea.Width := 692;
		//autXLChart.Legend.Font.Size := 10;
	end;

	procedure fnGraficoSeries(pnSerie: Integer;pnColor: Integer;pnTipoGrafico: Integer;pnMarca: Integer;pnPrimerPlano: Integer;pnSegundoPlano: Integer)
	begin
		autXLSerieColeccion := autXLChart.SeriesCollection;
		autXLSerieColeccion.Item(pnSerie).Interior.ColorIndex := pnColor;
		autXLSerieColeccion.Item(pnSerie).ChartType   := pnTipoGrafico;
		if pnTipoGrafico = 65 then begin
		 autXLSerieColeccion.Item(pnSerie).Border.ColorIndex := pnColor;
		 autXLSerieColeccion.Item(pnSerie).MarkerBackgroundColorIndex := pnPrimerPlano;
		 autXLSerieColeccion.Item(pnSerie).MarkerForegroundColorIndex := pnSegundoPlano;
		 autXLSerieColeccion.Item(pnSerie).MarkerStyle := pnMarca;
		 autXLSerieColeccion.Item(pnSerie).Border.Weight := 4;
		end;
	end;

	procedure fnGraficoEjes(pnMenor: Integer;pnMayor: Integer)
	begin
		autXLEjes		   := autXLChart.Axes(2);
		autXLEjes.MinorUnit := pnMenor;
		autXLEjes.MajorUnit := pnMayor;
		autXLEjes.DisplayUnit := -6;
		/*
		autXLEjes1	 := autXLChart.Axes(1);
		autXLEjes1.TickLabels.Orientation := 90;
		//autXLEjes1.TickLabels.Font.Size   := 10;
		*/
		Clear(autXLEjes);
		/*
		CLEAR(autXLEjes1);
		*/

	end;

	procedure fnOrientacionEjes(pnOrientacion: Integer)
	begin
		autXLChart.PlotBy := pnOrientacion;
	end;

	procedure fnFormatoEjes(pnEje: Integer)
	begin
		//autXLEjes := autXLChart.Axes(pnEje);
		//autXLEjes.TickLabels.Font.Name := 'Verdana';
		//autXLEjes.TickLabels.Font.Size := 25;
	end;

	procedure fnGrabarHoja(Carpeta: Text[250])
	begin
		if Exists(Carpeta) then
		  exit;
		autXLLibro.__SaveAs(Carpeta);
	end;

	local procedure OnPreSectionTable110_GroupHeader3(var "Sales Shipment Header" : Record "Sales Shipment Header");
	begin
		with Table110 do begin
		  ReportForNav.ShowOutput := FooterPrinted;
		  FooterPrinted := false;
		end;
	end;
	local procedure OnPreSectionTable110_GroupHeader4(var "Sales Shipment Header" : Record "Sales Shipment Header");
	begin
		with Table110 do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = "Sales Shipment Header".FieldNo("Nº expedición");
		  TEXTOALBARANES:='';
		  KILOS:=0;
		  Volumen:=0;
		  PRECIO:=0;
		  BULTOS:=0;
		  CODZONA:='';
		  BUSCA:=0;
		end;
	end;
	local procedure OnPreSectionTable110_GroupHeader5(var "Sales Shipment Header" : Record "Sales Shipment Header");
	begin
		with Table110 do begin
		  ReportForNav.ShowOutput :=
			ReportForNav.TotalsCausedBy = LastFieldNo;
		end;
	end;
	local procedure OnPreSectionTable110_Body6(var "Sales Shipment Header" : Record "Sales Shipment Header");
	begin
		with Table110 do begin
			///KILOS:=0;
			///VOLUMEN:=0;
			Rec111.Reset;
			Rec111.SetRange(Rec111."Document No.","Sales Shipment Header"."No.");
			if Rec111.FindFirst then repeat
				 KILOS:=KILOS+Rec111."Gross Weight"*Rec111.Quantity;
				 Volumen:=Volumen+Rec111."Unit Volume"*Rec111.Quantity;
			until Rec111.Next=0;
			if StrLen(TEXTOALBARANES)<900 then begin
				 TEXTOALBARANES:=TEXTOALBARANES+"Sales Shipment Header"."No."+' ';
			end;
		end;
	end;
	local procedure OnPreSectionTable110_GroupFooter7(var "Sales Shipment Header" : Record "Sales Shipment Header");
	begin
		with Table110 do begin
		  if not FooterPrinted then
			LastFieldNo := ReportForNav.TotalsCausedBy;
		  ReportForNav.ShowOutput := not FooterPrinted;
		  FooterPrinted := true;
			KILOS:=ROUND(KILOS,0.01);
			Volumen:=ROUND(Volumen*RecCE."Baremo Volumen"*(1+(RecCE."% hueco palet")/100),0.01);
			PRECIO:=0;
			CODZONA:='';
			RecCP.Reset;
			RecCP.SetRange(RecCP.Code,"Sales Shipment Header"."Ship-to Post Code");
			if RecCP.FindFirst then begin
				 RecMT3.Reset;
				 RecMT3.SetRange(RecMT3.Tabla,2);
				 RecMT3.SetRange(RecMT3.Provincia,RecCP."County Code");
				 RecMT3.SetRange(RecMT3."Transportista-Cliente","Sales Shipment Header"."Shipping Agent Code");
				 if RecMT3.FindFirst then begin
					  CODZONA:=RecMT3."Zona transportistas-Cliente";
					  BUSCA:=KILOS;
					  if Volumen>KILOS then begin
						   BUSCA:=Volumen;
					  end;
					  RecMT3.Reset;
					  RecMT3.SetRange(RecMT3.Tabla,3);
					  RecMT3.SetRange(RecMT3."Transportista tarifa","Sales Shipment Header"."Shipping Agent Code");
					  RecMT3.SetRange(RecMT3."Zona tarifa",CODZONA);
					  RecMT3.SetRange(RecMT3."Hasta Kilos",BUSCA,9999999999.0);
					  if RecMT3.FindFirst then begin
						   PRECIO:=RecMT3.Precio;
					  end;
				 end;
			end;
			fnCrearCelda('A' + Format(intFila),Format("Sales Shipment Header"."Nº expedición"));
			fnCrearCelda('B' + Format(intFila),Format("Sales Shipment Header"."Posting Date"));
			fnCrearCelda('C' + Format(intFila),Format("Sales Shipment Header"."Sell-to Customer No."));
			fnCrearCelda('D' + Format(intFila),Format("Sales Shipment Header"."Ship-to Name"));
			fnCrearCelda('E' + Format(intFila),Format("Sales Shipment Header"."Ship-to City"));
			fnCrearCelda('F' + Format(intFila),Format("Sales Shipment Header"."Ship-to County"));
			fnCrearCelda('G' + Format(intFila),Format("Sales Shipment Header"."Shipping Agent Code"));
			fnCrearCelda('H' + Format(intFila),Format("Sales Shipment Header"."Nº bultos"));
			fnCrearCelda('I' + Format(intFila),Format(CODZONA));
			fnCrearCelda('J' + Format(intFila),Format(KILOS));
			fnCrearCelda('K' + Format(intFila),Format(Volumen));
			fnCrearCelda('L' + Format(intFila),Format(PRECIO));
			fnCrearCelda('M' + Format(intFila),Format(TEXTOALBARANES));
			intFila:=intFila+1;
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50008_v7_3_0_2521;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50008;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2521\ForNav.Reports.7.3.0.2521.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2521.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.3.0.2521 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
